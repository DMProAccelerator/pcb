#=============================
# MAKEFILE
#=============================
.SUFFIXES:
.PHONY:		all debug release clean

#=============================
# DEFINITIONS
#=============================
uniq = $(strip $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1))))

DEVICE		= EFM32GG990F1024
PROJECTNAME	= qbart

OBJ_DIR		= build
EXE_DIR		= bin
LST_DIR		= lst

#=============================
# TOOLCHAIN
#=============================

RM		:= rm -rf
ALLFILES	:= /*.*
NULLDEVICE	:= /dev/null
SHELLNAMES	:= $(ComSpec)$(COMSPEC)

$(shell mkdir $(OBJ_DIR)>$(NULLDEVICE) 2>&1)
$(shell mkdir $(EXE_DIR)>$(NULLDEVICE) 2>&1)
$(shell mkdir $(LST_DIR)>$(NULLDEVICE) 2>&1)

CC	= arm-none-eabi-gcc
LD	= arm-none-eabi-ld
AR	= arm-none-eabi-ar
OBJCOPY	= arm-none-eabi-objcopy
DUMP	= arm-none-eabi-objdump

#=============================
# FLAGS
#=============================
DEPFLAGS = -MMD -MP -MF $(@:.o=.d)
CFLAGS	+= -D$(DEVICE) -std=c11 -Wall -Wextra -mcpu=cortex-m3 -mthumb -mfix-cortex-m3-ldrd -ffunction-sections -fdata-sections -fomit-frame-pointer $(DEPFLAGS)
ASMFLAGS+= -x assembler-with-cpp -D$(DEVICE) -Wall -Wextra -mcpu=cortex-m3 -mthumb
LDFLAGS	+= -Xlinker -Map=$(LST_DIR)/$(PROJECTNAME).map -mcpu=cortex-m3 -mthumb -Tsrc/startup/efm32gg.ld -Wl,--gc-sections
LIBS	= -Wl,--start-group -lgcc -lc -lnosys -Wl,--end-group

INCLUDEPATHS +=			\
-Iinclude			\
-Idependencies/other/inc

#=============================
# FILES
#=============================
C_SRC	+=				\
dependencies/other/src/system_efm32gg.c	\
dependencies/other/src/dmactrl.c	\
dependencies/other/src/em_system.c	\
dependencies/other/src/em_cmu.c		\
dependencies/other/src/em_dma.c		\
dependencies/other/src/em_emu.c		\
dependencies/other/src/em_gpio.c	\
dependencies/other/src/em_rmu.c		\
dependencies/other/src/em_usart.c	\
dependencies/other/src/em_int.c		\
dependencies/other/src/em_ebi.c		\
dependencies/other/src/bsp_dk_3201.c	\
dependencies/other/src/spi_master.c	\
dependencies/other/src/display.c	\
dependencies/other/src/checksudoku.c	\
src/main.c

s_SRC	+=
S_SRC	+= dependencies/other/src/startup/startup_efm32gg.S

#=============================
# RULES
#=============================

C_FILES	= $(notdir $(C_SRC))
S_FILES	= $(notdir $(S_SRC) $(s_SRC))
C_PATHS	= $(call uniq, $(dir $(C_SRC)))
S_PATHS	= $(call uniq, $(dir $(S_SRC) $(s_SRC)))

C_OBJS	= $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.o))
S_OBJS	= $(if $(S_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.S=.o)))
s_OBJS	= $(if $(s_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.s=.o)))
C_DEPS	= $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.d))
OBJS	= $(C_OBJS) $(S_OBJS) $(s_OBJS)

vpath %.c $(C_PATHS)
vpath %.s $(S_PATHS)
vpath %.S $(S_PATHS)

#============================
# BUILDS
#============================
all: debug

debug: CFLAGS += -DDEBUG -O0 -g
debug: $(EXE_DIR)/out.bin

release: CFLAGS += -DNDEBUG -O0 -g
release: $(EXE_DIR)/out.bin

$(OBJ_DIR)/%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDEPATHS) -c -o $@ $<

$(OBJ_DIR)/%.o: %.s
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

$(OBJ_DIR)/%.o: %.S
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

$(EXE_DIR)/$(PROJECTNAME).out: $(OBJS)
	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $(EXE_DIR)/$(PROJECTNAME).out

$(EXE_DIR)/out.bin: $(EXE_DIR)/$(PROJECTNAME).out
	$(OBJCOPY) -O binary $(EXE_DIR)/$(PROJECTNAME).out $(EXE_DIR)/out.bin

clean:
ifeq ($(filter $(MAKECMDGOALS),all debug release),)
	$(RM) $(OBJ_DIR) $(LST_DIR) $(EXE_DIR)
endif

ifneq (clean,$(findstring clean, $(MAKECMDGOALS)))
	-include $(C_DEPS)
endif
