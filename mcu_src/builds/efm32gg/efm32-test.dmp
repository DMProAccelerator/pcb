
efm32-test:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__Vectors>:
       0:	20020000 	.word	0x20020000
       4:	00002135 	.word	0x00002135
       8:	00002161 	.word	0x00002161
       c:	00002161 	.word	0x00002161
      10:	00002161 	.word	0x00002161
      14:	00002161 	.word	0x00002161
      18:	00002161 	.word	0x00002161
      1c:	00002161 	.word	0x00002161
      20:	00002161 	.word	0x00002161
      24:	00002161 	.word	0x00002161
      28:	00002161 	.word	0x00002161
      2c:	00002161 	.word	0x00002161
      30:	00002161 	.word	0x00002161
      34:	00002161 	.word	0x00002161
      38:	00002161 	.word	0x00002161
      3c:	00002161 	.word	0x00002161
      40:	00002161 	.word	0x00002161
      44:	00002161 	.word	0x00002161
      48:	00002161 	.word	0x00002161
      4c:	00002161 	.word	0x00002161
      50:	00002161 	.word	0x00002161
      54:	00002161 	.word	0x00002161
      58:	00002161 	.word	0x00002161
      5c:	00002161 	.word	0x00002161
      60:	00002161 	.word	0x00002161
      64:	00002161 	.word	0x00002161
      68:	00002161 	.word	0x00002161
      6c:	00002161 	.word	0x00002161
      70:	00002161 	.word	0x00002161
      74:	00002161 	.word	0x00002161
      78:	00002161 	.word	0x00002161
      7c:	00002161 	.word	0x00002161
      80:	00002161 	.word	0x00002161
      84:	00002161 	.word	0x00002161
      88:	00002161 	.word	0x00002161
      8c:	00002161 	.word	0x00002161
      90:	00002161 	.word	0x00002161
      94:	00002161 	.word	0x00002161
      98:	00000db9 	.word	0x00000db9
      9c:	00000e11 	.word	0x00000e11
      a0:	00002161 	.word	0x00002161
      a4:	00002161 	.word	0x00002161
      a8:	00002161 	.word	0x00002161
      ac:	00002161 	.word	0x00002161
      b0:	00002161 	.word	0x00002161
      b4:	00002161 	.word	0x00002161
      b8:	00002161 	.word	0x00002161
      bc:	00002161 	.word	0x00002161
      c0:	00002161 	.word	0x00002161
      c4:	00002161 	.word	0x00002161
      c8:	00002161 	.word	0x00002161
      cc:	00002161 	.word	0x00002161
      d0:	00002161 	.word	0x00002161
      d4:	00002161 	.word	0x00002161
      d8:	00002161 	.word	0x00002161

000000dc <__do_global_dtors_aux>:
      dc:	b510      	push	{r4, lr}
      de:	4c05      	ldr	r4, [pc, #20]	; (f4 <__do_global_dtors_aux+0x18>)
      e0:	7823      	ldrb	r3, [r4, #0]
      e2:	b933      	cbnz	r3, f2 <__do_global_dtors_aux+0x16>
      e4:	4b04      	ldr	r3, [pc, #16]	; (f8 <__do_global_dtors_aux+0x1c>)
      e6:	b113      	cbz	r3, ee <__do_global_dtors_aux+0x12>
      e8:	4804      	ldr	r0, [pc, #16]	; (fc <__do_global_dtors_aux+0x20>)
      ea:	f3af 8000 	nop.w
      ee:	2301      	movs	r3, #1
      f0:	7023      	strb	r3, [r4, #0]
      f2:	bd10      	pop	{r4, pc}
      f4:	20000654 	.word	0x20000654
      f8:	00000000 	.word	0x00000000
      fc:	00005070 	.word	0x00005070

00000100 <frame_dummy>:
     100:	4b08      	ldr	r3, [pc, #32]	; (124 <frame_dummy+0x24>)
     102:	b510      	push	{r4, lr}
     104:	b11b      	cbz	r3, 10e <frame_dummy+0xe>
     106:	4908      	ldr	r1, [pc, #32]	; (128 <frame_dummy+0x28>)
     108:	4808      	ldr	r0, [pc, #32]	; (12c <frame_dummy+0x2c>)
     10a:	f3af 8000 	nop.w
     10e:	4808      	ldr	r0, [pc, #32]	; (130 <frame_dummy+0x30>)
     110:	6803      	ldr	r3, [r0, #0]
     112:	b903      	cbnz	r3, 116 <frame_dummy+0x16>
     114:	bd10      	pop	{r4, pc}
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <frame_dummy+0x34>)
     118:	2b00      	cmp	r3, #0
     11a:	d0fb      	beq.n	114 <frame_dummy+0x14>
     11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     120:	4718      	bx	r3
     122:	bf00      	nop
     124:	00000000 	.word	0x00000000
     128:	20000658 	.word	0x20000658
     12c:	00005070 	.word	0x00005070
     130:	20000650 	.word	0x20000650
     134:	00000000 	.word	0x00000000

00000138 <_mainCRTStartup>:
     138:	4b15      	ldr	r3, [pc, #84]	; (190 <_mainCRTStartup+0x58>)
     13a:	2b00      	cmp	r3, #0
     13c:	bf08      	it	eq
     13e:	4b13      	ldreq	r3, [pc, #76]	; (18c <_mainCRTStartup+0x54>)
     140:	469d      	mov	sp, r3
     142:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     146:	2100      	movs	r1, #0
     148:	468b      	mov	fp, r1
     14a:	460f      	mov	r7, r1
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <_mainCRTStartup+0x64>)
     14e:	4a14      	ldr	r2, [pc, #80]	; (1a0 <_mainCRTStartup+0x68>)
     150:	1a12      	subs	r2, r2, r0
     152:	f004 fadb 	bl	470c <memset>
     156:	4b0f      	ldr	r3, [pc, #60]	; (194 <_mainCRTStartup+0x5c>)
     158:	2b00      	cmp	r3, #0
     15a:	d000      	beq.n	15e <_mainCRTStartup+0x26>
     15c:	4798      	blx	r3
     15e:	4b0e      	ldr	r3, [pc, #56]	; (198 <_mainCRTStartup+0x60>)
     160:	2b00      	cmp	r3, #0
     162:	d000      	beq.n	166 <_mainCRTStartup+0x2e>
     164:	4798      	blx	r3
     166:	2000      	movs	r0, #0
     168:	2100      	movs	r1, #0
     16a:	0004      	movs	r4, r0
     16c:	000d      	movs	r5, r1
     16e:	480d      	ldr	r0, [pc, #52]	; (1a4 <_mainCRTStartup+0x6c>)
     170:	2800      	cmp	r0, #0
     172:	d002      	beq.n	17a <_mainCRTStartup+0x42>
     174:	480c      	ldr	r0, [pc, #48]	; (1a8 <_mainCRTStartup+0x70>)
     176:	f3af 8000 	nop.w
     17a:	f004 fa99 	bl	46b0 <__libc_init_array>
     17e:	0020      	movs	r0, r4
     180:	0029      	movs	r1, r5
     182:	f000 f85d 	bl	240 <main>
     186:	f004 fa7f 	bl	4688 <exit>
     18a:	bf00      	nop
     18c:	00080000 	.word	0x00080000
     190:	20020000 	.word	0x20020000
	...
     19c:	20000654 	.word	0x20000654
     1a0:	200013dc 	.word	0x200013dc
	...

000001ac <SYSTEM_GetProdRev>:
 * @return
 *   Production revision for this part.
 ******************************************************************************/
__STATIC_INLINE uint8_t SYSTEM_GetProdRev(void)
{
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     1ac:	4b03      	ldr	r3, [pc, #12]	; (1bc <SYSTEM_GetProdRev+0x10>)
     1ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     1b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
         >> _DEVINFO_PART_PROD_REV_SHIFT;
     1b4:	0e1b      	lsrs	r3, r3, #24
 * @return
 *   Production revision for this part.
 ******************************************************************************/
__STATIC_INLINE uint8_t SYSTEM_GetProdRev(void)
{
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     1b6:	b2db      	uxtb	r3, r3
         >> _DEVINFO_PART_PROD_REV_SHIFT;
}
     1b8:	4618      	mov	r0, r3
     1ba:	4770      	bx	lr
     1bc:	0fe081b0 	.word	0x0fe081b0

000001c0 <CHIP_Init>:
 * This init function will configure the device to a state where it is
 * as similar as later revisions as possible, to improve software compatibility
 * with newer parts. See the device specific errata for details.
 *****************************************************************************/
__STATIC_INLINE void CHIP_Init(void)
{
     1c0:	b500      	push	{lr}
     1c2:	b083      	sub	sp, #12
  /* Fix for errata CMU_E113. */

  uint8_t                     prodRev;
  SYSTEM_ChipRevision_TypeDef chipRev;

  prodRev = SYSTEM_GetProdRev();
     1c4:	f7ff fff2 	bl	1ac <SYSTEM_GetProdRev>
     1c8:	4603      	mov	r3, r0
     1ca:	f88d 3007 	strb.w	r3, [sp, #7]
  SYSTEM_ChipRevisionGet(&chipRev);
     1ce:	ab01      	add	r3, sp, #4
     1d0:	4618      	mov	r0, r3
     1d2:	f003 fa53 	bl	367c <SYSTEM_ChipRevisionGet>

  if ((prodRev >= 16) && (chipRev.minor >= 3)) {
     1d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     1da:	2b0f      	cmp	r3, #15
     1dc:	d90b      	bls.n	1f6 <CHIP_Init+0x36>
     1de:	f89d 3004 	ldrb.w	r3, [sp, #4]
     1e2:	2b02      	cmp	r3, #2
     1e4:	d907      	bls.n	1f6 <CHIP_Init+0x36>
    /* This fixes an issue with the LFXO on high temperatures. */
    *(volatile uint32_t*)0x400C80C0 =
     1e6:	4a06      	ldr	r2, [pc, #24]	; (200 <CHIP_Init+0x40>)
      (*(volatile uint32_t*)0x400C80C0 & ~(1 << 6) ) | (1 << 4);
     1e8:	4b05      	ldr	r3, [pc, #20]	; (200 <CHIP_Init+0x40>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	f023 0350 	bic.w	r3, r3, #80	; 0x50
     1f0:	f043 0310 	orr.w	r3, r3, #16
  prodRev = SYSTEM_GetProdRev();
  SYSTEM_ChipRevisionGet(&chipRev);

  if ((prodRev >= 16) && (chipRev.minor >= 3)) {
    /* This fixes an issue with the LFXO on high temperatures. */
    *(volatile uint32_t*)0x400C80C0 =
     1f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(_EFR_DEVICE) && (_SILICON_LABS_GECKO_INTERNAL_SDID >= 84)
  MSC->CTRL |= 0x1 << 8;
#endif
}
     1f6:	bf00      	nop
     1f8:	b003      	add	sp, #12
     1fa:	f85d fb04 	ldr.w	pc, [sp], #4
     1fe:	bf00      	nop
     200:	400c80c0 	.word	0x400c80c0

00000204 <reset_blink>:
#include "em_cmu.h"
#include "em_gpio.h"

#include "communicator.h"

void reset_blink() {
     204:	b500      	push	{lr}
     206:	b083      	sub	sp, #12
	volatile long i;
	GPIO_PinModeSet(gpioPortE, 2, gpioModePushPull, 1);
     208:	2301      	movs	r3, #1
     20a:	2204      	movs	r2, #4
     20c:	2102      	movs	r1, #2
     20e:	2004      	movs	r0, #4
     210:	f003 f998 	bl	3544 <GPIO_PinModeSet>
	for(i = 0; i < 1000000; i++);
     214:	2300      	movs	r3, #0
     216:	9301      	str	r3, [sp, #4]
     218:	e002      	b.n	220 <reset_blink+0x1c>
     21a:	9b01      	ldr	r3, [sp, #4]
     21c:	3301      	adds	r3, #1
     21e:	9301      	str	r3, [sp, #4]
     220:	9b01      	ldr	r3, [sp, #4]
     222:	4a06      	ldr	r2, [pc, #24]	; (23c <reset_blink+0x38>)
     224:	4293      	cmp	r3, r2
     226:	ddf8      	ble.n	21a <reset_blink+0x16>
	GPIO_PinModeSet(gpioPortE, 2, gpioModePushPull, 0);
     228:	2300      	movs	r3, #0
     22a:	2204      	movs	r2, #4
     22c:	2102      	movs	r1, #2
     22e:	2004      	movs	r0, #4
     230:	f003 f988 	bl	3544 <GPIO_PinModeSet>
}
     234:	bf00      	nop
     236:	b003      	add	sp, #12
     238:	f85d fb04 	ldr.w	pc, [sp], #4
     23c:	000f423f 	.word	0x000f423f

00000240 <main>:

int main(void) {
     240:	b508      	push	{r3, lr}
	CHIP_Init();
     242:	f7ff ffbd 	bl	1c0 <CHIP_Init>
	CMU_ClockEnable(cmuClock_GPIO, true);
     246:	2101      	movs	r1, #1
     248:	4804      	ldr	r0, [pc, #16]	; (25c <main+0x1c>)
     24a:	f002 fa2d 	bl	26a8 <CMU_ClockEnable>

	reset_blink();
     24e:	f7ff ffd9 	bl	204 <reset_blink>
	setup_project();
     252:	f001 fec7 	bl	1fe4 <setup_project>

	return 0;
     256:	2300      	movs	r3, #0
}
     258:	4618      	mov	r0, r3
     25a:	bd08      	pop	{r3, pc}
     25c:	0004d200 	.word	0x0004d200

00000260 <setup_LCD>:

uint8_t buffer[TOTAL_BUFFER_SIZE];
uint8_t display_mode_buffer	= 0b00000000;
uint8_t clear_mode_buffer	= 0b00000100;

void setup_LCD() {
     260:	b500      	push	{lr}
     262:	b083      	sub	sp, #12
	init_spi();									//Setup SPI
     264:	f000 f9d6 	bl	614 <init_spi>
	reset();
     268:	f000 f84e 	bl	308 <reset>
	buffer[0] = 0b00000011;								//Set data update mode
     26c:	4b15      	ldr	r3, [pc, #84]	; (2c4 <setup_LCD+0x64>)
     26e:	2203      	movs	r2, #3
     270:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HEIGHT; i++) buffer[1 + i*(W_BYTES + 2)] = i + 1;		//Set address lines in buffer
     272:	2300      	movs	r3, #0
     274:	9301      	str	r3, [sp, #4]
     276:	e00e      	b.n	296 <setup_LCD+0x36>
     278:	9a01      	ldr	r2, [sp, #4]
     27a:	4613      	mov	r3, r2
     27c:	00db      	lsls	r3, r3, #3
     27e:	4413      	add	r3, r2
     280:	005b      	lsls	r3, r3, #1
     282:	3301      	adds	r3, #1
     284:	9a01      	ldr	r2, [sp, #4]
     286:	b2d2      	uxtb	r2, r2
     288:	3201      	adds	r2, #1
     28a:	b2d1      	uxtb	r1, r2
     28c:	4a0d      	ldr	r2, [pc, #52]	; (2c4 <setup_LCD+0x64>)
     28e:	54d1      	strb	r1, [r2, r3]
     290:	9b01      	ldr	r3, [sp, #4]
     292:	3301      	adds	r3, #1
     294:	9301      	str	r3, [sp, #4]
     296:	9b01      	ldr	r3, [sp, #4]
     298:	2b7f      	cmp	r3, #127	; 0x7f
     29a:	dded      	ble.n	278 <setup_LCD+0x18>
	for(int i = 0; i < 2; i++) buffer[(W_BYTES * HEIGHT) + HEIGHT*2 + 1 + i] = 0x0;	//Zero dummy bytes
     29c:	2300      	movs	r3, #0
     29e:	9300      	str	r3, [sp, #0]
     2a0:	e008      	b.n	2b4 <setup_LCD+0x54>
     2a2:	9b00      	ldr	r3, [sp, #0]
     2a4:	f603 1301 	addw	r3, r3, #2305	; 0x901
     2a8:	4a06      	ldr	r2, [pc, #24]	; (2c4 <setup_LCD+0x64>)
     2aa:	2100      	movs	r1, #0
     2ac:	54d1      	strb	r1, [r2, r3]
     2ae:	9b00      	ldr	r3, [sp, #0]
     2b0:	3301      	adds	r3, #1
     2b2:	9300      	str	r3, [sp, #0]
     2b4:	9b00      	ldr	r3, [sp, #0]
     2b6:	2b01      	cmp	r3, #1
     2b8:	ddf3      	ble.n	2a2 <setup_LCD+0x42>
}
     2ba:	bf00      	nop
     2bc:	b003      	add	sp, #12
     2be:	f85d fb04 	ldr.w	pc, [sp], #4
     2c2:	bf00      	nop
     2c4:	200007a0 	.word	0x200007a0

000002c8 <update>:

void update() {
     2c8:	b508      	push	{r3, lr}
	send_buffer(buffer, TOTAL_BUFFER_SIZE);
     2ca:	f640 1103 	movw	r1, #2307	; 0x903
     2ce:	4803      	ldr	r0, [pc, #12]	; (2dc <update+0x14>)
     2d0:	f000 f9b4 	bl	63c <send_buffer>
	enter_display_mode();
     2d4:	f000 f804 	bl	2e0 <enter_display_mode>
}
     2d8:	bf00      	nop
     2da:	bd08      	pop	{r3, pc}
     2dc:	200007a0 	.word	0x200007a0

000002e0 <enter_display_mode>:

void enter_display_mode() {
     2e0:	b508      	push	{r3, lr}
	send_buffer(&display_mode_buffer, 1);
     2e2:	2101      	movs	r1, #1
     2e4:	4802      	ldr	r0, [pc, #8]	; (2f0 <enter_display_mode+0x10>)
     2e6:	f000 f9a9 	bl	63c <send_buffer>
}
     2ea:	bf00      	nop
     2ec:	bd08      	pop	{r3, pc}
     2ee:	bf00      	nop
     2f0:	20000670 	.word	0x20000670

000002f4 <clear>:

void clear() {
     2f4:	b508      	push	{r3, lr}
	send_buffer(&clear_mode_buffer, 1);
     2f6:	2101      	movs	r1, #1
     2f8:	4802      	ldr	r0, [pc, #8]	; (304 <clear+0x10>)
     2fa:	f000 f99f 	bl	63c <send_buffer>
}
     2fe:	bf00      	nop
     300:	bd08      	pop	{r3, pc}
     302:	bf00      	nop
     304:	20000000 	.word	0x20000000

00000308 <reset>:

void reset() {
     308:	b500      	push	{lr}
     30a:	b083      	sub	sp, #12
	clear();
     30c:	f7ff fff2 	bl	2f4 <clear>
	uint8_t clear = 0x00;
     310:	2300      	movs	r3, #0
     312:	f88d 3003 	strb.w	r3, [sp, #3]
	for(int i = 0; i < HEIGHT; i++) memset(buffer + 2 + i*(W_BYTES + 2), clear, W_BYTES);
     316:	2300      	movs	r3, #0
     318:	9301      	str	r3, [sp, #4]
     31a:	e010      	b.n	33e <reset+0x36>
     31c:	9a01      	ldr	r2, [sp, #4]
     31e:	4613      	mov	r3, r2
     320:	00db      	lsls	r3, r3, #3
     322:	4413      	add	r3, r2
     324:	005b      	lsls	r3, r3, #1
     326:	3302      	adds	r3, #2
     328:	4a08      	ldr	r2, [pc, #32]	; (34c <reset+0x44>)
     32a:	4413      	add	r3, r2
     32c:	f89d 1003 	ldrb.w	r1, [sp, #3]
     330:	2210      	movs	r2, #16
     332:	4618      	mov	r0, r3
     334:	f004 f9ea 	bl	470c <memset>
     338:	9b01      	ldr	r3, [sp, #4]
     33a:	3301      	adds	r3, #1
     33c:	9301      	str	r3, [sp, #4]
     33e:	9b01      	ldr	r3, [sp, #4]
     340:	2b7f      	cmp	r3, #127	; 0x7f
     342:	ddeb      	ble.n	31c <reset+0x14>
}
     344:	bf00      	nop
     346:	b003      	add	sp, #12
     348:	f85d fb04 	ldr.w	pc, [sp], #4
     34c:	200007a0 	.word	0x200007a0

00000350 <get_buffer>:
	} else {buffer[byte_index] = buffer[byte_index] | pixel_mask;}
}

unsigned int pos_to_buffer_pos(unsigned int pos) {return pos + 2 + (pos / W_BYTES)*2;}

uint8_t *get_buffer() {return buffer;}
     350:	4b01      	ldr	r3, [pc, #4]	; (358 <get_buffer+0x8>)
     352:	4618      	mov	r0, r3
     354:	4770      	bx	lr
     356:	bf00      	nop
     358:	200007a0 	.word	0x200007a0

0000035c <SPI_setup>:
 * @brief Setup a USART as SPI
 * @param spiNumber is the number of the USART to use (e.g. 1 USART1)
 * @param location is the GPIO location to use for the device
 * @param master set if the SPI is to be master
 *****************************************************************************/
void SPI_setup(uint8_t spiNumber, uint8_t location, bool master) {
     35c:	b500      	push	{lr}
     35e:	b085      	sub	sp, #20
     360:	4603      	mov	r3, r0
     362:	f88d 3007 	strb.w	r3, [sp, #7]
     366:	460b      	mov	r3, r1
     368:	f88d 3006 	strb.w	r3, [sp, #6]
     36c:	4613      	mov	r3, r2
     36e:	f88d 3005 	strb.w	r3, [sp, #5]
  USART_TypeDef *spi;

  /* Determining USART */
  switch (spiNumber) {
     372:	f89d 3007 	ldrb.w	r3, [sp, #7]
     376:	2b01      	cmp	r3, #1
     378:	d007      	beq.n	38a <SPI_setup+0x2e>
     37a:	2b02      	cmp	r3, #2
     37c:	d008      	beq.n	390 <SPI_setup+0x34>
     37e:	2b00      	cmp	r3, #0
     380:	d000      	beq.n	384 <SPI_setup+0x28>
    break;
  case 2:
    spi = USART2;
    break;
  default:
    return;
     382:	e13d      	b.n	600 <Stack_Size+0x200>
  USART_TypeDef *spi;

  /* Determining USART */
  switch (spiNumber) {
  case 0:
    spi = USART0;
     384:	4ba0      	ldr	r3, [pc, #640]	; (608 <Stack_Size+0x208>)
     386:	9303      	str	r3, [sp, #12]
    break;
     388:	e005      	b.n	396 <SPI_setup+0x3a>
  case 1:
    spi = USART1;
     38a:	4ba0      	ldr	r3, [pc, #640]	; (60c <Stack_Size+0x20c>)
     38c:	9303      	str	r3, [sp, #12]
    break;
     38e:	e002      	b.n	396 <SPI_setup+0x3a>
  case 2:
    spi = USART2;
     390:	4b9f      	ldr	r3, [pc, #636]	; (610 <Stack_Size+0x210>)
     392:	9303      	str	r3, [sp, #12]
    break;
     394:	bf00      	nop
  default:
    return;
  }

  /* Setting baudrate */
  spi->CLKDIV = 128 * (SPI_PERCLK_FREQUENCY / SPI_BAUDRATE - 2);
     396:	9b03      	ldr	r3, [sp, #12]
     398:	f44f 62c0 	mov.w	r2, #1536	; 0x600
     39c:	615a      	str	r2, [r3, #20]

  /* Configure SPI */
  /* Using synchronous (SPI) mode*/
  spi->CTRL = USART_CTRL_SYNC;
     39e:	9b03      	ldr	r3, [sp, #12]
     3a0:	2201      	movs	r2, #1
     3a2:	601a      	str	r2, [r3, #0]
  /* Clearing old transfers/receptions, and disabling interrupts */
  spi->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
     3a4:	9b03      	ldr	r3, [sp, #12]
     3a6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
     3aa:	60da      	str	r2, [r3, #12]
  spi->IEN = 0;
     3ac:	9b03      	ldr	r3, [sp, #12]
     3ae:	2200      	movs	r2, #0
     3b0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enabling pins and setting location */
  //spi->ROUTE = /*USART_ROUTE_TXPEN /*| USART_ROUTE_RXPEN |*/ USART_ROUTE_CLKPEN /*| USART_ROUTE_CSPEN*/ | (location << 8);
  spi->ROUTE = USART_ROUTE_TXPEN;
     3b2:	9b03      	ldr	r3, [sp, #12]
     3b4:	2202      	movs	r2, #2
     3b6:	655a      	str	r2, [r3, #84]	; 0x54
  spi->ROUTE |= USART_ROUTE_CLKPEN;
     3b8:	9b03      	ldr	r3, [sp, #12]
     3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     3bc:	f043 0208 	orr.w	r2, r3, #8
     3c0:	9b03      	ldr	r3, [sp, #12]
     3c2:	655a      	str	r2, [r3, #84]	; 0x54
  spi->ROUTE |= location << 8;
     3c4:	9b03      	ldr	r3, [sp, #12]
     3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     3c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
     3cc:	0212      	lsls	r2, r2, #8
     3ce:	431a      	orrs	r2, r3
     3d0:	9b03      	ldr	r3, [sp, #12]
     3d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set GPIO config to slave */
  GPIO_Mode_TypeDef gpioModeMosi = gpioModeInput;
     3d4:	2301      	movs	r3, #1
     3d6:	f88d 300b 	strb.w	r3, [sp, #11]
  GPIO_Mode_TypeDef gpioModeMiso = gpioModePushPull;
     3da:	2304      	movs	r3, #4
     3dc:	f88d 300a 	strb.w	r3, [sp, #10]
  GPIO_Mode_TypeDef gpioModeCs   = gpioModeInput;
     3e0:	2301      	movs	r3, #1
     3e2:	f88d 3009 	strb.w	r3, [sp, #9]
  GPIO_Mode_TypeDef gpioModeClk  = gpioModeInput;
     3e6:	2301      	movs	r3, #1
     3e8:	f88d 3008 	strb.w	r3, [sp, #8]

  /* Set to master and to control the CS line */
  if (master) {
     3ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d00f      	beq.n	414 <Stack_Size+0x14>
    /* Enabling Master, TX and RX */
    spi->CMD   = USART_CMD_MASTEREN | USART_CMD_TXEN;// | USART_CMD_RXEN;
     3f4:	9b03      	ldr	r3, [sp, #12]
     3f6:	2214      	movs	r2, #20
     3f8:	60da      	str	r2, [r3, #12]
    //spi->CTRL |= USART_CTRL_AUTOCS;

    /* Set GPIO config to master */
    gpioModeMosi = gpioModePushPull;
     3fa:	2304      	movs	r3, #4
     3fc:	f88d 300b 	strb.w	r3, [sp, #11]
    gpioModeMiso = gpioModeInput;
     400:	2301      	movs	r3, #1
     402:	f88d 300a 	strb.w	r3, [sp, #10]
    gpioModeCs   = gpioModePushPull;
     406:	2304      	movs	r3, #4
     408:	f88d 3009 	strb.w	r3, [sp, #9]
    gpioModeClk  = gpioModePushPull;
     40c:	2304      	movs	r3, #4
     40e:	f88d 3008 	strb.w	r3, [sp, #8]
     412:	e002      	b.n	41a <Stack_Size+0x1a>
  }
  else
  {
    /* Enabling TX and RX */
    spi->CMD = USART_CMD_TXEN | USART_CMD_RXEN;
     414:	9b03      	ldr	r3, [sp, #12]
     416:	2205      	movs	r2, #5
     418:	60da      	str	r2, [r3, #12]
  }

  /* Clear previous interrupts */
  spi->IFC = _USART_IFC_MASK;
     41a:	9b03      	ldr	r3, [sp, #12]
     41c:	f641 72f9 	movw	r2, #8185	; 0x1ff9
     420:	649a      	str	r2, [r3, #72]	; 0x48

  /* IO configuration */
  switch(spiNumber) {
     422:	f89d 3007 	ldrb.w	r3, [sp, #7]
     426:	2b01      	cmp	r3, #1
     428:	d066      	beq.n	4f8 <Stack_Size+0xf8>
     42a:	2b02      	cmp	r3, #2
     42c:	f000 80a6 	beq.w	57c <Stack_Size+0x17c>
     430:	2b00      	cmp	r3, #0
     432:	d000      	beq.n	436 <Stack_Size+0x36>
                      GPIO_PinModeSet(gpioPortB, 5, gpioModeClk,  0);  /* Clock */
                      break;
            default: break;
            }
            break;
    default: break;
     434:	e0e4      	b.n	600 <Stack_Size+0x200>
  /* Clear previous interrupts */
  spi->IFC = _USART_IFC_MASK;

  /* IO configuration */
  switch(spiNumber) {
    case 0: switch(location) {
     436:	f89d 3006 	ldrb.w	r3, [sp, #6]
     43a:	2b01      	cmp	r3, #1
     43c:	d021      	beq.n	482 <Stack_Size+0x82>
     43e:	2b02      	cmp	r3, #2
     440:	d03c      	beq.n	4bc <Stack_Size+0xbc>
     442:	2b00      	cmp	r3, #0
     444:	d000      	beq.n	448 <Stack_Size+0x48>
                      GPIO_PinModeSet(gpioPortC, 11, gpioModeMosi, 0); /* MOSI */
                      GPIO_PinModeSet(gpioPortC, 10, gpioModeMiso, 0); /* MISO */
                      GPIO_PinModeSet(gpioPortC,  8, gpioModeCs,   0); /* CS */
                      GPIO_PinModeSet(gpioPortC,  9, gpioModeClk,  0); /* Clock */
                      break;
            default: break;
     446:	e056      	b.n	4f6 <Stack_Size+0xf6>

  /* IO configuration */
  switch(spiNumber) {
    case 0: switch(location) {
              case 0: /* IO configuration (USART 0, Location #0) */
                      GPIO_PinModeSet(gpioPortE, 10, gpioModeMosi, 0); /* MOSI */
     448:	f89d 200b 	ldrb.w	r2, [sp, #11]
     44c:	2300      	movs	r3, #0
     44e:	210a      	movs	r1, #10
     450:	2004      	movs	r0, #4
     452:	f003 f877 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortE, 11, gpioModeMiso, 0); /* MISO */
     456:	f89d 200a 	ldrb.w	r2, [sp, #10]
     45a:	2300      	movs	r3, #0
     45c:	210b      	movs	r1, #11
     45e:	2004      	movs	r0, #4
     460:	f003 f870 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortE, 13, gpioModeCs,   0); /* CS */
     464:	f89d 2009 	ldrb.w	r2, [sp, #9]
     468:	2300      	movs	r3, #0
     46a:	210d      	movs	r1, #13
     46c:	2004      	movs	r0, #4
     46e:	f003 f869 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortE, 12, gpioModeClk,  0); /* Clock */
     472:	f89d 2008 	ldrb.w	r2, [sp, #8]
     476:	2300      	movs	r3, #0
     478:	210c      	movs	r1, #12
     47a:	2004      	movs	r0, #4
     47c:	f003 f862 	bl	3544 <GPIO_PinModeSet>
                      break;
     480:	e039      	b.n	4f6 <Stack_Size+0xf6>
              case 1: /* IO configuration (USART 0, Location #1) */
                      GPIO_PinModeSet(gpioPortE, 7, gpioModeMosi, 0);  /* MOSI */
     482:	f89d 200b 	ldrb.w	r2, [sp, #11]
     486:	2300      	movs	r3, #0
     488:	2107      	movs	r1, #7
     48a:	2004      	movs	r0, #4
     48c:	f003 f85a 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortE, 6, gpioModeMiso, 0);  /* MISO */
     490:	f89d 200a 	ldrb.w	r2, [sp, #10]
     494:	2300      	movs	r3, #0
     496:	2106      	movs	r1, #6
     498:	2004      	movs	r0, #4
     49a:	f003 f853 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortE, 4, gpioModeCs,   0);  /* CS */
     49e:	f89d 2009 	ldrb.w	r2, [sp, #9]
     4a2:	2300      	movs	r3, #0
     4a4:	2104      	movs	r1, #4
     4a6:	2004      	movs	r0, #4
     4a8:	f003 f84c 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortE, 5, gpioModeClk,  0);  /* Clock */
     4ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
     4b0:	2300      	movs	r3, #0
     4b2:	2105      	movs	r1, #5
     4b4:	2004      	movs	r0, #4
     4b6:	f003 f845 	bl	3544 <GPIO_PinModeSet>
                      break;
     4ba:	e01c      	b.n	4f6 <Stack_Size+0xf6>
              case 2: /* IO configuration (USART 0, Location #2) */
                      GPIO_PinModeSet(gpioPortC, 11, gpioModeMosi, 0); /* MOSI */
     4bc:	f89d 200b 	ldrb.w	r2, [sp, #11]
     4c0:	2300      	movs	r3, #0
     4c2:	210b      	movs	r1, #11
     4c4:	2002      	movs	r0, #2
     4c6:	f003 f83d 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC, 10, gpioModeMiso, 0); /* MISO */
     4ca:	f89d 200a 	ldrb.w	r2, [sp, #10]
     4ce:	2300      	movs	r3, #0
     4d0:	210a      	movs	r1, #10
     4d2:	2002      	movs	r0, #2
     4d4:	f003 f836 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC,  8, gpioModeCs,   0); /* CS */
     4d8:	f89d 2009 	ldrb.w	r2, [sp, #9]
     4dc:	2300      	movs	r3, #0
     4de:	2108      	movs	r1, #8
     4e0:	2002      	movs	r0, #2
     4e2:	f003 f82f 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC,  9, gpioModeClk,  0); /* Clock */
     4e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
     4ea:	2300      	movs	r3, #0
     4ec:	2109      	movs	r1, #9
     4ee:	2002      	movs	r0, #2
     4f0:	f003 f828 	bl	3544 <GPIO_PinModeSet>
                      break;
     4f4:	bf00      	nop
            default: break;
            }
            break;
     4f6:	e083      	b.n	600 <Stack_Size+0x200>
    case 1: switch(location) {
     4f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d002      	beq.n	506 <Stack_Size+0x106>
     500:	2b01      	cmp	r3, #1
     502:	d01d      	beq.n	540 <Stack_Size+0x140>
                      GPIO_PinModeSet(gpioPortD, 0, gpioModeMosi, 0);  /* MOSI */
                      GPIO_PinModeSet(gpioPortD, 1, gpioModeMiso, 0);  /* MISO */
                      GPIO_PinModeSet(gpioPortD, 3, gpioModeCs,   0);  /* CS */
                      GPIO_PinModeSet(gpioPortD, 2, gpioModeClk,  0);  /* Clock */
                      break;
            default: break;
     504:	e039      	b.n	57a <Stack_Size+0x17a>
            default: break;
            }
            break;
    case 1: switch(location) {
              case 0: /* IO configuration (USART 1, Location #0) */
                      GPIO_PinModeSet(gpioPortC, 0, gpioModeMosi, 0);  /* MOSI */
     506:	f89d 200b 	ldrb.w	r2, [sp, #11]
     50a:	2300      	movs	r3, #0
     50c:	2100      	movs	r1, #0
     50e:	2002      	movs	r0, #2
     510:	f003 f818 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC, 1, gpioModeMiso, 0);  /* MISO */
     514:	f89d 200a 	ldrb.w	r2, [sp, #10]
     518:	2300      	movs	r3, #0
     51a:	2101      	movs	r1, #1
     51c:	2002      	movs	r0, #2
     51e:	f003 f811 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortB, 8, gpioModeCs,   0);  /* CS */
     522:	f89d 2009 	ldrb.w	r2, [sp, #9]
     526:	2300      	movs	r3, #0
     528:	2108      	movs	r1, #8
     52a:	2001      	movs	r0, #1
     52c:	f003 f80a 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortB, 7, gpioModeClk,  0);  /* Clock */
     530:	f89d 2008 	ldrb.w	r2, [sp, #8]
     534:	2300      	movs	r3, #0
     536:	2107      	movs	r1, #7
     538:	2001      	movs	r0, #1
     53a:	f003 f803 	bl	3544 <GPIO_PinModeSet>
                      break;
     53e:	e01c      	b.n	57a <Stack_Size+0x17a>
              case 1: /* IO configuration (USART 1, Location #1) */
                      GPIO_PinModeSet(gpioPortD, 0, gpioModeMosi, 0);  /* MOSI */
     540:	f89d 200b 	ldrb.w	r2, [sp, #11]
     544:	2300      	movs	r3, #0
     546:	2100      	movs	r1, #0
     548:	2003      	movs	r0, #3
     54a:	f002 fffb 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortD, 1, gpioModeMiso, 0);  /* MISO */
     54e:	f89d 200a 	ldrb.w	r2, [sp, #10]
     552:	2300      	movs	r3, #0
     554:	2101      	movs	r1, #1
     556:	2003      	movs	r0, #3
     558:	f002 fff4 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortD, 3, gpioModeCs,   0);  /* CS */
     55c:	f89d 2009 	ldrb.w	r2, [sp, #9]
     560:	2300      	movs	r3, #0
     562:	2103      	movs	r1, #3
     564:	2003      	movs	r0, #3
     566:	f002 ffed 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortD, 2, gpioModeClk,  0);  /* Clock */
     56a:	f89d 2008 	ldrb.w	r2, [sp, #8]
     56e:	2300      	movs	r3, #0
     570:	2102      	movs	r1, #2
     572:	2003      	movs	r0, #3
     574:	f002 ffe6 	bl	3544 <GPIO_PinModeSet>
                      break;
     578:	bf00      	nop
            default: break;
            }
            break;
     57a:	e041      	b.n	600 <Stack_Size+0x200>
    case 2: switch(location) {
     57c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     580:	2b00      	cmp	r3, #0
     582:	d002      	beq.n	58a <Stack_Size+0x18a>
     584:	2b01      	cmp	r3, #1
     586:	d01d      	beq.n	5c4 <Stack_Size+0x1c4>
                      GPIO_PinModeSet(gpioPortB, 3, gpioModeMosi, 0);  /* MOSI */
                      GPIO_PinModeSet(gpioPortB, 4, gpioModeMiso, 0);  /* MISO */
                      GPIO_PinModeSet(gpioPortB, 6, gpioModeCs,   0);  /* CS */
                      GPIO_PinModeSet(gpioPortB, 5, gpioModeClk,  0);  /* Clock */
                      break;
            default: break;
     588:	e039      	b.n	5fe <Stack_Size+0x1fe>
            default: break;
            }
            break;
    case 2: switch(location) {
              case 0: /* IO configuration (USART 2, Location #0) */
                      GPIO_PinModeSet(gpioPortC, 2, gpioModeMosi, 0);  /* MOSI */
     58a:	f89d 200b 	ldrb.w	r2, [sp, #11]
     58e:	2300      	movs	r3, #0
     590:	2102      	movs	r1, #2
     592:	2002      	movs	r0, #2
     594:	f002 ffd6 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC, 3, gpioModeMiso, 0);  /* MISO */
     598:	f89d 200a 	ldrb.w	r2, [sp, #10]
     59c:	2300      	movs	r3, #0
     59e:	2103      	movs	r1, #3
     5a0:	2002      	movs	r0, #2
     5a2:	f002 ffcf 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC, 5, gpioModeCs,   0);  /* CS */
     5a6:	f89d 2009 	ldrb.w	r2, [sp, #9]
     5aa:	2300      	movs	r3, #0
     5ac:	2105      	movs	r1, #5
     5ae:	2002      	movs	r0, #2
     5b0:	f002 ffc8 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortC, 4, gpioModeClk,  0);  /* Clock */
     5b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
     5b8:	2300      	movs	r3, #0
     5ba:	2104      	movs	r1, #4
     5bc:	2002      	movs	r0, #2
     5be:	f002 ffc1 	bl	3544 <GPIO_PinModeSet>
                      break;
     5c2:	e01c      	b.n	5fe <Stack_Size+0x1fe>
              case 1: /* IO configuration (USART 2, Location #1) */
                      GPIO_PinModeSet(gpioPortB, 3, gpioModeMosi, 0);  /* MOSI */
     5c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
     5c8:	2300      	movs	r3, #0
     5ca:	2103      	movs	r1, #3
     5cc:	2001      	movs	r0, #1
     5ce:	f002 ffb9 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortB, 4, gpioModeMiso, 0);  /* MISO */
     5d2:	f89d 200a 	ldrb.w	r2, [sp, #10]
     5d6:	2300      	movs	r3, #0
     5d8:	2104      	movs	r1, #4
     5da:	2001      	movs	r0, #1
     5dc:	f002 ffb2 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortB, 6, gpioModeCs,   0);  /* CS */
     5e0:	f89d 2009 	ldrb.w	r2, [sp, #9]
     5e4:	2300      	movs	r3, #0
     5e6:	2106      	movs	r1, #6
     5e8:	2001      	movs	r0, #1
     5ea:	f002 ffab 	bl	3544 <GPIO_PinModeSet>
                      GPIO_PinModeSet(gpioPortB, 5, gpioModeClk,  0);  /* Clock */
     5ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
     5f2:	2300      	movs	r3, #0
     5f4:	2105      	movs	r1, #5
     5f6:	2001      	movs	r0, #1
     5f8:	f002 ffa4 	bl	3544 <GPIO_PinModeSet>
                      break;
     5fc:	bf00      	nop
            default: break;
            }
            break;
     5fe:	bf00      	nop
    default: break;
  }
}
     600:	b005      	add	sp, #20
     602:	f85d fb04 	ldr.w	pc, [sp], #4
     606:	bf00      	nop
     608:	4000c000 	.word	0x4000c000
     60c:	4000c400 	.word	0x4000c400
     610:	4000c800 	.word	0x4000c800

00000614 <init_spi>:
#include "em_cmu.h"
#include "em_gpio.h"
#include "spi.h"
#include "usart.h"

void init_spi() {
     614:	b508      	push	{r3, lr}
	CMU_ClockEnable(cmuClock_USART1, true);
     616:	2101      	movs	r1, #1
     618:	4806      	ldr	r0, [pc, #24]	; (634 <init_spi+0x20>)
     61a:	f002 f845 	bl	26a8 <CMU_ClockEnable>
	CMU_ClockEnable(cmuClock_GPIO, true);
     61e:	2101      	movs	r1, #1
     620:	4805      	ldr	r0, [pc, #20]	; (638 <init_spi+0x24>)
     622:	f002 f841 	bl	26a8 <CMU_ClockEnable>

	SPI_setup(USART1_NUM, GPIO_POS1, true);
     626:	2201      	movs	r2, #1
     628:	2101      	movs	r1, #1
     62a:	2001      	movs	r0, #1
     62c:	f7ff fe96 	bl	35c <SPI_setup>
}
     630:	bf00      	nop
     632:	bd08      	pop	{r3, pc}
     634:	00041200 	.word	0x00041200
     638:	0004d200 	.word	0x0004d200

0000063c <send_buffer>:

void send_buffer(char *buffer, unsigned long size) {
     63c:	b500      	push	{lr}
     63e:	b083      	sub	sp, #12
     640:	9001      	str	r0, [sp, #4]
     642:	9100      	str	r1, [sp, #0]
	USART1_sendBuffer(buffer, size);
     644:	9b00      	ldr	r3, [sp, #0]
     646:	4619      	mov	r1, r3
     648:	9801      	ldr	r0, [sp, #4]
     64a:	f000 f805 	bl	658 <USART1_sendBuffer>
}
     64e:	bf00      	nop
     650:	b003      	add	sp, #12
     652:	f85d fb04 	ldr.w	pc, [sp], #4
     656:	bf00      	nop

00000658 <USART1_sendBuffer>:

  /*Waiting for transmission of last byte */
  while (!(uart->STATUS & USART_STATUS_TXC)) ;
}

void USART1_sendBuffer(char* txBuffer, int bytesToSend) {
     658:	b500      	push	{lr}
     65a:	b085      	sub	sp, #20
     65c:	9001      	str	r0, [sp, #4]
     65e:	9100      	str	r1, [sp, #0]
	USART_TypeDef *uart = USART1;
     660:	4b1c      	ldr	r3, [pc, #112]	; (6d4 <USART1_sendBuffer+0x7c>)
     662:	9302      	str	r3, [sp, #8]
	int           i;

	/* Sending the data */
	GPIO_PinModeSet(gpioPortD, 3, gpioModePushPull, 1);
     664:	2301      	movs	r3, #1
     666:	2204      	movs	r2, #4
     668:	2103      	movs	r1, #3
     66a:	2003      	movs	r0, #3
     66c:	f002 ff6a 	bl	3544 <GPIO_PinModeSet>
	for (i = 0; i < bytesToSend;  i++) {
     670:	2300      	movs	r3, #0
     672:	9303      	str	r3, [sp, #12]
     674:	e018      	b.n	6a8 <USART1_sendBuffer+0x50>
		/* Waiting for the usart to be ready */
		while (!(uart->STATUS & USART_STATUS_TXBL));
     676:	bf00      	nop
     678:	9b02      	ldr	r3, [sp, #8]
     67a:	691b      	ldr	r3, [r3, #16]
     67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     680:	2b00      	cmp	r3, #0
     682:	d0f9      	beq.n	678 <USART1_sendBuffer+0x20>

		if (txBuffer != 0) {
     684:	9b01      	ldr	r3, [sp, #4]
     686:	2b00      	cmp	r3, #0
     688:	d008      	beq.n	69c <USART1_sendBuffer+0x44>
			/* Writing next byte to USART */
			uart->TXDATA = *txBuffer;
     68a:	9b01      	ldr	r3, [sp, #4]
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	461a      	mov	r2, r3
     690:	9b02      	ldr	r3, [sp, #8]
     692:	635a      	str	r2, [r3, #52]	; 0x34
			//GPIO_PinModeSet(gpioPortE, 2, gpioModePushPull, 1);
			txBuffer++;
     694:	9b01      	ldr	r3, [sp, #4]
     696:	3301      	adds	r3, #1
     698:	9301      	str	r3, [sp, #4]
     69a:	e002      	b.n	6a2 <USART1_sendBuffer+0x4a>
		} else {
			uart->TXDATA = 0;
     69c:	9b02      	ldr	r3, [sp, #8]
     69e:	2200      	movs	r2, #0
     6a0:	635a      	str	r2, [r3, #52]	; 0x34
	USART_TypeDef *uart = USART1;
	int           i;

	/* Sending the data */
	GPIO_PinModeSet(gpioPortD, 3, gpioModePushPull, 1);
	for (i = 0; i < bytesToSend;  i++) {
     6a2:	9b03      	ldr	r3, [sp, #12]
     6a4:	3301      	adds	r3, #1
     6a6:	9303      	str	r3, [sp, #12]
     6a8:	9a03      	ldr	r2, [sp, #12]
     6aa:	9b00      	ldr	r3, [sp, #0]
     6ac:	429a      	cmp	r2, r3
     6ae:	dbe2      	blt.n	676 <USART1_sendBuffer+0x1e>
			txBuffer++;
		} else {
			uart->TXDATA = 0;
		}
	}
	GPIO_PinModeSet(gpioPortD, 3, gpioModePushPull, 0);
     6b0:	2300      	movs	r3, #0
     6b2:	2204      	movs	r2, #4
     6b4:	2103      	movs	r1, #3
     6b6:	2003      	movs	r0, #3
     6b8:	f002 ff44 	bl	3544 <GPIO_PinModeSet>

	/*Waiting for transmission of last byte */
	while (!(uart->STATUS & USART_STATUS_TXC));
     6bc:	bf00      	nop
     6be:	9b02      	ldr	r3, [sp, #8]
     6c0:	691b      	ldr	r3, [r3, #16]
     6c2:	f003 0320 	and.w	r3, r3, #32
     6c6:	2b00      	cmp	r3, #0
     6c8:	d0f9      	beq.n	6be <USART1_sendBuffer+0x66>
}
     6ca:	bf00      	nop
     6cc:	b005      	add	sp, #20
     6ce:	f85d fb04 	ldr.w	pc, [sp], #4
     6d2:	bf00      	nop
     6d4:	4000c400 	.word	0x4000c400

000006d8 <validate_character>:

#define MIN(x, y)	(x <= y ? x : y)

#define EXTRA_CHARS ":.%\0"

bool validate_character(char c) {
     6d8:	b082      	sub	sp, #8
     6da:	4603      	mov	r3, r0
     6dc:	f88d 3007 	strb.w	r3, [sp, #7]
	return ((c - 'a' >= 0 && c - 'z' <= 0)
     6e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     6e4:	3b61      	subs	r3, #97	; 0x61
		|| (c - 'A' >= 0 && c - 'Z' <= 0)
		|| (c - '0' >= 0 && c - '9' <= 0)
		|| (c == ':' || c == '.' || c == '%') ? true : false);
     6e6:	2b00      	cmp	r3, #0
     6e8:	db04      	blt.n	6f4 <validate_character+0x1c>
#define MIN(x, y)	(x <= y ? x : y)

#define EXTRA_CHARS ":.%\0"

bool validate_character(char c) {
	return ((c - 'a' >= 0 && c - 'z' <= 0)
     6ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     6ee:	3b7a      	subs	r3, #122	; 0x7a
     6f0:	2b00      	cmp	r3, #0
     6f2:	dd1f      	ble.n	734 <validate_character+0x5c>
		|| (c - 'A' >= 0 && c - 'Z' <= 0)
     6f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     6f8:	3b41      	subs	r3, #65	; 0x41
     6fa:	2b00      	cmp	r3, #0
     6fc:	db04      	blt.n	708 <validate_character+0x30>
     6fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     702:	3b5a      	subs	r3, #90	; 0x5a
     704:	2b00      	cmp	r3, #0
     706:	dd15      	ble.n	734 <validate_character+0x5c>
		|| (c - '0' >= 0 && c - '9' <= 0)
     708:	f89d 3007 	ldrb.w	r3, [sp, #7]
     70c:	3b30      	subs	r3, #48	; 0x30
     70e:	2b00      	cmp	r3, #0
     710:	db04      	blt.n	71c <validate_character+0x44>
     712:	f89d 3007 	ldrb.w	r3, [sp, #7]
     716:	3b39      	subs	r3, #57	; 0x39
     718:	2b00      	cmp	r3, #0
     71a:	dd0b      	ble.n	734 <validate_character+0x5c>
		|| (c == ':' || c == '.' || c == '%') ? true : false);
     71c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     720:	2b3a      	cmp	r3, #58	; 0x3a
     722:	d007      	beq.n	734 <validate_character+0x5c>
     724:	f89d 3007 	ldrb.w	r3, [sp, #7]
     728:	2b2e      	cmp	r3, #46	; 0x2e
     72a:	d003      	beq.n	734 <validate_character+0x5c>
     72c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     730:	2b25      	cmp	r3, #37	; 0x25
     732:	d101      	bne.n	738 <validate_character+0x60>
     734:	2301      	movs	r3, #1
     736:	e000      	b.n	73a <validate_character+0x62>
     738:	2300      	movs	r3, #0
#define MIN(x, y)	(x <= y ? x : y)

#define EXTRA_CHARS ":.%\0"

bool validate_character(char c) {
	return ((c - 'a' >= 0 && c - 'z' <= 0)
     73a:	f003 0301 	and.w	r3, r3, #1
     73e:	b2db      	uxtb	r3, r3
		|| (c - 'A' >= 0 && c - 'Z' <= 0)
		|| (c - '0' >= 0 && c - '9' <= 0)
		|| (c == ':' || c == '.' || c == '%') ? true : false);
}
     740:	4618      	mov	r0, r3
     742:	b002      	add	sp, #8
     744:	4770      	bx	lr
     746:	bf00      	nop

00000748 <writef>:
	0b00111111,
	0b01111111,
	0b11111111
};

void writef(char *s, uint8_t *buffer, unsigned int x, unsigned int y, int flip, ...) {
     748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     74c:	b08b      	sub	sp, #44	; 0x2c
     74e:	af02      	add	r7, sp, #8
     750:	60f8      	str	r0, [r7, #12]
     752:	60b9      	str	r1, [r7, #8]
     754:	607a      	str	r2, [r7, #4]
     756:	603b      	str	r3, [r7, #0]
     758:	466b      	mov	r3, sp
     75a:	461e      	mov	r6, r3
	int writef_buffer_size = 32;
     75c:	2320      	movs	r3, #32
     75e:	61fb      	str	r3, [r7, #28]
	char buf[writef_buffer_size];
     760:	69f9      	ldr	r1, [r7, #28]
     762:	1e4b      	subs	r3, r1, #1
     764:	61bb      	str	r3, [r7, #24]
     766:	460b      	mov	r3, r1
     768:	461a      	mov	r2, r3
     76a:	f04f 0300 	mov.w	r3, #0
     76e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
     772:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
     776:	ea4f 08c2 	mov.w	r8, r2, lsl #3
     77a:	460b      	mov	r3, r1
     77c:	461a      	mov	r2, r3
     77e:	f04f 0300 	mov.w	r3, #0
     782:	00dd      	lsls	r5, r3, #3
     784:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
     788:	00d4      	lsls	r4, r2, #3
     78a:	460b      	mov	r3, r1
     78c:	3307      	adds	r3, #7
     78e:	08db      	lsrs	r3, r3, #3
     790:	00db      	lsls	r3, r3, #3
     792:	ebad 0d03 	sub.w	sp, sp, r3
     796:	ab02      	add	r3, sp, #8
     798:	3300      	adds	r3, #0
     79a:	617b      	str	r3, [r7, #20]
	va_list vl;
	va_start(vl, s);
     79c:	f107 0344 	add.w	r3, r7, #68	; 0x44
     7a0:	613b      	str	r3, [r7, #16]

	vsnprintf(buf, sizeof(buf), s, vl);
     7a2:	6978      	ldr	r0, [r7, #20]
     7a4:	693b      	ldr	r3, [r7, #16]
     7a6:	68fa      	ldr	r2, [r7, #12]
     7a8:	f004 f89e 	bl	48e8 <vsniprintf>
	va_end(vl);
	write_string(buf, writef_buffer_size, buffer, x, y, flip);
     7ac:	6978      	ldr	r0, [r7, #20]
     7ae:	69f9      	ldr	r1, [r7, #28]
     7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     7b2:	9301      	str	r3, [sp, #4]
     7b4:	683b      	ldr	r3, [r7, #0]
     7b6:	9300      	str	r3, [sp, #0]
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	68ba      	ldr	r2, [r7, #8]
     7bc:	f000 f806 	bl	7cc <write_string>
     7c0:	46b5      	mov	sp, r6
}
     7c2:	bf00      	nop
     7c4:	3724      	adds	r7, #36	; 0x24
     7c6:	46bd      	mov	sp, r7
     7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000007cc <write_string>:

void write_string(char *s, unsigned long len, uint8_t *buffer, unsigned int x, unsigned int y, int flip) {
     7cc:	b500      	push	{lr}
     7ce:	b089      	sub	sp, #36	; 0x24
     7d0:	9005      	str	r0, [sp, #20]
     7d2:	9104      	str	r1, [sp, #16]
     7d4:	9203      	str	r2, [sp, #12]
     7d6:	9302      	str	r3, [sp, #8]
	if(y >= SCREEN_HEIGHT) return;
     7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     7da:	2b7f      	cmp	r3, #127	; 0x7f
     7dc:	d827      	bhi.n	82e <write_string+0x62>
	for(int i = 0; i < len; i++) {
     7de:	2300      	movs	r3, #0
     7e0:	9307      	str	r3, [sp, #28]
     7e2:	e01f      	b.n	824 <write_string+0x58>
		if(x >= SCREEN_WIDTH || s[i] == '\0') return;
     7e4:	9b02      	ldr	r3, [sp, #8]
     7e6:	2b7f      	cmp	r3, #127	; 0x7f
     7e8:	d823      	bhi.n	832 <write_string+0x66>
     7ea:	9b07      	ldr	r3, [sp, #28]
     7ec:	9a05      	ldr	r2, [sp, #20]
     7ee:	4413      	add	r3, r2
     7f0:	781b      	ldrb	r3, [r3, #0]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d01d      	beq.n	832 <write_string+0x66>
		if(s[i] != ' ') enter_char(s[i], buffer, x, y, flip);
     7f6:	9b07      	ldr	r3, [sp, #28]
     7f8:	9a05      	ldr	r2, [sp, #20]
     7fa:	4413      	add	r3, r2
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	2b20      	cmp	r3, #32
     800:	d00a      	beq.n	818 <write_string+0x4c>
     802:	9b07      	ldr	r3, [sp, #28]
     804:	9a05      	ldr	r2, [sp, #20]
     806:	4413      	add	r3, r2
     808:	7818      	ldrb	r0, [r3, #0]
     80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     80c:	9300      	str	r3, [sp, #0]
     80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     810:	9a02      	ldr	r2, [sp, #8]
     812:	9903      	ldr	r1, [sp, #12]
     814:	f000 f812 	bl	83c <enter_char>
		x += FONT_WIDTH;
     818:	9b02      	ldr	r3, [sp, #8]
     81a:	3308      	adds	r3, #8
     81c:	9302      	str	r3, [sp, #8]
	write_string(buf, writef_buffer_size, buffer, x, y, flip);
}

void write_string(char *s, unsigned long len, uint8_t *buffer, unsigned int x, unsigned int y, int flip) {
	if(y >= SCREEN_HEIGHT) return;
	for(int i = 0; i < len; i++) {
     81e:	9b07      	ldr	r3, [sp, #28]
     820:	3301      	adds	r3, #1
     822:	9307      	str	r3, [sp, #28]
     824:	9a07      	ldr	r2, [sp, #28]
     826:	9b04      	ldr	r3, [sp, #16]
     828:	429a      	cmp	r2, r3
     82a:	d3db      	bcc.n	7e4 <write_string+0x18>
     82c:	e002      	b.n	834 <write_string+0x68>
	va_end(vl);
	write_string(buf, writef_buffer_size, buffer, x, y, flip);
}

void write_string(char *s, unsigned long len, uint8_t *buffer, unsigned int x, unsigned int y, int flip) {
	if(y >= SCREEN_HEIGHT) return;
     82e:	bf00      	nop
     830:	e000      	b.n	834 <write_string+0x68>
	for(int i = 0; i < len; i++) {
		if(x >= SCREEN_WIDTH || s[i] == '\0') return;
     832:	bf00      	nop
		if(s[i] != ' ') enter_char(s[i], buffer, x, y, flip);
		x += FONT_WIDTH;
	}
}
     834:	b009      	add	sp, #36	; 0x24
     836:	f85d fb04 	ldr.w	pc, [sp], #4
     83a:	bf00      	nop

0000083c <enter_char>:

void enter_char(char c, uint8_t *buffer, unsigned int x, unsigned int y, int flip) {
     83c:	b500      	push	{lr}
     83e:	b08b      	sub	sp, #44	; 0x2c
     840:	9102      	str	r1, [sp, #8]
     842:	9201      	str	r2, [sp, #4]
     844:	9300      	str	r3, [sp, #0]
     846:	4603      	mov	r3, r0
     848:	f88d 300f 	strb.w	r3, [sp, #15]
	if(!validate_character(c)) return;
     84c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     850:	4618      	mov	r0, r3
     852:	f7ff ff41 	bl	6d8 <validate_character>
     856:	4603      	mov	r3, r0
     858:	f083 0301 	eor.w	r3, r3, #1
     85c:	b2db      	uxtb	r3, r3
     85e:	2b00      	cmp	r3, #0
     860:	d17f      	bne.n	962 <enter_char+0x126>
	unsigned char offset;
	unsigned char *c_map = get_char(c, &offset);
     862:	f10d 0212 	add.w	r2, sp, #18
     866:	f89d 300f 	ldrb.w	r3, [sp, #15]
     86a:	4611      	mov	r1, r2
     86c:	4618      	mov	r0, r3
     86e:	f000 f87d 	bl	96c <get_char>
     872:	9007      	str	r0, [sp, #28]
	int x_block = x/8;
     874:	9b01      	ldr	r3, [sp, #4]
     876:	08db      	lsrs	r3, r3, #3
     878:	9306      	str	r3, [sp, #24]
	int first_block = 2 + x_block + y*LINE_WIDTH;
     87a:	9a00      	ldr	r2, [sp, #0]
     87c:	4613      	mov	r3, r2
     87e:	00db      	lsls	r3, r3, #3
     880:	4413      	add	r3, r2
     882:	005b      	lsls	r3, r3, #1
     884:	461a      	mov	r2, r3
     886:	9b06      	ldr	r3, [sp, #24]
     888:	4413      	add	r3, r2
     88a:	3302      	adds	r3, #2
     88c:	9305      	str	r3, [sp, #20]

	for(int i = 0; i < MIN(FONT_HEIGHT, 128 - y); i++) {
     88e:	2300      	movs	r3, #0
     890:	9309      	str	r3, [sp, #36]	; 0x24
     892:	e05b      	b.n	94c <enter_char+0x110>
		if(flip) {
     894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     896:	2b00      	cmp	r3, #0
     898:	d045      	beq.n	926 <enter_char+0xea>
			buffer[first_block + i*LINE_WIDTH] = 0;
     89a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     89c:	4613      	mov	r3, r2
     89e:	00db      	lsls	r3, r3, #3
     8a0:	4413      	add	r3, r2
     8a2:	005b      	lsls	r3, r3, #1
     8a4:	461a      	mov	r2, r3
     8a6:	9b05      	ldr	r3, [sp, #20]
     8a8:	4413      	add	r3, r2
     8aa:	461a      	mov	r2, r3
     8ac:	9b02      	ldr	r3, [sp, #8]
     8ae:	4413      	add	r3, r2
     8b0:	2200      	movs	r2, #0
     8b2:	701a      	strb	r2, [r3, #0]
			char c = c_map[i];
     8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     8b6:	9a07      	ldr	r2, [sp, #28]
     8b8:	4413      	add	r3, r2
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	f88d 3013 	strb.w	r3, [sp, #19]
			for(int i2 = 0; i2 < 8; i2++) buffer[first_block + i*LINE_WIDTH] |= (((c >> i2) & 0x1) << (7 - i2));
     8c0:	2300      	movs	r3, #0
     8c2:	9308      	str	r3, [sp, #32]
     8c4:	e02b      	b.n	91e <enter_char+0xe2>
     8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     8c8:	4613      	mov	r3, r2
     8ca:	00db      	lsls	r3, r3, #3
     8cc:	4413      	add	r3, r2
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	461a      	mov	r2, r3
     8d2:	9b05      	ldr	r3, [sp, #20]
     8d4:	4413      	add	r3, r2
     8d6:	461a      	mov	r2, r3
     8d8:	9b02      	ldr	r3, [sp, #8]
     8da:	1899      	adds	r1, r3, r2
     8dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     8de:	4613      	mov	r3, r2
     8e0:	00db      	lsls	r3, r3, #3
     8e2:	4413      	add	r3, r2
     8e4:	005b      	lsls	r3, r3, #1
     8e6:	461a      	mov	r2, r3
     8e8:	9b05      	ldr	r3, [sp, #20]
     8ea:	4413      	add	r3, r2
     8ec:	461a      	mov	r2, r3
     8ee:	9b02      	ldr	r3, [sp, #8]
     8f0:	4413      	add	r3, r2
     8f2:	781b      	ldrb	r3, [r3, #0]
     8f4:	b25a      	sxtb	r2, r3
     8f6:	f89d 0013 	ldrb.w	r0, [sp, #19]
     8fa:	9b08      	ldr	r3, [sp, #32]
     8fc:	fa40 f303 	asr.w	r3, r0, r3
     900:	f003 0001 	and.w	r0, r3, #1
     904:	9b08      	ldr	r3, [sp, #32]
     906:	f1c3 0307 	rsb	r3, r3, #7
     90a:	fa00 f303 	lsl.w	r3, r0, r3
     90e:	b25b      	sxtb	r3, r3
     910:	4313      	orrs	r3, r2
     912:	b25b      	sxtb	r3, r3
     914:	b2db      	uxtb	r3, r3
     916:	700b      	strb	r3, [r1, #0]
     918:	9b08      	ldr	r3, [sp, #32]
     91a:	3301      	adds	r3, #1
     91c:	9308      	str	r3, [sp, #32]
     91e:	9b08      	ldr	r3, [sp, #32]
     920:	2b07      	cmp	r3, #7
     922:	ddd0      	ble.n	8c6 <enter_char+0x8a>
     924:	e00f      	b.n	946 <enter_char+0x10a>
		} else {
			buffer[first_block + i*LINE_WIDTH] = c_map[i];
     926:	9a09      	ldr	r2, [sp, #36]	; 0x24
     928:	4613      	mov	r3, r2
     92a:	00db      	lsls	r3, r3, #3
     92c:	4413      	add	r3, r2
     92e:	005b      	lsls	r3, r3, #1
     930:	461a      	mov	r2, r3
     932:	9b05      	ldr	r3, [sp, #20]
     934:	4413      	add	r3, r2
     936:	461a      	mov	r2, r3
     938:	9b02      	ldr	r3, [sp, #8]
     93a:	4413      	add	r3, r2
     93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     93e:	9907      	ldr	r1, [sp, #28]
     940:	440a      	add	r2, r1
     942:	7812      	ldrb	r2, [r2, #0]
     944:	701a      	strb	r2, [r3, #0]
	unsigned char offset;
	unsigned char *c_map = get_char(c, &offset);
	int x_block = x/8;
	int first_block = 2 + x_block + y*LINE_WIDTH;

	for(int i = 0; i < MIN(FONT_HEIGHT, 128 - y); i++) {
     946:	9b09      	ldr	r3, [sp, #36]	; 0x24
     948:	3301      	adds	r3, #1
     94a:	9309      	str	r3, [sp, #36]	; 0x24
     94c:	9b00      	ldr	r3, [sp, #0]
     94e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
     952:	2b08      	cmp	r3, #8
     954:	bf28      	it	cs
     956:	2308      	movcs	r3, #8
     958:	461a      	mov	r2, r3
     95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     95c:	429a      	cmp	r2, r3
     95e:	d899      	bhi.n	894 <enter_char+0x58>
     960:	e000      	b.n	964 <enter_char+0x128>
		x += FONT_WIDTH;
	}
}

void enter_char(char c, uint8_t *buffer, unsigned int x, unsigned int y, int flip) {
	if(!validate_character(c)) return;
     962:	bf00      	nop
			for(int i2 = 0; i2 < 8; i2++) buffer[first_block + i*LINE_WIDTH] |= (((c >> i2) & 0x1) << (7 - i2));
		} else {
			buffer[first_block + i*LINE_WIDTH] = c_map[i];
		}
	}
}
     964:	b00b      	add	sp, #44	; 0x2c
     966:	f85d fb04 	ldr.w	pc, [sp], #4
     96a:	bf00      	nop

0000096c <get_char>:
	{0,48,48,0,0,48,48,0},
	{0,0,0,0,0,24,24,0},
	{0,98,100,8,16,38,70,0}
};

unsigned char *get_char(char c, unsigned char *offset) {
     96c:	b500      	push	{lr}
     96e:	b087      	sub	sp, #28
     970:	4603      	mov	r3, r0
     972:	9100      	str	r1, [sp, #0]
     974:	f88d 3007 	strb.w	r3, [sp, #7]
	unsigned int pos;
	if(c - '0' >= 0 && c - '9' <= 0) {
     978:	f89d 3007 	ldrb.w	r3, [sp, #7]
     97c:	3b30      	subs	r3, #48	; 0x30
     97e:	2b00      	cmp	r3, #0
     980:	db1a      	blt.n	9b8 <get_char+0x4c>
     982:	f89d 3007 	ldrb.w	r3, [sp, #7]
     986:	3b39      	subs	r3, #57	; 0x39
     988:	2b00      	cmp	r3, #0
     98a:	dc15      	bgt.n	9b8 <get_char+0x4c>
		pos = ALPHABET_LENGTH + (c - '0');
     98c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     990:	3b16      	subs	r3, #22
     992:	9305      	str	r3, [sp, #20]
		*offset = ((c - '0') % 2)*4;
     994:	f89d 3007 	ldrb.w	r3, [sp, #7]
     998:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     99c:	4b31      	ldr	r3, [pc, #196]	; (a64 <get_char+0xf8>)
     99e:	4013      	ands	r3, r2
     9a0:	2b00      	cmp	r3, #0
     9a2:	da03      	bge.n	9ac <get_char+0x40>
     9a4:	3b01      	subs	r3, #1
     9a6:	f063 0301 	orn	r3, r3, #1
     9aa:	3301      	adds	r3, #1
     9ac:	b2db      	uxtb	r3, r3
     9ae:	009b      	lsls	r3, r3, #2
     9b0:	b2da      	uxtb	r2, r3
     9b2:	9b00      	ldr	r3, [sp, #0]
     9b4:	701a      	strb	r2, [r3, #0]
     9b6:	e04c      	b.n	a52 <get_char+0xe6>
	} else if (c - 'a' >= 0 && c - 'z' <= 0) {
     9b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9bc:	3b61      	subs	r3, #97	; 0x61
     9be:	2b00      	cmp	r3, #0
     9c0:	db1a      	blt.n	9f8 <get_char+0x8c>
     9c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9c6:	3b7a      	subs	r3, #122	; 0x7a
     9c8:	2b00      	cmp	r3, #0
     9ca:	dc15      	bgt.n	9f8 <get_char+0x8c>
		pos = (c - 'a');
     9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9d0:	3b61      	subs	r3, #97	; 0x61
     9d2:	9305      	str	r3, [sp, #20]
		*offset = ((c - 'a') % 2)*4;
     9d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9d8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
     9dc:	4b21      	ldr	r3, [pc, #132]	; (a64 <get_char+0xf8>)
     9de:	4013      	ands	r3, r2
     9e0:	2b00      	cmp	r3, #0
     9e2:	da03      	bge.n	9ec <get_char+0x80>
     9e4:	3b01      	subs	r3, #1
     9e6:	f063 0301 	orn	r3, r3, #1
     9ea:	3301      	adds	r3, #1
     9ec:	b2db      	uxtb	r3, r3
     9ee:	009b      	lsls	r3, r3, #2
     9f0:	b2da      	uxtb	r2, r3
     9f2:	9b00      	ldr	r3, [sp, #0]
     9f4:	701a      	strb	r2, [r3, #0]
     9f6:	e02c      	b.n	a52 <get_char+0xe6>
	} else if(c - 'A' >= 0 && c - 'z' <= 0) {
     9f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9fc:	3b41      	subs	r3, #65	; 0x41
     9fe:	2b00      	cmp	r3, #0
     a00:	db0e      	blt.n	a20 <get_char+0xb4>
     a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a06:	3b7a      	subs	r3, #122	; 0x7a
     a08:	2b00      	cmp	r3, #0
     a0a:	dc09      	bgt.n	a20 <get_char+0xb4>
		return get_char(c - 'A' + 'a', offset);
     a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a10:	3320      	adds	r3, #32
     a12:	b2db      	uxtb	r3, r3
     a14:	9900      	ldr	r1, [sp, #0]
     a16:	4618      	mov	r0, r3
     a18:	f7ff ffa8 	bl	96c <get_char>
     a1c:	4603      	mov	r3, r0
     a1e:	e01c      	b.n	a5a <get_char+0xee>
	} else {
		int counter = 0;
     a20:	2300      	movs	r3, #0
     a22:	9304      	str	r3, [sp, #16]
		for(const char *ch = EXTRA_CHARS; *ch != '\0'; ch++) {
     a24:	4b10      	ldr	r3, [pc, #64]	; (a68 <get_char+0xfc>)
     a26:	9303      	str	r3, [sp, #12]
     a28:	e00f      	b.n	a4a <get_char+0xde>
			if(*ch == c) {
     a2a:	9b03      	ldr	r3, [sp, #12]
     a2c:	781b      	ldrb	r3, [r3, #0]
     a2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
     a32:	429a      	cmp	r2, r3
     a34:	d103      	bne.n	a3e <get_char+0xd2>
				pos = ALPHABET_LENGTH + 10 + counter;
     a36:	9b04      	ldr	r3, [sp, #16]
     a38:	3324      	adds	r3, #36	; 0x24
     a3a:	9305      	str	r3, [sp, #20]
				break;
     a3c:	e009      	b.n	a52 <get_char+0xe6>
			}
			counter++;
     a3e:	9b04      	ldr	r3, [sp, #16]
     a40:	3301      	adds	r3, #1
     a42:	9304      	str	r3, [sp, #16]
		*offset = ((c - 'a') % 2)*4;
	} else if(c - 'A' >= 0 && c - 'z' <= 0) {
		return get_char(c - 'A' + 'a', offset);
	} else {
		int counter = 0;
		for(const char *ch = EXTRA_CHARS; *ch != '\0'; ch++) {
     a44:	9b03      	ldr	r3, [sp, #12]
     a46:	3301      	adds	r3, #1
     a48:	9303      	str	r3, [sp, #12]
     a4a:	9b03      	ldr	r3, [sp, #12]
     a4c:	781b      	ldrb	r3, [r3, #0]
     a4e:	2b00      	cmp	r3, #0
     a50:	d1eb      	bne.n	a2a <get_char+0xbe>
				break;
			}
			counter++;
		}
	}
	return chars_big[pos];
     a52:	9b05      	ldr	r3, [sp, #20]
     a54:	00db      	lsls	r3, r3, #3
     a56:	4a05      	ldr	r2, [pc, #20]	; (a6c <get_char+0x100>)
     a58:	4413      	add	r3, r2
}
     a5a:	4618      	mov	r0, r3
     a5c:	b007      	add	sp, #28
     a5e:	f85d fb04 	ldr.w	pc, [sp], #4
     a62:	bf00      	nop
     a64:	80000001 	.word	0x80000001
     a68:	00004fdc 	.word	0x00004fdc
     a6c:	20000004 	.word	0x20000004

00000a70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     a70:	b082      	sub	sp, #8
     a72:	4603      	mov	r3, r0
     a74:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     a78:	4907      	ldr	r1, [pc, #28]	; (a98 <NVIC_EnableIRQ+0x28>)
     a7a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
     a7e:	095b      	lsrs	r3, r3, #5
     a80:	f89d 2007 	ldrb.w	r2, [sp, #7]
     a84:	f002 021f 	and.w	r2, r2, #31
     a88:	2001      	movs	r0, #1
     a8a:	fa00 f202 	lsl.w	r2, r0, r2
     a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     a92:	bf00      	nop
     a94:	b002      	add	sp, #8
     a96:	4770      	bx	lr
     a98:	e000e100 	.word	0xe000e100

00000a9c <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     a9c:	b082      	sub	sp, #8
     a9e:	4603      	mov	r3, r0
     aa0:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     aa4:	4908      	ldr	r1, [pc, #32]	; (ac8 <NVIC_ClearPendingIRQ+0x2c>)
     aa6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
     aaa:	095b      	lsrs	r3, r3, #5
     aac:	f89d 2007 	ldrb.w	r2, [sp, #7]
     ab0:	f002 021f 	and.w	r2, r2, #31
     ab4:	2001      	movs	r0, #1
     ab6:	fa00 f202 	lsl.w	r2, r0, r2
     aba:	3360      	adds	r3, #96	; 0x60
     abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     ac0:	bf00      	nop
     ac2:	b002      	add	sp, #8
     ac4:	4770      	bx	lr
     ac6:	bf00      	nop
     ac8:	e000e100 	.word	0xe000e100

00000acc <EMU_EnterEM1>:
 *   Enter energy mode 1 (EM1).
 ******************************************************************************/
__STATIC_INLINE void EMU_EnterEM1(void)
{
  /* Enter sleep mode */
  SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     acc:	4a04      	ldr	r2, [pc, #16]	; (ae0 <EMU_EnterEM1+0x14>)
     ace:	4b04      	ldr	r3, [pc, #16]	; (ae0 <EMU_EnterEM1+0x14>)
     ad0:	691b      	ldr	r3, [r3, #16]
     ad2:	f023 0304 	bic.w	r3, r3, #4
     ad6:	6113      	str	r3, [r2, #16]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     ad8:	bf30      	wfi
  __WFI();
}
     ada:	bf00      	nop
     adc:	4770      	bx	lr
     ade:	bf00      	nop
     ae0:	e000ed00 	.word	0xe000ed00

00000ae4 <USART_IntClear>:
 * @param[in] flags
 *   Pending USART/UART interrupt source(s) to clear. Use one or more valid
 *   interrupt flags for the USART module (USART_IF_nnn) OR'ed together.
 ******************************************************************************/
__STATIC_INLINE void USART_IntClear(USART_TypeDef *usart, uint32_t flags)
{
     ae4:	b082      	sub	sp, #8
     ae6:	9001      	str	r0, [sp, #4]
     ae8:	9100      	str	r1, [sp, #0]
  usart->IFC = flags;
     aea:	9b01      	ldr	r3, [sp, #4]
     aec:	9a00      	ldr	r2, [sp, #0]
     aee:	649a      	str	r2, [r3, #72]	; 0x48
}
     af0:	bf00      	nop
     af2:	b002      	add	sp, #8
     af4:	4770      	bx	lr
     af6:	bf00      	nop

00000af8 <USART_IntDisable>:
 * @param[in] flags
 *   USART/UART interrupt source(s) to disable. Use one or more valid
 *   interrupt flags for the USART module (USART_IF_nnn) OR'ed together.
 ******************************************************************************/
__STATIC_INLINE void USART_IntDisable(USART_TypeDef *usart, uint32_t flags)
{
     af8:	b082      	sub	sp, #8
     afa:	9001      	str	r0, [sp, #4]
     afc:	9100      	str	r1, [sp, #0]
  usart->IEN &= ~flags;
     afe:	9b01      	ldr	r3, [sp, #4]
     b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     b02:	9b00      	ldr	r3, [sp, #0]
     b04:	43db      	mvns	r3, r3
     b06:	401a      	ands	r2, r3
     b08:	9b01      	ldr	r3, [sp, #4]
     b0a:	64da      	str	r2, [r3, #76]	; 0x4c
}
     b0c:	bf00      	nop
     b0e:	b002      	add	sp, #8
     b10:	4770      	bx	lr
     b12:	bf00      	nop

00000b14 <USART_IntEnable>:
 * @param[in] flags
 *   USART/UART interrupt source(s) to enable. Use one or more valid
 *   interrupt flags for the USART module (USART_IF_nnn) OR'ed together.
 ******************************************************************************/
__STATIC_INLINE void USART_IntEnable(USART_TypeDef *usart, uint32_t flags)
{
     b14:	b082      	sub	sp, #8
     b16:	9001      	str	r0, [sp, #4]
     b18:	9100      	str	r1, [sp, #0]
  usart->IEN |= flags;
     b1a:	9b01      	ldr	r3, [sp, #4]
     b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     b1e:	9b00      	ldr	r3, [sp, #0]
     b20:	431a      	orrs	r2, r3
     b22:	9b01      	ldr	r3, [sp, #4]
     b24:	64da      	str	r2, [r3, #76]	; 0x4c
}
     b26:	bf00      	nop
     b28:	b002      	add	sp, #8
     b2a:	4770      	bx	lr

00000b2c <USART_IntGet>:
 * @return
 *   USART/UART interrupt source(s) pending. Returns one or more valid
 *   interrupt flags for the USART module (USART_IF_nnn) OR'ed together.
 ******************************************************************************/
__STATIC_INLINE uint32_t USART_IntGet(USART_TypeDef *usart)
{
     b2c:	b082      	sub	sp, #8
     b2e:	9001      	str	r0, [sp, #4]
  return usart->IF;
     b30:	9b01      	ldr	r3, [sp, #4]
     b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
     b34:	4618      	mov	r0, r3
     b36:	b002      	add	sp, #8
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <setup_uart>:

/******************************************************************************
 * @brief  Main function
 *
 *****************************************************************************/
void setup_uart(void) {
     b3c:	b500      	push	{lr}
     b3e:	b0c3      	sub	sp, #268	; 0x10c
  /* Initialize clocks and oscillators */
  cmuSetup( );
     b40:	f000 f92a 	bl	d98 <cmuSetup>

  /* Initialize UART peripheral */
  uartSetup( );
     b44:	f000 f836 	bl	bb4 <uartSetup>

  /* Initialize Development Kit in EBI mode */
  BSP_Init(BSP_INIT_DEFAULT);
     b48:	2002      	movs	r0, #2
     b4a:	f000 fa25 	bl	f98 <BSP_Init>

  /* Enable RS-232 transceiver on Development Kit */
  BSP_PeripheralAccess(/*BSP_RS232_UART*/1, true);
     b4e:	2101      	movs	r1, #1
     b50:	2001      	movs	r0, #1
     b52:	f000 fae3 	bl	111c <BSP_PeripheralAccess>

  /* When DVK is configured, and no more DVK access is needed, the interface can safely be disabled to save current */
  BSP_Disable();
     b56:	f000 fa09 	bl	f6c <BSP_Disable>
   *  When the predefined termiation character is received, the all pending
   *  data in rxBuf is copied to txBuf and echoed back on the UART */
  while (1)
  {
    //Wait in EM1 while UART transmit
    EMU_EnterEM1();
     b5a:	f7ff ffb7 	bl	acc <EMU_EnterEM1>

    // Check if RX buffer has overflowed
    if (rxBuf.overflow) {
     b5e:	4b13      	ldr	r3, [pc, #76]	; (bac <setup_uart+0x70>)
     b60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
     b64:	b2db      	uxtb	r3, r3
     b66:	2b00      	cmp	r3, #0
     b68:	d008      	beq.n	b7c <setup_uart+0x40>
      rxBuf.overflow = false;
     b6a:	4b10      	ldr	r3, [pc, #64]	; (bac <setup_uart+0x70>)
     b6c:	2200      	movs	r2, #0
     b6e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
      uartPutData((uint8_t*) overflowString, ofsLen);
     b72:	2313      	movs	r3, #19
     b74:	4619      	mov	r1, r3
     b76:	480e      	ldr	r0, [pc, #56]	; (bb0 <setup_uart+0x74>)
     b78:	f000 f880 	bl	c7c <uartPutData>
    }

    // Check if termination character is received
    if (rxBuf.data[(rxBuf.wrI - 1) % BUFFERSIZE] == TERMINATION_CHAR) {
     b7c:	4b0b      	ldr	r3, [pc, #44]	; (bac <setup_uart+0x70>)
     b7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     b82:	3b01      	subs	r3, #1
     b84:	b2db      	uxtb	r3, r3
     b86:	4a09      	ldr	r2, [pc, #36]	; (bac <setup_uart+0x70>)
     b88:	5cd3      	ldrb	r3, [r2, r3]
     b8a:	b2db      	uxtb	r3, r3
     b8c:	2b2e      	cmp	r3, #46	; 0x2e
     b8e:	d1e4      	bne.n	b5a <setup_uart+0x1e>
      // Copy received data to UART transmit queue
      uint8_t tmpBuf[BUFFERSIZE];
      int     len = uartGetData(tmpBuf, 0);
     b90:	ab01      	add	r3, sp, #4
     b92:	2100      	movs	r1, #0
     b94:	4618      	mov	r0, r3
     b96:	f000 f8bd 	bl	d14 <uartGetData>
     b9a:	4603      	mov	r3, r0
     b9c:	9341      	str	r3, [sp, #260]	; 0x104
      uartPutData(tmpBuf, len);
     b9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
     ba0:	ab01      	add	r3, sp, #4
     ba2:	4611      	mov	r1, r2
     ba4:	4618      	mov	r0, r3
     ba6:	f000 f869 	bl	c7c <uartPutData>
    }
  }
     baa:	e7d6      	b.n	b5a <setup_uart+0x1e>
     bac:	200010a8 	.word	0x200010a8
     bb0:	00004fe4 	.word	0x00004fe4

00000bb4 <uartSetup>:

/******************************************************************************
* @brief  uartSetup function
*
******************************************************************************/
void uartSetup(void) {
     bb4:	b508      	push	{r3, lr}
  /* Enable clock for GPIO module (required for pin configuration) */
  CMU_ClockEnable(cmuClock_GPIO, true);
     bb6:	2101      	movs	r1, #1
     bb8:	482d      	ldr	r0, [pc, #180]	; (c70 <Heap_Size+0x70>)
     bba:	f001 fd75 	bl	26a8 <CMU_ClockEnable>
  /* Configure GPIO pins */
  GPIO_PinModeSet(gpioPortE, 2, gpioModePushPull, 1);	//TX
     bbe:	2301      	movs	r3, #1
     bc0:	2204      	movs	r2, #4
     bc2:	2102      	movs	r1, #2
     bc4:	2004      	movs	r0, #4
     bc6:	f002 fcbd 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet(gpioPortE, 3, gpioModeInput, 0);	//RX
     bca:	2300      	movs	r3, #0
     bcc:	2201      	movs	r2, #1
     bce:	2103      	movs	r1, #3
     bd0:	2004      	movs	r0, #4
     bd2:	f002 fcb7 	bl	3544 <GPIO_PinModeSet>


  /* Prepare struct for initializing UART in asynchronous mode*/
  uartInit.enable       = usartDisable;   	/* Don't enable UART upon intialization */
     bd6:	4b27      	ldr	r3, [pc, #156]	; (c74 <Heap_Size+0x74>)
     bd8:	2200      	movs	r2, #0
     bda:	701a      	strb	r2, [r3, #0]
  uartInit.refFreq      = 0;              	/* Provide information on reference frequency. When set to 0, the reference frequency is */
     bdc:	4b25      	ldr	r3, [pc, #148]	; (c74 <Heap_Size+0x74>)
     bde:	2200      	movs	r2, #0
     be0:	605a      	str	r2, [r3, #4]
  uartInit.baudrate     = 9600;			/* Baud rate */
     be2:	4b24      	ldr	r3, [pc, #144]	; (c74 <Heap_Size+0x74>)
     be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
     be8:	609a      	str	r2, [r3, #8]
  uartInit.oversampling = usartOVS16;     	/* Oversampling. Range is 4x, 6x, 8x or 16x */
     bea:	4b22      	ldr	r3, [pc, #136]	; (c74 <Heap_Size+0x74>)
     bec:	2200      	movs	r2, #0
     bee:	731a      	strb	r2, [r3, #12]
  uartInit.databits     = usartDatabits8; 	/* Number of data bits. Range is 4 to 10 */
     bf0:	4b20      	ldr	r3, [pc, #128]	; (c74 <Heap_Size+0x74>)
     bf2:	2205      	movs	r2, #5
     bf4:	735a      	strb	r2, [r3, #13]
  uartInit.parity       = usartNoParity;  	/* Parity mode */
     bf6:	4b1f      	ldr	r3, [pc, #124]	; (c74 <Heap_Size+0x74>)
     bf8:	2200      	movs	r2, #0
     bfa:	81da      	strh	r2, [r3, #14]
  uartInit.stopbits     = usartStopbits2; 	/* Number of stop bits. Range is 0 to 2 */
     bfc:	4b1d      	ldr	r3, [pc, #116]	; (c74 <Heap_Size+0x74>)
     bfe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
     c02:	821a      	strh	r2, [r3, #16]
  uartInit.mvdis        = false;          	/* Disable majority voting */
     c04:	4b1b      	ldr	r3, [pc, #108]	; (c74 <Heap_Size+0x74>)
     c06:	2200      	movs	r2, #0
     c08:	749a      	strb	r2, [r3, #18]
  uartInit.prsRxEnable  = false;          	/* Enable USART Rx via Peripheral Reflex System */
     c0a:	4b1a      	ldr	r3, [pc, #104]	; (c74 <Heap_Size+0x74>)
     c0c:	2200      	movs	r2, #0
     c0e:	74da      	strb	r2, [r3, #19]
  uartInit.prsRxCh      = usartPrsRxCh0;  	/* Select PRS channel if enabled */
     c10:	4b18      	ldr	r3, [pc, #96]	; (c74 <Heap_Size+0x74>)
     c12:	2200      	movs	r2, #0
     c14:	751a      	strb	r2, [r3, #20]

  /* Initialize USART with uartInit struct */
  USART_InitAsync(uart, &uartInit);
     c16:	4b18      	ldr	r3, [pc, #96]	; (c78 <Heap_Size+0x78>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	4916      	ldr	r1, [pc, #88]	; (c74 <Heap_Size+0x74>)
     c1c:	4618      	mov	r0, r3
     c1e:	f002 fe1b 	bl	3858 <USART_InitAsync>

  /* Prepare UART Rx and Tx interrupts */
  USART_IntClear(uart, _UART_IF_MASK);
     c22:	4b15      	ldr	r3, [pc, #84]	; (c78 <Heap_Size+0x78>)
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	f641 71ff 	movw	r1, #8191	; 0x1fff
     c2a:	4618      	mov	r0, r3
     c2c:	f7ff ff5a 	bl	ae4 <USART_IntClear>
  USART_IntEnable(uart, UART_IF_RXDATAV);
     c30:	4b11      	ldr	r3, [pc, #68]	; (c78 <Heap_Size+0x78>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	2104      	movs	r1, #4
     c36:	4618      	mov	r0, r3
     c38:	f7ff ff6c 	bl	b14 <USART_IntEnable>
  NVIC_ClearPendingIRQ(UART1_RX_IRQn);
     c3c:	2016      	movs	r0, #22
     c3e:	f7ff ff2d 	bl	a9c <NVIC_ClearPendingIRQ>
  NVIC_ClearPendingIRQ(UART1_TX_IRQn);
     c42:	2017      	movs	r0, #23
     c44:	f7ff ff2a 	bl	a9c <NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(UART1_RX_IRQn);
     c48:	2016      	movs	r0, #22
     c4a:	f7ff ff11 	bl	a70 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(UART1_TX_IRQn);
     c4e:	2017      	movs	r0, #23
     c50:	f7ff ff0e 	bl	a70 <NVIC_EnableIRQ>

  /* Enable I/O pins at UART1 location #2 */
  uart->ROUTE = UART_ROUTE_RXPEN | UART_ROUTE_TXPEN | UART_ROUTE_LOCATION_LOC3;
     c54:	4b08      	ldr	r3, [pc, #32]	; (c78 <Heap_Size+0x78>)
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	f240 3203 	movw	r2, #771	; 0x303
     c5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Enable UART */
  USART_Enable(uart, usartEnable);
     c5e:	4b06      	ldr	r3, [pc, #24]	; (c78 <Heap_Size+0x78>)
     c60:	681b      	ldr	r3, [r3, #0]
     c62:	2105      	movs	r1, #5
     c64:	4618      	mov	r0, r3
     c66:	f002 fdc1 	bl	37ec <USART_Enable>
}
     c6a:	bf00      	nop
     c6c:	bd08      	pop	{r3, pc}
     c6e:	bf00      	nop
     c70:	0004d200 	.word	0x0004d200
     c74:	20000140 	.word	0x20000140
     c78:	2000013c 	.word	0x2000013c

00000c7c <uartPutData>:

/******************************************************************************
 * @brief  uartPutData function
 *
 *****************************************************************************/
void uartPutData(uint8_t * dataPtr, uint32_t dataLen) {
     c7c:	b500      	push	{lr}
     c7e:	b085      	sub	sp, #20
     c80:	9001      	str	r0, [sp, #4]
     c82:	9100      	str	r1, [sp, #0]
  uint32_t i = 0;
     c84:	2300      	movs	r3, #0
     c86:	9303      	str	r3, [sp, #12]

  /* Check if buffer is large enough for data */
  if (dataLen > BUFFERSIZE) {
     c88:	9b00      	ldr	r3, [sp, #0]
     c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     c8e:	d838      	bhi.n	d02 <uartPutData+0x86>
    /* Buffer can never fit the requested amount of data */
    return;
  }

  /* Check if buffer has room for new data */
  if ((txBuf.pendingBytes + dataLen) > BUFFERSIZE) {
     c90:	4b1e      	ldr	r3, [pc, #120]	; (d0c <uartPutData+0x90>)
     c92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     c96:	9b00      	ldr	r3, [sp, #0]
     c98:	4413      	add	r3, r2
     c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     c9e:	d91d      	bls.n	cdc <uartPutData+0x60>
    /* Wait until room */
    while ((txBuf.pendingBytes + dataLen) > BUFFERSIZE) ;
     ca0:	bf00      	nop
     ca2:	4b1a      	ldr	r3, [pc, #104]	; (d0c <uartPutData+0x90>)
     ca4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     ca8:	9b00      	ldr	r3, [sp, #0]
     caa:	4413      	add	r3, r2
     cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     cb0:	d8f7      	bhi.n	ca2 <uartPutData+0x26>
  }

  /* Fill dataPtr[0:dataLen-1] into txBuffer */
  while (i < dataLen)
     cb2:	e013      	b.n	cdc <uartPutData+0x60>
  {
    txBuf.data[txBuf.wrI] = *(dataPtr + i);
     cb4:	4b15      	ldr	r3, [pc, #84]	; (d0c <uartPutData+0x90>)
     cb6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     cba:	9901      	ldr	r1, [sp, #4]
     cbc:	9a03      	ldr	r2, [sp, #12]
     cbe:	440a      	add	r2, r1
     cc0:	7811      	ldrb	r1, [r2, #0]
     cc2:	4a12      	ldr	r2, [pc, #72]	; (d0c <uartPutData+0x90>)
     cc4:	54d1      	strb	r1, [r2, r3]
    txBuf.wrI             = (txBuf.wrI + 1) % BUFFERSIZE;
     cc6:	4b11      	ldr	r3, [pc, #68]	; (d0c <uartPutData+0x90>)
     cc8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     ccc:	3301      	adds	r3, #1
     cce:	b2db      	uxtb	r3, r3
     cd0:	4a0e      	ldr	r2, [pc, #56]	; (d0c <uartPutData+0x90>)
     cd2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    i++;
     cd6:	9b03      	ldr	r3, [sp, #12]
     cd8:	3301      	adds	r3, #1
     cda:	9303      	str	r3, [sp, #12]
    /* Wait until room */
    while ((txBuf.pendingBytes + dataLen) > BUFFERSIZE) ;
  }

  /* Fill dataPtr[0:dataLen-1] into txBuffer */
  while (i < dataLen)
     cdc:	9a03      	ldr	r2, [sp, #12]
     cde:	9b00      	ldr	r3, [sp, #0]
     ce0:	429a      	cmp	r2, r3
     ce2:	d3e7      	bcc.n	cb4 <uartPutData+0x38>
    txBuf.wrI             = (txBuf.wrI + 1) % BUFFERSIZE;
    i++;
  }

  /* Increment pending byte counter */
  txBuf.pendingBytes += dataLen;
     ce4:	4b09      	ldr	r3, [pc, #36]	; (d0c <uartPutData+0x90>)
     ce6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     cea:	9b00      	ldr	r3, [sp, #0]
     cec:	4413      	add	r3, r2
     cee:	4a07      	ldr	r2, [pc, #28]	; (d0c <uartPutData+0x90>)
     cf0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

  /* Enable interrupt on USART TX Buffer*/
  USART_IntEnable(uart, UART_IF_TXBL);
     cf4:	4b06      	ldr	r3, [pc, #24]	; (d10 <uartPutData+0x94>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	2102      	movs	r1, #2
     cfa:	4618      	mov	r0, r3
     cfc:	f7ff ff0a 	bl	b14 <USART_IntEnable>
     d00:	e000      	b.n	d04 <uartPutData+0x88>
  uint32_t i = 0;

  /* Check if buffer is large enough for data */
  if (dataLen > BUFFERSIZE) {
    /* Buffer can never fit the requested amount of data */
    return;
     d02:	bf00      	nop
  /* Increment pending byte counter */
  txBuf.pendingBytes += dataLen;

  /* Enable interrupt on USART TX Buffer*/
  USART_IntEnable(uart, UART_IF_TXBL);
}
     d04:	b005      	add	sp, #20
     d06:	f85d fb04 	ldr.w	pc, [sp], #4
     d0a:	bf00      	nop
     d0c:	20000674 	.word	0x20000674
     d10:	2000013c 	.word	0x2000013c

00000d14 <uartGetData>:

/******************************************************************************
 * @brief  uartGetData function
 *
 *****************************************************************************/
uint32_t uartGetData(uint8_t * dataPtr, uint32_t dataLen) {
     d14:	b084      	sub	sp, #16
     d16:	9001      	str	r0, [sp, #4]
     d18:	9100      	str	r1, [sp, #0]
  uint32_t i = 0;
     d1a:	2300      	movs	r3, #0
     d1c:	9303      	str	r3, [sp, #12]

  /* Wait until the requested number of bytes are available */
  if (rxBuf.pendingBytes < dataLen) {
     d1e:	4b1d      	ldr	r3, [pc, #116]	; (d94 <uartGetData+0x80>)
     d20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     d24:	9b00      	ldr	r3, [sp, #0]
     d26:	429a      	cmp	r2, r3
     d28:	d206      	bcs.n	d38 <uartGetData+0x24>
    while (rxBuf.pendingBytes < dataLen) ;
     d2a:	bf00      	nop
     d2c:	4b19      	ldr	r3, [pc, #100]	; (d94 <uartGetData+0x80>)
     d2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     d32:	9b00      	ldr	r3, [sp, #0]
     d34:	429a      	cmp	r2, r3
     d36:	d3f9      	bcc.n	d2c <uartGetData+0x18>
  }

  if (dataLen == 0) {
     d38:	9b00      	ldr	r3, [sp, #0]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d119      	bne.n	d72 <uartGetData+0x5e>
    dataLen = rxBuf.pendingBytes;
     d3e:	4b15      	ldr	r3, [pc, #84]	; (d94 <uartGetData+0x80>)
     d40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
     d44:	9300      	str	r3, [sp, #0]
  }

  /* Copy data from Rx buffer to dataPtr */
  while (i < dataLen) {
     d46:	e014      	b.n	d72 <uartGetData+0x5e>
    *(dataPtr + i) = rxBuf.data[rxBuf.rdI];
     d48:	9a01      	ldr	r2, [sp, #4]
     d4a:	9b03      	ldr	r3, [sp, #12]
     d4c:	4413      	add	r3, r2
     d4e:	4a11      	ldr	r2, [pc, #68]	; (d94 <uartGetData+0x80>)
     d50:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
     d54:	490f      	ldr	r1, [pc, #60]	; (d94 <uartGetData+0x80>)
     d56:	5c8a      	ldrb	r2, [r1, r2]
     d58:	b2d2      	uxtb	r2, r2
     d5a:	701a      	strb	r2, [r3, #0]
    rxBuf.rdI      = (rxBuf.rdI + 1) % BUFFERSIZE;
     d5c:	4b0d      	ldr	r3, [pc, #52]	; (d94 <uartGetData+0x80>)
     d5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     d62:	3301      	adds	r3, #1
     d64:	b2db      	uxtb	r3, r3
     d66:	4a0b      	ldr	r2, [pc, #44]	; (d94 <uartGetData+0x80>)
     d68:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    i++;
     d6c:	9b03      	ldr	r3, [sp, #12]
     d6e:	3301      	adds	r3, #1
     d70:	9303      	str	r3, [sp, #12]
  if (dataLen == 0) {
    dataLen = rxBuf.pendingBytes;
  }

  /* Copy data from Rx buffer to dataPtr */
  while (i < dataLen) {
     d72:	9a03      	ldr	r2, [sp, #12]
     d74:	9b00      	ldr	r3, [sp, #0]
     d76:	429a      	cmp	r2, r3
     d78:	d3e6      	bcc.n	d48 <uartGetData+0x34>
    rxBuf.rdI      = (rxBuf.rdI + 1) % BUFFERSIZE;
    i++;
  }

  /* Decrement pending byte counter */
  rxBuf.pendingBytes -= dataLen;
     d7a:	4b06      	ldr	r3, [pc, #24]	; (d94 <uartGetData+0x80>)
     d7c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     d80:	9b00      	ldr	r3, [sp, #0]
     d82:	1ad3      	subs	r3, r2, r3
     d84:	4a03      	ldr	r2, [pc, #12]	; (d94 <uartGetData+0x80>)
     d86:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

  return i;
     d8a:	9b03      	ldr	r3, [sp, #12]
}
     d8c:	4618      	mov	r0, r3
     d8e:	b004      	add	sp, #16
     d90:	4770      	bx	lr
     d92:	bf00      	nop
     d94:	200010a8 	.word	0x200010a8

00000d98 <cmuSetup>:

/***************************************************************************//**
 * @brief Set up Clock Management Unit
 ******************************************************************************/
void cmuSetup(void) {
     d98:	b508      	push	{r3, lr}

  /* Disable HFRCO */
  /* CMU_OscillatorEnable( cmuOsc_HFRCO, false, false ); */

  /* Enable clock for HF peripherals */
  CMU_ClockEnable(cmuClock_HFPER, true);
     d9a:	2101      	movs	r1, #1
     d9c:	4804      	ldr	r0, [pc, #16]	; (db0 <cmuSetup+0x18>)
     d9e:	f001 fc83 	bl	26a8 <CMU_ClockEnable>

  /* Enable clock for USART module */
  CMU_ClockEnable(cmuClock_UART1, true);
     da2:	2101      	movs	r1, #1
     da4:	4803      	ldr	r0, [pc, #12]	; (db4 <cmuSetup+0x1c>)
     da6:	f001 fc7f 	bl	26a8 <CMU_ClockEnable>
}
     daa:	bf00      	nop
     dac:	bd08      	pop	{r3, pc}
     dae:	bf00      	nop
     db0:	00048140 	.word	0x00048140
     db4:	00044200 	.word	0x00044200

00000db8 <UART1_RX_IRQHandler>:
 * Set up the interrupt prior to use
 *
 * Note that this function handles overflows in a very simple way.
 *
 *****************************************************************************/
void UART1_RX_IRQHandler(void) {
     db8:	b500      	push	{lr}
     dba:	b083      	sub	sp, #12
  /* Check for RX data valid interrupt */
  if (uart->STATUS & UART_STATUS_RXDATAV) {
     dbc:	4b11      	ldr	r3, [pc, #68]	; (e04 <UART1_RX_IRQHandler+0x4c>)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	691b      	ldr	r3, [r3, #16]
     dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
     dc6:	2b00      	cmp	r3, #0
     dc8:	d017      	beq.n	dfa <UART1_RX_IRQHandler+0x42>
    /* Copy data into RX Buffer */
    uint8_t rxData = USART_Rx(uart);
     dca:	4b0e      	ldr	r3, [pc, #56]	; (e04 <UART1_RX_IRQHandler+0x4c>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	4618      	mov	r0, r3
     dd0:	f002 fe52 	bl	3a78 <USART_Rx>
     dd4:	4603      	mov	r3, r0
     dd6:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_PinModeSet(gpioPortE, 1, gpioModePushPull, 1);
     dda:	2301      	movs	r3, #1
     ddc:	2204      	movs	r2, #4
     dde:	2101      	movs	r1, #1
     de0:	2004      	movs	r0, #4
     de2:	f002 fbaf 	bl	3544 <GPIO_PinModeSet>
    //Flag Rx overflow
    if (rxBuf.pendingBytes > BUFFERSIZE) {
      rxBuf.overflow = true;
    }*/

	recv_callback(rxData);
     de6:	4b08      	ldr	r3, [pc, #32]	; (e08 <UART1_RX_IRQHandler+0x50>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	f89d 2007 	ldrb.w	r2, [sp, #7]
     dee:	4610      	mov	r0, r2
     df0:	4798      	blx	r3

    /* Clear RXDATAV interrupt */
    USART_IntClear(UART1, UART_IF_RXDATAV);
     df2:	2104      	movs	r1, #4
     df4:	4805      	ldr	r0, [pc, #20]	; (e0c <UART1_RX_IRQHandler+0x54>)
     df6:	f7ff fe75 	bl	ae4 <USART_IntClear>
  }
}
     dfa:	bf00      	nop
     dfc:	b003      	add	sp, #12
     dfe:	f85d fb04 	ldr.w	pc, [sp], #4
     e02:	bf00      	nop
     e04:	2000013c 	.word	0x2000013c
     e08:	200010a4 	.word	0x200010a4
     e0c:	4000e400 	.word	0x4000e400

00000e10 <UART1_TX_IRQHandler>:
 * @brief UART1 TX IRQ Handler
 *
 * Set up the interrupt prior to use
 *
 *****************************************************************************/
void UART1_TX_IRQHandler(void) {
     e10:	b508      	push	{r3, lr}
  /* Clear interrupt flags by reading them. */
  USART_IntGet(UART1);
     e12:	481e      	ldr	r0, [pc, #120]	; (e8c <UART1_TX_IRQHandler+0x7c>)
     e14:	f7ff fe8a 	bl	b2c <USART_IntGet>

  /* Check TX buffer level status */
  if (uart->STATUS & UART_STATUS_TXBL)
     e18:	4b1d      	ldr	r3, [pc, #116]	; (e90 <UART1_TX_IRQHandler+0x80>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	691b      	ldr	r3, [r3, #16]
     e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
     e22:	2b00      	cmp	r3, #0
     e24:	d02f      	beq.n	e86 <UART1_TX_IRQHandler+0x76>
  {
	GPIO_PinModeSet(gpioPortE, 0, gpioModePushPull, 1);
     e26:	2301      	movs	r3, #1
     e28:	2204      	movs	r2, #4
     e2a:	2100      	movs	r1, #0
     e2c:	2004      	movs	r0, #4
     e2e:	f002 fb89 	bl	3544 <GPIO_PinModeSet>
    if (txBuf.pendingBytes > 0)
     e32:	4b18      	ldr	r3, [pc, #96]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
     e38:	2b00      	cmp	r3, #0
     e3a:	d019      	beq.n	e70 <UART1_TX_IRQHandler+0x60>
    {
      /* Transmit pending character */
      USART_Tx(uart, txBuf.data[txBuf.rdI]);
     e3c:	4b14      	ldr	r3, [pc, #80]	; (e90 <UART1_TX_IRQHandler+0x80>)
     e3e:	6818      	ldr	r0, [r3, #0]
     e40:	4b14      	ldr	r3, [pc, #80]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     e46:	4a13      	ldr	r2, [pc, #76]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e48:	5cd3      	ldrb	r3, [r2, r3]
     e4a:	b2db      	uxtb	r3, r3
     e4c:	4619      	mov	r1, r3
     e4e:	f002 fe23 	bl	3a98 <USART_Tx>
      txBuf.rdI = (txBuf.rdI + 1) % BUFFERSIZE;
     e52:	4b10      	ldr	r3, [pc, #64]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     e58:	3301      	adds	r3, #1
     e5a:	b2db      	uxtb	r3, r3
     e5c:	4a0d      	ldr	r2, [pc, #52]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e5e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      txBuf.pendingBytes--;
     e62:	4b0c      	ldr	r3, [pc, #48]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
     e68:	3b01      	subs	r3, #1
     e6a:	4a0a      	ldr	r2, [pc, #40]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e6c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    }

    /* Disable Tx interrupt if no more bytes in queue */
    if (txBuf.pendingBytes == 0)
     e70:	4b08      	ldr	r3, [pc, #32]	; (e94 <UART1_TX_IRQHandler+0x84>)
     e72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
     e76:	2b00      	cmp	r3, #0
     e78:	d105      	bne.n	e86 <UART1_TX_IRQHandler+0x76>
    {
      USART_IntDisable(uart, UART_IF_TXBL);
     e7a:	4b05      	ldr	r3, [pc, #20]	; (e90 <UART1_TX_IRQHandler+0x80>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	2102      	movs	r1, #2
     e80:	4618      	mov	r0, r3
     e82:	f7ff fe39 	bl	af8 <USART_IntDisable>
    }
  }
}
     e86:	bf00      	nop
     e88:	bd08      	pop	{r3, pc}
     e8a:	bf00      	nop
     e8c:	4000e400 	.word	0x4000e400
     e90:	2000013c 	.word	0x2000013c
     e94:	20000674 	.word	0x20000674

00000e98 <set_recv_callback>:


void test_callback() {(*recv_callback)('a');}
void set_recv_callback(void (*f)(char)) {recv_callback = f;}
     e98:	b082      	sub	sp, #8
     e9a:	9001      	str	r0, [sp, #4]
     e9c:	4a02      	ldr	r2, [pc, #8]	; (ea8 <set_recv_callback+0x10>)
     e9e:	9b01      	ldr	r3, [sp, #4]
     ea0:	6013      	str	r3, [r2, #0]
     ea2:	bf00      	nop
     ea4:	b002      	add	sp, #8
     ea6:	4770      	bx	lr
     ea8:	200010a4 	.word	0x200010a4

00000eac <GPIO_PinOutClear>:
 *
 * @param[in] pin
 *   The pin to set.
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
     eac:	b082      	sub	sp, #8
     eae:	4603      	mov	r3, r0
     eb0:	9100      	str	r1, [sp, #0]
     eb2:	f88d 3007 	strb.w	r3, [sp, #7]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eba:	2b00      	cmp	r3, #0
     ebc:	d012      	beq.n	ee4 <GPIO_PinOutClear+0x38>
     ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ec2:	2b01      	cmp	r3, #1
     ec4:	d00e      	beq.n	ee4 <GPIO_PinOutClear+0x38>
     ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eca:	2b02      	cmp	r3, #2
     ecc:	d00a      	beq.n	ee4 <GPIO_PinOutClear+0x38>
     ece:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ed2:	2b03      	cmp	r3, #3
     ed4:	d006      	beq.n	ee4 <GPIO_PinOutClear+0x38>
     ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eda:	2b04      	cmp	r3, #4
     edc:	d002      	beq.n	ee4 <GPIO_PinOutClear+0x38>
     ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ee2:	2b05      	cmp	r3, #5
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
     ee4:	4908      	ldr	r1, [pc, #32]	; (f08 <GPIO_PinOutClear+0x5c>)
     ee6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     eea:	2001      	movs	r0, #1
     eec:	9b00      	ldr	r3, [sp, #0]
     eee:	fa00 f303 	lsl.w	r3, r0, r3
     ef2:	4618      	mov	r0, r3
     ef4:	4613      	mov	r3, r2
     ef6:	00db      	lsls	r3, r3, #3
     ef8:	4413      	add	r3, r2
     efa:	009b      	lsls	r3, r3, #2
     efc:	440b      	add	r3, r1
     efe:	3314      	adds	r3, #20
     f00:	6018      	str	r0, [r3, #0]
#else
  BUS_RegMaskedClear(&GPIO->P[port].DOUT, 1 << pin);
#endif
}
     f02:	bf00      	nop
     f04:	b002      	add	sp, #8
     f06:	4770      	bx	lr
     f08:	40006000 	.word	0x40006000

00000f0c <GPIO_PinOutSet>:
 *
 * @param[in] pin
 *   The pin to set.
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
     f0c:	b082      	sub	sp, #8
     f0e:	4603      	mov	r3, r0
     f10:	9100      	str	r1, [sp, #0]
     f12:	f88d 3007 	strb.w	r3, [sp, #7]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d012      	beq.n	f44 <GPIO_PinOutSet+0x38>
     f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f22:	2b01      	cmp	r3, #1
     f24:	d00e      	beq.n	f44 <GPIO_PinOutSet+0x38>
     f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f2a:	2b02      	cmp	r3, #2
     f2c:	d00a      	beq.n	f44 <GPIO_PinOutSet+0x38>
     f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f32:	2b03      	cmp	r3, #3
     f34:	d006      	beq.n	f44 <GPIO_PinOutSet+0x38>
     f36:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f3a:	2b04      	cmp	r3, #4
     f3c:	d002      	beq.n	f44 <GPIO_PinOutSet+0x38>
     f3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f42:	2b05      	cmp	r3, #5
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
     f44:	4908      	ldr	r1, [pc, #32]	; (f68 <GPIO_PinOutSet+0x5c>)
     f46:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f4a:	2001      	movs	r0, #1
     f4c:	9b00      	ldr	r3, [sp, #0]
     f4e:	fa00 f303 	lsl.w	r3, r0, r3
     f52:	4618      	mov	r0, r3
     f54:	4613      	mov	r3, r2
     f56:	00db      	lsls	r3, r3, #3
     f58:	4413      	add	r3, r2
     f5a:	009b      	lsls	r3, r3, #2
     f5c:	440b      	add	r3, r1
     f5e:	3310      	adds	r3, #16
     f60:	6018      	str	r0, [r3, #0]
#else
  BUS_RegMaskedSet(&GPIO->P[port].DOUT, 1 << pin);
#endif
}
     f62:	bf00      	nop
     f64:	b002      	add	sp, #8
     f66:	4770      	bx	lr
     f68:	40006000 	.word	0x40006000

00000f6c <BSP_Disable>:
 *
 * @return
 *   @ref BSP_STATUS_OK on DK's, @ref BSP_STATUS_NOT_IMPLEMENTED on STK's.
 *****************************************************************************/
int BSP_Disable(void)
{
     f6c:	b508      	push	{r3, lr}
  if (bspOperationMode == BSP_INIT_DK_EBI)
     f6e:	4b09      	ldr	r3, [pc, #36]	; (f94 <BSP_Disable+0x28>)
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	2b02      	cmp	r3, #2
     f74:	d101      	bne.n	f7a <BSP_Disable+0xe>
  {
    EbiDisable();
     f76:	f000 fb11 	bl	159c <EbiDisable>
  }
  if (bspOperationMode == BSP_INIT_DK_SPI)
     f7a:	4b06      	ldr	r3, [pc, #24]	; (f94 <BSP_Disable+0x28>)
     f7c:	681b      	ldr	r3, [r3, #0]
     f7e:	2b01      	cmp	r3, #1
     f80:	d101      	bne.n	f86 <BSP_Disable+0x1a>
  {
    SpiBcDisable();
     f82:	f000 fdc7 	bl	1b14 <SpiBcDisable>
  }
  BSP_BusControlModeSet(BSP_BusControl_OFF);
     f86:	2001      	movs	r0, #1
     f88:	f000 f84c 	bl	1024 <BSP_BusControlModeSet>

  return BSP_STATUS_OK;
     f8c:	2300      	movs	r3, #0
}
     f8e:	4618      	mov	r0, r3
     f90:	bd08      	pop	{r3, pc}
     f92:	bf00      	nop
     f94:	20000784 	.word	0x20000784

00000f98 <BSP_Init>:
 *             0 on all other kits.
 *
 * @return @ref BSP_STATUS_OK
 *****************************************************************************/
int BSP_Init(uint32_t flags)
{
     f98:	b500      	push	{lr}
     f9a:	b085      	sub	sp, #20
     f9c:	9001      	str	r0, [sp, #4]
  bool ret = false;
     f9e:	2300      	movs	r3, #0
     fa0:	f88d 300f 	strb.w	r3, [sp, #15]

  if (flags & BSP_INIT_DK_EBI)
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	f003 0302 	and.w	r3, r3, #2
     faa:	2b00      	cmp	r3, #0
     fac:	d00a      	beq.n	fc4 <BSP_Init+0x2c>
  {
    bspOperationMode = BSP_INIT_DK_EBI;
     fae:	4b19      	ldr	r3, [pc, #100]	; (1014 <BSP_Init+0x7c>)
     fb0:	2202      	movs	r2, #2
     fb2:	601a      	str	r2, [r3, #0]
    BSP_BusControlModeSet(BSP_BusControl_EBI);
     fb4:	2004      	movs	r0, #4
     fb6:	f000 f835 	bl	1024 <BSP_BusControlModeSet>
    ret = EbiInit();
     fba:	f000 fbc1 	bl	1740 <EbiInit>
     fbe:	4603      	mov	r3, r0
     fc0:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  if (flags & BSP_INIT_DK_SPI)
     fc4:	9b01      	ldr	r3, [sp, #4]
     fc6:	f003 0301 	and.w	r3, r3, #1
     fca:	2b00      	cmp	r3, #0
     fcc:	d00a      	beq.n	fe4 <BSP_Init+0x4c>
  {
    bspOperationMode = BSP_INIT_DK_SPI;
     fce:	4b11      	ldr	r3, [pc, #68]	; (1014 <BSP_Init+0x7c>)
     fd0:	2201      	movs	r2, #1
     fd2:	601a      	str	r2, [r3, #0]
    BSP_BusControlModeSet(BSP_BusControl_SPI);
     fd4:	2003      	movs	r0, #3
     fd6:	f000 f825 	bl	1024 <BSP_BusControlModeSet>
    ret = SpiInit();
     fda:	f000 fe37 	bl	1c4c <SpiInit>
     fde:	4603      	mov	r3, r0
     fe0:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  if (ret == false)
     fe4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fe8:	f083 0301 	eor.w	r3, r3, #1
     fec:	b2db      	uxtb	r3, r3
     fee:	2b00      	cmp	r3, #0
     ff0:	d000      	beq.n	ff4 <BSP_Init+0x5c>
  {
    /* Unable to access board control, this is an abornomal situation. */
    /* Try to restart kit and reprogram EFM32 with a standard example */
    /* as this is most likely caused by a peripheral misconfiguration. */
    while (1) ;
     ff2:	e7fe      	b.n	ff2 <BSP_Init+0x5a>
  }

  /* Inform AEM application that we are in Energy Mode 0 by default */
  BSP_RegisterWrite(&BC_REGISTER->EM, 0);
     ff4:	2100      	movs	r1, #0
     ff6:	4808      	ldr	r0, [pc, #32]	; (1018 <BSP_Init+0x80>)
     ff8:	f000 fab4 	bl	1564 <BSP_RegisterWrite>

  /* Read out BC firmware version */
  bcFwVersion = BSP_RegisterRead(&BC_REGISTER->FW_VERSION);
     ffc:	4807      	ldr	r0, [pc, #28]	; (101c <BSP_Init+0x84>)
     ffe:	f000 fa9b 	bl	1538 <BSP_RegisterRead>
    1002:	4603      	mov	r3, r0
    1004:	461a      	mov	r2, r3
    1006:	4b06      	ldr	r3, [pc, #24]	; (1020 <BSP_Init+0x88>)
    1008:	801a      	strh	r2, [r3, #0]

  return BSP_STATUS_OK;
    100a:	2300      	movs	r3, #0
}
    100c:	4618      	mov	r0, r3
    100e:	b005      	add	sp, #20
    1010:	f85d fb04 	ldr.w	pc, [sp], #4
    1014:	20000784 	.word	0x20000784
    1018:	80000002 	.word	0x80000002
    101c:	8000002c 	.word	0x8000002c
    1020:	20000790 	.word	0x20000790

00001024 <BSP_BusControlModeSet>:
 *
 * @return @ref BSP_STATUS_OK or @ref BSP_STATUS_ILLEGAL_PARAM.
 *         @ref BSP_STATUS_NOT_IMPLEMENTED on Gxxx_DK's.
 *****************************************************************************/
int BSP_BusControlModeSet(BSP_BusControl_TypeDef mode)
{
    1024:	b500      	push	{lr}
    1026:	b085      	sub	sp, #20
    1028:	4603      	mov	r3, r0
    102a:	f88d 3007 	strb.w	r3, [sp, #7]
  int retVal = BSP_STATUS_OK;
    102e:	2300      	movs	r3, #0
    1030:	9303      	str	r3, [sp, #12]

  /* Configure GPIO pins for Board Bus mode */
  /* Note: Inverter on GPIO lines to BC, so signals are active low */
  CMU_ClockEnable(cmuClock_GPIO, true);
    1032:	2101      	movs	r1, #1
    1034:	482a      	ldr	r0, [pc, #168]	; (10e0 <BSP_BusControlModeSet+0xbc>)
    1036:	f001 fb37 	bl	26a8 <CMU_ClockEnable>

  busMode = mode;
    103a:	4a2a      	ldr	r2, [pc, #168]	; (10e4 <BSP_BusControlModeSet+0xc0>)
    103c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1040:	7013      	strb	r3, [r2, #0]

  switch (mode)
    1042:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1046:	3b01      	subs	r3, #1
    1048:	2b03      	cmp	r3, #3
    104a:	d83f      	bhi.n	10cc <BSP_BusControlModeSet+0xa8>
    104c:	a201      	add	r2, pc, #4	; (adr r2, 1054 <BSP_BusControlModeSet+0x30>)
    104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1052:	bf00      	nop
    1054:	00001065 	.word	0x00001065
    1058:	0000107f 	.word	0x0000107f
    105c:	00001099 	.word	0x00001099
    1060:	000010b3 	.word	0x000010b3
  {
    case BSP_BusControl_OFF:
      /* Configure board for OFF mode on PB15 MCU_EBI_CONNECT */
      GPIO_PinModeSet(gpioPortB, 15, gpioModePushPull, 1);
    1064:	2301      	movs	r3, #1
    1066:	2204      	movs	r2, #4
    1068:	210f      	movs	r1, #15
    106a:	2001      	movs	r0, #1
    106c:	f002 fa6a 	bl	3544 <GPIO_PinModeSet>
      /* Configure board for OFF mode on PD13 MCU_SPI_CONNECT */
      GPIO_PinModeSet(gpioPortD, 13, gpioModePushPull, 1);
    1070:	2301      	movs	r3, #1
    1072:	2204      	movs	r2, #4
    1074:	210d      	movs	r1, #13
    1076:	2003      	movs	r0, #3
    1078:	f002 fa64 	bl	3544 <GPIO_PinModeSet>
      break;
    107c:	e02a      	b.n	10d4 <BSP_BusControlModeSet+0xb0>

    case BSP_BusControl_DIRECT:
      /* Configure board for DIRECT on PB15 MCU_EBI_CONNECT */
      GPIO_PinModeSet(gpioPortB, 15, gpioModePushPull, 0);
    107e:	2300      	movs	r3, #0
    1080:	2204      	movs	r2, #4
    1082:	210f      	movs	r1, #15
    1084:	2001      	movs	r0, #1
    1086:	f002 fa5d 	bl	3544 <GPIO_PinModeSet>
      /* Configure board for DIRECT on PD13 MCU_SPI_CONNECT */
      GPIO_PinModeSet(gpioPortD, 13, gpioModePushPull, 0);
    108a:	2300      	movs	r3, #0
    108c:	2204      	movs	r2, #4
    108e:	210d      	movs	r1, #13
    1090:	2003      	movs	r0, #3
    1092:	f002 fa57 	bl	3544 <GPIO_PinModeSet>
      break;
    1096:	e01d      	b.n	10d4 <BSP_BusControlModeSet+0xb0>

    case BSP_BusControl_SPI:
      /* Configure board for SPI mode on PB15 MCU_EBI_CONNECT */
      GPIO_PinModeSet(gpioPortB, 15, gpioModePushPull, 1);
    1098:	2301      	movs	r3, #1
    109a:	2204      	movs	r2, #4
    109c:	210f      	movs	r1, #15
    109e:	2001      	movs	r0, #1
    10a0:	f002 fa50 	bl	3544 <GPIO_PinModeSet>
      /* Configure board for SPI mode on PD13 MCU_SPI_CONNECT */
      GPIO_PinModeSet(gpioPortD, 13, gpioModePushPull, 0);
    10a4:	2300      	movs	r3, #0
    10a6:	2204      	movs	r2, #4
    10a8:	210d      	movs	r1, #13
    10aa:	2003      	movs	r0, #3
    10ac:	f002 fa4a 	bl	3544 <GPIO_PinModeSet>
      break;
    10b0:	e010      	b.n	10d4 <BSP_BusControlModeSet+0xb0>

    case BSP_BusControl_EBI:
      /* Configure board for EBI mode on PB15 MCU_EBI_CONNECT */
      GPIO_PinModeSet(gpioPortB, 15, gpioModePushPull, 0);
    10b2:	2300      	movs	r3, #0
    10b4:	2204      	movs	r2, #4
    10b6:	210f      	movs	r1, #15
    10b8:	2001      	movs	r0, #1
    10ba:	f002 fa43 	bl	3544 <GPIO_PinModeSet>
      /* Configure board for EBI mode on PD13 MCU_SPI_CONNECT */
      GPIO_PinModeSet(gpioPortD, 13, gpioModePushPull, 1);
    10be:	2301      	movs	r3, #1
    10c0:	2204      	movs	r2, #4
    10c2:	210d      	movs	r1, #13
    10c4:	2003      	movs	r0, #3
    10c6:	f002 fa3d 	bl	3544 <GPIO_PinModeSet>
      break;
    10ca:	e003      	b.n	10d4 <BSP_BusControlModeSet+0xb0>

    default:
      retVal = BSP_STATUS_ILLEGAL_PARAM;
    10cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10d0:	9303      	str	r3, [sp, #12]
      break;
    10d2:	bf00      	nop
  }
  return retVal;
    10d4:	9b03      	ldr	r3, [sp, #12]
}
    10d6:	4618      	mov	r0, r3
    10d8:	b005      	add	sp, #20
    10da:	f85d fb04 	ldr.w	pc, [sp], #4
    10de:	bf00      	nop
    10e0:	0004d200 	.word	0x0004d200
    10e4:	20000788 	.word	0x20000788

000010e8 <BSP_EbiExtendedAddressRange>:
 *
 * @return
 *   @ref BSP_STATUS_OK on DK3x50, @ref BSP_STATUS_NOT_IMPLEMENTED on Gxxx_DK's.
 *****************************************************************************/
int BSP_EbiExtendedAddressRange(bool enable)
{
    10e8:	b500      	push	{lr}
    10ea:	b083      	sub	sp, #12
    10ec:	4603      	mov	r3, r0
    10ee:	f88d 3007 	strb.w	r3, [sp, #7]
  if (enable)
    10f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d004      	beq.n	1104 <BSP_EbiExtendedAddressRange+0x1c>
  {
    BSP_RegisterWrite(&BC_REGISTER->EBI_CTRL, BC_EBI_CTRL_EXTADDR_MASK);
    10fa:	2101      	movs	r1, #1
    10fc:	4806      	ldr	r0, [pc, #24]	; (1118 <BSP_EbiExtendedAddressRange+0x30>)
    10fe:	f000 fa31 	bl	1564 <BSP_RegisterWrite>
    1102:	e003      	b.n	110c <BSP_EbiExtendedAddressRange+0x24>
  }
  else
  {
    BSP_RegisterWrite(&BC_REGISTER->EBI_CTRL, 0);
    1104:	2100      	movs	r1, #0
    1106:	4804      	ldr	r0, [pc, #16]	; (1118 <BSP_EbiExtendedAddressRange+0x30>)
    1108:	f000 fa2c 	bl	1564 <BSP_RegisterWrite>
  }
  return BSP_STATUS_OK;
    110c:	2300      	movs	r3, #0
}
    110e:	4618      	mov	r0, r3
    1110:	b003      	add	sp, #12
    1112:	f85d fb04 	ldr.w	pc, [sp], #4
    1116:	bf00      	nop
    1118:	80000014 	.word	0x80000014

0000111c <BSP_PeripheralAccess>:
 *
 * @return
 *   @ref BSP_STATUS_OK.
 *****************************************************************************/
int BSP_PeripheralAccess(BSP_Peripheral_TypeDef perf, bool enable)
{
    111c:	b500      	push	{lr}
    111e:	b085      	sub	sp, #20
    1120:	4603      	mov	r3, r0
    1122:	460a      	mov	r2, r1
    1124:	f88d 3007 	strb.w	r3, [sp, #7]
    1128:	4613      	mov	r3, r2
    112a:	f88d 3006 	strb.w	r3, [sp, #6]
  uint16_t perfControl;

  perfControl = BSP_RegisterRead(&BC_REGISTER->PERICON);
    112e:	48eb      	ldr	r0, [pc, #940]	; (14dc <BSP_PeripheralAccess+0x3c0>)
    1130:	f000 fa02 	bl	1538 <BSP_RegisterRead>
    1134:	4603      	mov	r3, r0
    1136:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Enable or disable the specified peripheral by setting board control switch */
  if (enable)
    113a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    113e:	2b00      	cmp	r3, #0
    1140:	f000 8129 	beq.w	1396 <BSP_PeripheralAccess+0x27a>
  {
    switch (perf)
    1144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1148:	2b0d      	cmp	r3, #13
    114a:	f200 81e7 	bhi.w	151c <BSP_PeripheralAccess+0x400>
    114e:	a201      	add	r2, pc, #4	; (adr r2, 1154 <BSP_PeripheralAccess+0x38>)
    1150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1154:	0000118d 	.word	0x0000118d
    1158:	0000119b 	.word	0x0000119b
    115c:	000011c1 	.word	0x000011c1
    1160:	000011e7 	.word	0x000011e7
    1164:	000011f5 	.word	0x000011f5
    1168:	00001239 	.word	0x00001239
    116c:	00001295 	.word	0x00001295
    1170:	000012a3 	.word	0x000012a3
    1174:	000012cf 	.word	0x000012cf
    1178:	000012dd 	.word	0x000012dd
    117c:	000012f7 	.word	0x000012f7
    1180:	00001323 	.word	0x00001323
    1184:	0000134f 	.word	0x0000134f
    1188:	0000135d 	.word	0x0000135d
    {
    case BSP_RS232_SHUTDOWN:
      perfControl |= (1 << BC_PERICON_RS232_SHUTDOWN_SHIFT);
    118c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1194:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    1198:	e1c0      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_RS232_UART:
      perfControl &= ~(1 << BC_PERICON_RS232_SHUTDOWN_SHIFT);
    119a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    119e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    11a2:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_RS232_LEUART_SHIFT);
    11a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    11ae:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl |= (1 << BC_PERICON_RS232_UART_SHIFT);
    11b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    11ba:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    11be:	e1ad      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_RS232_LEUART:
      perfControl &= ~(1 << BC_PERICON_RS232_SHUTDOWN_SHIFT);
    11c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    11c8:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_RS232_UART_SHIFT);
    11cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    11d4:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl |= (1 << BC_PERICON_RS232_LEUART_SHIFT);
    11d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    11e0:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    11e4:	e19a      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_I2C:
      perfControl |= (1 << BC_PERICON_I2C_SHIFT);
    11e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    11ee:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    11f2:	e193      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_ETH:
      /* Enable SPI interface */
      SpiControl(BSP_SPI_Ethernet);
    11f4:	2001      	movs	r0, #1
    11f6:	f000 fcf3 	bl	1be0 <SpiControl>

      /* Enable Ethernet analog switches */
      perfControl |= (1 << BC_PERICON_I2S_ETH_SHIFT);
    11fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1202:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl |= (1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    1206:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    120e:	f8ad 300e 	strh.w	r3, [sp, #14]

      /* Disable Analog Diff Input - pins PD0 and PD1 is shared */
      perfControl &= ~(1 << BC_PERICON_ANALOG_DIFF_SHIFT);
    1212:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1216:	f023 0304 	bic.w	r3, r3, #4
    121a:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Touch Inputs - pin PD3 is shared */
      perfControl &= ~(1 << BC_PERICON_TOUCH_SHIFT);
    121e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1226:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Analog SE Input - pin PD2 is shared */
      perfControl &= ~(1 << BC_PERICON_ANALOG_SE_SHIFT);
    122a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    122e:	f023 0302 	bic.w	r3, r3, #2
    1232:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    1236:	e171      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_I2S:
      /* Direct SPI interface to I2S DAC */
      SpiControl(BSP_SPI_Audio);
    1238:	2000      	movs	r0, #0
    123a:	f000 fcd1 	bl	1be0 <SpiControl>

      /* Also make surea Audio out is connected for I2S operation */
      perfControl |= (1 << BC_PERICON_AUDIO_OUT_SHIFT);
    123e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1242:	f043 0308 	orr.w	r3, r3, #8
    1246:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl |= (1 << BC_PERICON_AUDIO_OUT_SEL_SHIFT);
    124a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    124e:	f043 0310 	orr.w	r3, r3, #16
    1252:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl |= (1 << BC_PERICON_I2S_ETH_SHIFT);
    1256:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    125a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    125e:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    1262:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1266:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    126a:	f8ad 300e 	strh.w	r3, [sp, #14]

      /* Disable Analog Diff Input - pins PD0 and PD1 is shared */
      perfControl &= ~(1 << BC_PERICON_ANALOG_DIFF_SHIFT);
    126e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1272:	f023 0304 	bic.w	r3, r3, #4
    1276:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Touch Inputs - pin PD3 is shared */
      perfControl &= ~(1 << BC_PERICON_TOUCH_SHIFT);
    127a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    127e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1282:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Analog SE Input - pin PD2 is shared */
      perfControl &= ~(1 << BC_PERICON_ANALOG_SE_SHIFT);
    1286:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    128a:	f023 0302 	bic.w	r3, r3, #2
    128e:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    1292:	e143      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_TRACE:
      #if defined(ETM_PRESENT)
        perfControl |= (1 << BC_PERICON_TRACE_SHIFT);
    1294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    129c:	f8ad 300e 	strh.w	r3, [sp, #14]
        break;
    12a0:	e13c      	b.n	151c <BSP_PeripheralAccess+0x400>
        /* TRACE is not available on EFM32G890F128, application error */
        while (1) ;
      #endif

    case BSP_TOUCH:
      perfControl |= (1 << BC_PERICON_TOUCH_SHIFT);
    12a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    12aa:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disconnect SPI switch, pin PD3 is shared */
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SHIFT);
    12ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    12b6:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    12ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    12c2:	f8ad 300e 	strh.w	r3, [sp, #14]
      SpiControl(BSP_SPI_OFF);
    12c6:	2003      	movs	r0, #3
    12c8:	f000 fc8a 	bl	1be0 <SpiControl>
      break;
    12cc:	e126      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_AUDIO_IN:
      perfControl |= (1 << BC_PERICON_AUDIO_IN_SHIFT);
    12ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12d2:	f043 0320 	orr.w	r3, r3, #32
    12d6:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    12da:	e11f      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_AUDIO_OUT:
      perfControl &= ~(1 << BC_PERICON_AUDIO_OUT_SEL_SHIFT);
    12dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12e0:	f023 0310 	bic.w	r3, r3, #16
    12e4:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl |= (1 << BC_PERICON_AUDIO_OUT_SHIFT);
    12e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12ec:	f043 0308 	orr.w	r3, r3, #8
    12f0:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    12f4:	e112      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_ANALOG_DIFF:
      perfControl |= (1 << BC_PERICON_ANALOG_DIFF_SHIFT);
    12f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    12fa:	f043 0304 	orr.w	r3, r3, #4
    12fe:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disconnect SPI switch, pin PD0 and PD1 is shared */
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SHIFT);
    1302:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    130a:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    130e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1312:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    1316:	f8ad 300e 	strh.w	r3, [sp, #14]
      SpiControl(BSP_SPI_OFF);
    131a:	2003      	movs	r0, #3
    131c:	f000 fc60 	bl	1be0 <SpiControl>
      break;
    1320:	e0fc      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_ANALOG_SE:
      perfControl |= (1 << BC_PERICON_ANALOG_SE_SHIFT);
    1322:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1326:	f043 0302 	orr.w	r3, r3, #2
    132a:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disconnect SPI switch, pin PD2 is shared */
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SHIFT);
    132e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1336:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    133a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    133e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    1342:	f8ad 300e 	strh.w	r3, [sp, #14]
      SpiControl(BSP_SPI_OFF);
    1346:	2003      	movs	r0, #3
    1348:	f000 fc4a 	bl	1be0 <SpiControl>
      break;
    134c:	e0e6      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_MICROSD:
      perfControl |= (1 << BC_PERICON_SPI_SHIFT);
    134e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1352:	f043 0301 	orr.w	r3, r3, #1
    1356:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    135a:	e0df      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_TFT:
      /* Enable SPI to SSD2119 */
      SpiControl(BSP_SPI_Display);
    135c:	2002      	movs	r0, #2
    135e:	f000 fc3f 	bl	1be0 <SpiControl>
      /* Enable SPI analog switch */
      perfControl |= (1 << BC_PERICON_I2S_ETH_SHIFT);
    1362:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    136a:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Analog Diff Input - pins D0 and D1 is shared */
      perfControl &= ~(1 << BC_PERICON_ANALOG_DIFF_SHIFT);
    136e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1372:	f023 0304 	bic.w	r3, r3, #4
    1376:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Touch Inputs - pin D3 is shared */
      perfControl &= ~(1 << BC_PERICON_TOUCH_SHIFT);
    137a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    137e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1382:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* Disable Analog SE Input - pin D2 is shared */
      perfControl &= ~(1 << BC_PERICON_ANALOG_SE_SHIFT);
    1386:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    138a:	f023 0302 	bic.w	r3, r3, #2
    138e:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    1392:	bf00      	nop
    1394:	e0c2      	b.n	151c <BSP_PeripheralAccess+0x400>
    }
  }
  else
  {
    switch (perf)
    1396:	f89d 3007 	ldrb.w	r3, [sp, #7]
    139a:	2b0d      	cmp	r3, #13
    139c:	f200 80be 	bhi.w	151c <BSP_PeripheralAccess+0x400>
    13a0:	a201      	add	r2, pc, #4	; (adr r2, 13a8 <BSP_PeripheralAccess+0x28c>)
    13a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13a6:	bf00      	nop
    13a8:	000013e1 	.word	0x000013e1
    13ac:	000013ef 	.word	0x000013ef
    13b0:	00001409 	.word	0x00001409
    13b4:	00001423 	.word	0x00001423
    13b8:	00001431 	.word	0x00001431
    13bc:	00001451 	.word	0x00001451
    13c0:	00001489 	.word	0x00001489
    13c4:	00001497 	.word	0x00001497
    13c8:	000014a5 	.word	0x000014a5
    13cc:	000014b3 	.word	0x000014b3
    13d0:	000014cd 	.word	0x000014cd
    13d4:	000014e1 	.word	0x000014e1
    13d8:	000014ef 	.word	0x000014ef
    13dc:	000014fd 	.word	0x000014fd
    {
    case BSP_RS232_SHUTDOWN:
      perfControl &= ~(1 << BC_PERICON_RS232_SHUTDOWN_SHIFT);
    13e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    13e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    13e8:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    13ec:	e096      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_RS232_UART:
      perfControl |= (1 << BC_PERICON_RS232_SHUTDOWN_SHIFT);
    13ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    13f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    13f6:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_RS232_UART_SHIFT);
    13fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    13fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1402:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    1406:	e089      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_RS232_LEUART:
      perfControl |= (1 << BC_PERICON_RS232_SHUTDOWN_SHIFT);
    1408:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    140c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1410:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_RS232_LEUART_SHIFT);
    1414:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    141c:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    1420:	e07c      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_I2C:
      perfControl &= ~(1 << BC_PERICON_I2C_SHIFT);
    1422:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    142a:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    142e:	e075      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_ETH:
      /* Disable SPI interface */
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SHIFT);
    1430:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1438:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    143c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    1444:	f8ad 300e 	strh.w	r3, [sp, #14]
      SpiControl(BSP_SPI_OFF);
    1448:	2003      	movs	r0, #3
    144a:	f000 fbc9 	bl	1be0 <SpiControl>
      break;
    144e:	e065      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_I2S:
      /* Disable SPI interface and audio out */
      perfControl &= ~(1 << BC_PERICON_AUDIO_OUT_SHIFT);
    1450:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1454:	f023 0308 	bic.w	r3, r3, #8
    1458:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_AUDIO_OUT_SEL_SHIFT);
    145c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1460:	f023 0310 	bic.w	r3, r3, #16
    1464:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SHIFT);
    1468:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    146c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1470:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    1474:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    147c:	f8ad 300e 	strh.w	r3, [sp, #14]
      SpiControl(BSP_SPI_OFF);
    1480:	2003      	movs	r0, #3
    1482:	f000 fbad 	bl	1be0 <SpiControl>
      break;
    1486:	e049      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_TRACE:
      #if defined(ETM_PRESENT)
        perfControl &= ~(1 << BC_PERICON_TRACE_SHIFT);
    1488:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    148c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1490:	f8ad 300e 	strh.w	r3, [sp, #14]
        break;
    1494:	e042      	b.n	151c <BSP_PeripheralAccess+0x400>
        /* TRACE is not available on EFM32G890F128, application error */
        while (1) ;
      #endif

    case BSP_TOUCH:
      perfControl &= ~(1 << BC_PERICON_TOUCH_SHIFT);
    1496:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    149a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    149e:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    14a2:	e03b      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_AUDIO_IN:
      perfControl &= ~(1 << BC_PERICON_AUDIO_IN_SHIFT);
    14a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    14a8:	f023 0320 	bic.w	r3, r3, #32
    14ac:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    14b0:	e034      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_AUDIO_OUT:
      perfControl &= ~(1 << BC_PERICON_AUDIO_OUT_SEL_SHIFT);
    14b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    14b6:	f023 0310 	bic.w	r3, r3, #16
    14ba:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_AUDIO_OUT_SHIFT);
    14be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    14c2:	f023 0308 	bic.w	r3, r3, #8
    14c6:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    14ca:	e027      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_ANALOG_DIFF:
      perfControl &= ~(1 << BC_PERICON_ANALOG_DIFF_SHIFT);
    14cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    14d0:	f023 0304 	bic.w	r3, r3, #4
    14d4:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    14d8:	e020      	b.n	151c <BSP_PeripheralAccess+0x400>
    14da:	bf00      	nop
    14dc:	80000018 	.word	0x80000018

    case BSP_ANALOG_SE:
      perfControl &= ~(1 << BC_PERICON_ANALOG_SE_SHIFT);
    14e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    14e4:	f023 0302 	bic.w	r3, r3, #2
    14e8:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    14ec:	e016      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_MICROSD:
      perfControl &= ~(1 << BC_PERICON_SPI_SHIFT);
    14ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    14f2:	f023 0301 	bic.w	r3, r3, #1
    14f6:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
    14fa:	e00f      	b.n	151c <BSP_PeripheralAccess+0x400>

    case BSP_TFT:
      /* Disable SPI interface */
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SHIFT);
    14fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1504:	f8ad 300e 	strh.w	r3, [sp, #14]
      perfControl &= ~(1 << BC_PERICON_I2S_ETH_SEL_SHIFT);
    1508:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    150c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    1510:	f8ad 300e 	strh.w	r3, [sp, #14]
      SpiControl(BSP_SPI_OFF);
    1514:	2003      	movs	r0, #3
    1516:	f000 fb63 	bl	1be0 <SpiControl>
      break;
    151a:	bf00      	nop
    }
  }
  /* Write back register */
  BSP_RegisterWrite(&BC_REGISTER->PERICON, perfControl);
    151c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1520:	4619      	mov	r1, r3
    1522:	4804      	ldr	r0, [pc, #16]	; (1534 <BSP_PeripheralAccess+0x418>)
    1524:	f000 f81e 	bl	1564 <BSP_RegisterWrite>

  return BSP_STATUS_OK;
    1528:	2300      	movs	r3, #0
}
    152a:	4618      	mov	r0, r3
    152c:	b005      	add	sp, #20
    152e:	f85d fb04 	ldr.w	pc, [sp], #4
    1532:	bf00      	nop
    1534:	80000018 	.word	0x80000018

00001538 <BSP_RegisterRead>:
 * @brief Read from a board controller register.
 * @param[in] addr The board controller register address.
 * @return The value read.
 *****************************************************************************/
uint16_t BSP_RegisterRead(volatile uint16_t *addr)
{
    1538:	b500      	push	{lr}
    153a:	b083      	sub	sp, #12
    153c:	9001      	str	r0, [sp, #4]
  if (bspOperationMode == BSP_INIT_DK_EBI)
    153e:	4b08      	ldr	r3, [pc, #32]	; (1560 <BSP_RegisterRead+0x28>)
    1540:	681b      	ldr	r3, [r3, #0]
    1542:	2b02      	cmp	r3, #2
    1544:	d103      	bne.n	154e <BSP_RegisterRead+0x16>
  {
    return *addr;
    1546:	9b01      	ldr	r3, [sp, #4]
    1548:	881b      	ldrh	r3, [r3, #0]
    154a:	b29b      	uxth	r3, r3
    154c:	e003      	b.n	1556 <BSP_RegisterRead+0x1e>
  }
  else
  {
    return SpiRegisterRead(addr);
    154e:	9801      	ldr	r0, [sp, #4]
    1550:	f000 fba2 	bl	1c98 <SpiRegisterRead>
    1554:	4603      	mov	r3, r0
  }
}
    1556:	4618      	mov	r0, r3
    1558:	b003      	add	sp, #12
    155a:	f85d fb04 	ldr.w	pc, [sp], #4
    155e:	bf00      	nop
    1560:	20000784 	.word	0x20000784

00001564 <BSP_RegisterWrite>:
 * @brief Write to a board controller register.
 * @param[in] addr The Board controller register address.
 * @param[in] data The value to write.
 *****************************************************************************/
int BSP_RegisterWrite(volatile uint16_t *addr, uint16_t data)
{
    1564:	b500      	push	{lr}
    1566:	b083      	sub	sp, #12
    1568:	9001      	str	r0, [sp, #4]
    156a:	460b      	mov	r3, r1
    156c:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (bspOperationMode == BSP_INIT_DK_EBI)
    1570:	4b09      	ldr	r3, [pc, #36]	; (1598 <BSP_RegisterWrite+0x34>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	2b02      	cmp	r3, #2
    1576:	d104      	bne.n	1582 <BSP_RegisterWrite+0x1e>
  {
    *addr = data;
    1578:	9b01      	ldr	r3, [sp, #4]
    157a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    157e:	801a      	strh	r2, [r3, #0]
    1580:	e005      	b.n	158e <BSP_RegisterWrite+0x2a>
  }
  else
  {
    SpiRegisterWrite(addr, data);
    1582:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1586:	4619      	mov	r1, r3
    1588:	9801      	ldr	r0, [sp, #4]
    158a:	f000 fbc5 	bl	1d18 <SpiRegisterWrite>
  }
  return BSP_STATUS_OK;
    158e:	2300      	movs	r3, #0
}
    1590:	4618      	mov	r0, r3
    1592:	b003      	add	sp, #12
    1594:	f85d fb04 	ldr.w	pc, [sp], #4
    1598:	20000784 	.word	0x20000784

0000159c <EbiDisable>:
/** @} (end group BSP) */

/** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */

static void EbiDisable(void)
{
    159c:	b508      	push	{r3, lr}

#else

  /* Configure GPIO pins as disabled */
  /* EBI AD9..15 */
  GPIO_PinModeSet( gpioPortA,  0, gpioModeDisabled, 0 );
    159e:	2300      	movs	r3, #0
    15a0:	2200      	movs	r2, #0
    15a2:	2100      	movs	r1, #0
    15a4:	2000      	movs	r0, #0
    15a6:	f001 ffcd 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  1, gpioModeDisabled, 0 );
    15aa:	2300      	movs	r3, #0
    15ac:	2200      	movs	r2, #0
    15ae:	2101      	movs	r1, #1
    15b0:	2000      	movs	r0, #0
    15b2:	f001 ffc7 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  2, gpioModeDisabled, 0 );
    15b6:	2300      	movs	r3, #0
    15b8:	2200      	movs	r2, #0
    15ba:	2102      	movs	r1, #2
    15bc:	2000      	movs	r0, #0
    15be:	f001 ffc1 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  3, gpioModeDisabled, 0 );
    15c2:	2300      	movs	r3, #0
    15c4:	2200      	movs	r2, #0
    15c6:	2103      	movs	r1, #3
    15c8:	2000      	movs	r0, #0
    15ca:	f001 ffbb 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  4, gpioModeDisabled, 0 );
    15ce:	2300      	movs	r3, #0
    15d0:	2200      	movs	r2, #0
    15d2:	2104      	movs	r1, #4
    15d4:	2000      	movs	r0, #0
    15d6:	f001 ffb5 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  5, gpioModeDisabled, 0 );
    15da:	2300      	movs	r3, #0
    15dc:	2200      	movs	r2, #0
    15de:	2105      	movs	r1, #5
    15e0:	2000      	movs	r0, #0
    15e2:	f001 ffaf 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  6, gpioModeDisabled, 0 );
    15e6:	2300      	movs	r3, #0
    15e8:	2200      	movs	r2, #0
    15ea:	2106      	movs	r1, #6
    15ec:	2000      	movs	r0, #0
    15ee:	f001 ffa9 	bl	3544 <GPIO_PinModeSet>

  /* EBI AD8 */
  GPIO_PinModeSet( gpioPortA, 15, gpioModeDisabled, 0 );
    15f2:	2300      	movs	r3, #0
    15f4:	2200      	movs	r2, #0
    15f6:	210f      	movs	r1, #15
    15f8:	2000      	movs	r0, #0
    15fa:	f001 ffa3 	bl	3544 <GPIO_PinModeSet>

  /* EBI A16-A22 */
  GPIO_PinModeSet( gpioPortB,  0, gpioModeDisabled, 0 );
    15fe:	2300      	movs	r3, #0
    1600:	2200      	movs	r2, #0
    1602:	2100      	movs	r1, #0
    1604:	2001      	movs	r0, #1
    1606:	f001 ff9d 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  1, gpioModeDisabled, 0 );
    160a:	2300      	movs	r3, #0
    160c:	2200      	movs	r2, #0
    160e:	2101      	movs	r1, #1
    1610:	2001      	movs	r0, #1
    1612:	f001 ff97 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  2, gpioModeDisabled, 0 );
    1616:	2300      	movs	r3, #0
    1618:	2200      	movs	r2, #0
    161a:	2102      	movs	r1, #2
    161c:	2001      	movs	r0, #1
    161e:	f001 ff91 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  3, gpioModeDisabled, 0 );
    1622:	2300      	movs	r3, #0
    1624:	2200      	movs	r2, #0
    1626:	2103      	movs	r1, #3
    1628:	2001      	movs	r0, #1
    162a:	f001 ff8b 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  4, gpioModeDisabled, 0 );
    162e:	2300      	movs	r3, #0
    1630:	2200      	movs	r2, #0
    1632:	2104      	movs	r1, #4
    1634:	2001      	movs	r0, #1
    1636:	f001 ff85 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  5, gpioModeDisabled, 0 );
    163a:	2300      	movs	r3, #0
    163c:	2200      	movs	r2, #0
    163e:	2105      	movs	r1, #5
    1640:	2001      	movs	r0, #1
    1642:	f001 ff7f 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  6, gpioModeDisabled, 0 );
    1646:	2300      	movs	r3, #0
    1648:	2200      	movs	r2, #0
    164a:	2106      	movs	r1, #6
    164c:	2001      	movs	r0, #1
    164e:	f001 ff79 	bl	3544 <GPIO_PinModeSet>

  /* EBI CS0-CS3 */
  GPIO_PinModeSet( gpioPortD,  9, gpioModeDisabled, 0 );
    1652:	2300      	movs	r3, #0
    1654:	2200      	movs	r2, #0
    1656:	2109      	movs	r1, #9
    1658:	2003      	movs	r0, #3
    165a:	f001 ff73 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortD, 10, gpioModeDisabled, 0 );
    165e:	2300      	movs	r3, #0
    1660:	2200      	movs	r2, #0
    1662:	210a      	movs	r1, #10
    1664:	2003      	movs	r0, #3
    1666:	f001 ff6d 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortD, 11, gpioModeDisabled, 0 );
    166a:	2300      	movs	r3, #0
    166c:	2200      	movs	r2, #0
    166e:	210b      	movs	r1, #11
    1670:	2003      	movs	r0, #3
    1672:	f001 ff67 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortD, 12, gpioModeDisabled, 0 );
    1676:	2300      	movs	r3, #0
    1678:	2200      	movs	r2, #0
    167a:	210c      	movs	r1, #12
    167c:	2003      	movs	r0, #3
    167e:	f001 ff61 	bl	3544 <GPIO_PinModeSet>

  /* EBI AD0..7 */
  GPIO_PinModeSet( gpioPortE,  8, gpioModeDisabled, 0 );
    1682:	2300      	movs	r3, #0
    1684:	2200      	movs	r2, #0
    1686:	2108      	movs	r1, #8
    1688:	2004      	movs	r0, #4
    168a:	f001 ff5b 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE,  9, gpioModeDisabled, 0 );
    168e:	2300      	movs	r3, #0
    1690:	2200      	movs	r2, #0
    1692:	2109      	movs	r1, #9
    1694:	2004      	movs	r0, #4
    1696:	f001 ff55 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 10, gpioModeDisabled, 0 );
    169a:	2300      	movs	r3, #0
    169c:	2200      	movs	r2, #0
    169e:	210a      	movs	r1, #10
    16a0:	2004      	movs	r0, #4
    16a2:	f001 ff4f 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 11, gpioModeDisabled, 0 );
    16a6:	2300      	movs	r3, #0
    16a8:	2200      	movs	r2, #0
    16aa:	210b      	movs	r1, #11
    16ac:	2004      	movs	r0, #4
    16ae:	f001 ff49 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 12, gpioModeDisabled, 0 );
    16b2:	2300      	movs	r3, #0
    16b4:	2200      	movs	r2, #0
    16b6:	210c      	movs	r1, #12
    16b8:	2004      	movs	r0, #4
    16ba:	f001 ff43 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 13, gpioModeDisabled, 0 );
    16be:	2300      	movs	r3, #0
    16c0:	2200      	movs	r2, #0
    16c2:	210d      	movs	r1, #13
    16c4:	2004      	movs	r0, #4
    16c6:	f001 ff3d 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 14, gpioModeDisabled, 0 );
    16ca:	2300      	movs	r3, #0
    16cc:	2200      	movs	r2, #0
    16ce:	210e      	movs	r1, #14
    16d0:	2004      	movs	r0, #4
    16d2:	f001 ff37 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 15, gpioModeDisabled, 0 );
    16d6:	2300      	movs	r3, #0
    16d8:	2200      	movs	r2, #0
    16da:	210f      	movs	r1, #15
    16dc:	2004      	movs	r0, #4
    16de:	f001 ff31 	bl	3544 <GPIO_PinModeSet>

  /* EBI ARDY/WEN/REN/ALE */
  GPIO_PinModeSet( gpioPortF,  2, gpioModeDisabled, 0 );
    16e2:	2300      	movs	r3, #0
    16e4:	2200      	movs	r2, #0
    16e6:	2102      	movs	r1, #2
    16e8:	2005      	movs	r0, #5
    16ea:	f001 ff2b 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortF,  8, gpioModeDisabled, 0 );
    16ee:	2300      	movs	r3, #0
    16f0:	2200      	movs	r2, #0
    16f2:	2108      	movs	r1, #8
    16f4:	2005      	movs	r0, #5
    16f6:	f001 ff25 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortF,  9, gpioModeDisabled, 0 );
    16fa:	2300      	movs	r3, #0
    16fc:	2200      	movs	r2, #0
    16fe:	2109      	movs	r1, #9
    1700:	2005      	movs	r0, #5
    1702:	f001 ff1f 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortC, 11, gpioModeDisabled, 0 );
    1706:	2300      	movs	r3, #0
    1708:	2200      	movs	r2, #0
    170a:	210b      	movs	r1, #11
    170c:	2002      	movs	r0, #2
    170e:	f001 ff19 	bl	3544 <GPIO_PinModeSet>

  /* EBI Byte Lane 0 support BL0/BL1 */
  GPIO_PinModeSet( gpioPortF,  6, gpioModeDisabled, 0 );
    1712:	2300      	movs	r3, #0
    1714:	2200      	movs	r2, #0
    1716:	2106      	movs	r1, #6
    1718:	2005      	movs	r0, #5
    171a:	f001 ff13 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortF,  7, gpioModeDisabled, 0 );
    171e:	2300      	movs	r3, #0
    1720:	2200      	movs	r2, #0
    1722:	2107      	movs	r1, #7
    1724:	2005      	movs	r0, #5
    1726:	f001 ff0d 	bl	3544 <GPIO_PinModeSet>

#endif

  /* Reset EBI configuration */
  EBI_Disable();
    172a:	f001 fb9d 	bl	2e68 <EBI_Disable>

  /* Turn off EBI clock */
  CMU_ClockEnable(cmuClock_EBI, false);
    172e:	2100      	movs	r1, #0
    1730:	4802      	ldr	r0, [pc, #8]	; (173c <EbiDisable+0x1a0>)
    1732:	f000 ffb9 	bl	26a8 <CMU_ClockEnable>
}
    1736:	bf00      	nop
    1738:	bd08      	pop	{r3, pc}
    173a:	bf00      	nop
    173c:	00025300 	.word	0x00025300

00001740 <EbiInit>:
 *    - 0x88000000: PSRAM external memory (Micron MT45W2MW16PGA-70 IT)
 *    - 0x8c000000: NOR flash (Spansion flash S29GLxxx_FBGA)
 * @return true if successful, false if board controller access failed
 *****************************************************************************/
static bool EbiInit(void)
{
    1740:	b500      	push	{lr}
    1742:	b095      	sub	sp, #84	; 0x54
  EBI_Init_TypeDef ebiConfig = EBI_INIT_DEFAULT;
    1744:	466b      	mov	r3, sp
    1746:	2250      	movs	r2, #80	; 0x50
    1748:	2100      	movs	r1, #0
    174a:	4618      	mov	r0, r3
    174c:	f002 ffde 	bl	470c <memset>
    1750:	2302      	movs	r3, #2
    1752:	9303      	str	r3, [sp, #12]
    1754:	2302      	movs	r3, #2
    1756:	9304      	str	r3, [sp, #16]
    1758:	2301      	movs	r3, #1
    175a:	9306      	str	r3, [sp, #24]
    175c:	2301      	movs	r3, #1
    175e:	930e      	str	r3, [sp, #56]	; 0x38
    1760:	2301      	movs	r3, #1
    1762:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c

  /* Enable clocks */
  CMU_ClockEnable(cmuClock_EBI, true);
    1766:	2101      	movs	r1, #1
    1768:	48c0      	ldr	r0, [pc, #768]	; (1a6c <EbiInit+0x32c>)
    176a:	f000 ff9d 	bl	26a8 <CMU_ClockEnable>
  CMU_ClockEnable(cmuClock_GPIO, true);
    176e:	2101      	movs	r1, #1
    1770:	48bf      	ldr	r0, [pc, #764]	; (1a70 <EbiInit+0x330>)
    1772:	f000 ff99 	bl	26a8 <CMU_ClockEnable>

  /* Giant or Leopard family. */

  /* Configure GPIO pins as push pull */
  /* EBI AD9..15 */
  GPIO_PinModeSet( gpioPortA,  0, gpioModePushPull, 0 );
    1776:	2300      	movs	r3, #0
    1778:	2204      	movs	r2, #4
    177a:	2100      	movs	r1, #0
    177c:	2000      	movs	r0, #0
    177e:	f001 fee1 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  1, gpioModePushPull, 0 );
    1782:	2300      	movs	r3, #0
    1784:	2204      	movs	r2, #4
    1786:	2101      	movs	r1, #1
    1788:	2000      	movs	r0, #0
    178a:	f001 fedb 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  2, gpioModePushPull, 0 );
    178e:	2300      	movs	r3, #0
    1790:	2204      	movs	r2, #4
    1792:	2102      	movs	r1, #2
    1794:	2000      	movs	r0, #0
    1796:	f001 fed5 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  3, gpioModePushPull, 0 );
    179a:	2300      	movs	r3, #0
    179c:	2204      	movs	r2, #4
    179e:	2103      	movs	r1, #3
    17a0:	2000      	movs	r0, #0
    17a2:	f001 fecf 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  4, gpioModePushPull, 0 );
    17a6:	2300      	movs	r3, #0
    17a8:	2204      	movs	r2, #4
    17aa:	2104      	movs	r1, #4
    17ac:	2000      	movs	r0, #0
    17ae:	f001 fec9 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  5, gpioModePushPull, 0 );
    17b2:	2300      	movs	r3, #0
    17b4:	2204      	movs	r2, #4
    17b6:	2105      	movs	r1, #5
    17b8:	2000      	movs	r0, #0
    17ba:	f001 fec3 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortA,  6, gpioModePushPull, 0 );
    17be:	2300      	movs	r3, #0
    17c0:	2204      	movs	r2, #4
    17c2:	2106      	movs	r1, #6
    17c4:	2000      	movs	r0, #0
    17c6:	f001 febd 	bl	3544 <GPIO_PinModeSet>

  /* EBI AD8 */
  GPIO_PinModeSet( gpioPortA, 15, gpioModePushPull, 0 );
    17ca:	2300      	movs	r3, #0
    17cc:	2204      	movs	r2, #4
    17ce:	210f      	movs	r1, #15
    17d0:	2000      	movs	r0, #0
    17d2:	f001 feb7 	bl	3544 <GPIO_PinModeSet>

  /* EBI A16-A22 */
  GPIO_PinModeSet( gpioPortB,  0, gpioModePushPull, 0 );
    17d6:	2300      	movs	r3, #0
    17d8:	2204      	movs	r2, #4
    17da:	2100      	movs	r1, #0
    17dc:	2001      	movs	r0, #1
    17de:	f001 feb1 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  1, gpioModePushPull, 0 );
    17e2:	2300      	movs	r3, #0
    17e4:	2204      	movs	r2, #4
    17e6:	2101      	movs	r1, #1
    17e8:	2001      	movs	r0, #1
    17ea:	f001 feab 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  2, gpioModePushPull, 0 );
    17ee:	2300      	movs	r3, #0
    17f0:	2204      	movs	r2, #4
    17f2:	2102      	movs	r1, #2
    17f4:	2001      	movs	r0, #1
    17f6:	f001 fea5 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  3, gpioModePushPull, 0 );
    17fa:	2300      	movs	r3, #0
    17fc:	2204      	movs	r2, #4
    17fe:	2103      	movs	r1, #3
    1800:	2001      	movs	r0, #1
    1802:	f001 fe9f 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  4, gpioModePushPull, 0 );
    1806:	2300      	movs	r3, #0
    1808:	2204      	movs	r2, #4
    180a:	2104      	movs	r1, #4
    180c:	2001      	movs	r0, #1
    180e:	f001 fe99 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  5, gpioModePushPull, 0 );
    1812:	2300      	movs	r3, #0
    1814:	2204      	movs	r2, #4
    1816:	2105      	movs	r1, #5
    1818:	2001      	movs	r0, #1
    181a:	f001 fe93 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortB,  6, gpioModePushPull, 0 );
    181e:	2300      	movs	r3, #0
    1820:	2204      	movs	r2, #4
    1822:	2106      	movs	r1, #6
    1824:	2001      	movs	r0, #1
    1826:	f001 fe8d 	bl	3544 <GPIO_PinModeSet>

  /* EBI CS0-CS3 */
  GPIO_PinModeSet( gpioPortD,  9, gpioModePushPull, 1 );
    182a:	2301      	movs	r3, #1
    182c:	2204      	movs	r2, #4
    182e:	2109      	movs	r1, #9
    1830:	2003      	movs	r0, #3
    1832:	f001 fe87 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortD, 10, gpioModePushPull, 1 );
    1836:	2301      	movs	r3, #1
    1838:	2204      	movs	r2, #4
    183a:	210a      	movs	r1, #10
    183c:	2003      	movs	r0, #3
    183e:	f001 fe81 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortD, 11, gpioModePushPull, 1 );
    1842:	2301      	movs	r3, #1
    1844:	2204      	movs	r2, #4
    1846:	210b      	movs	r1, #11
    1848:	2003      	movs	r0, #3
    184a:	f001 fe7b 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortD, 12, gpioModePushPull, 1 );
    184e:	2301      	movs	r3, #1
    1850:	2204      	movs	r2, #4
    1852:	210c      	movs	r1, #12
    1854:	2003      	movs	r0, #3
    1856:	f001 fe75 	bl	3544 <GPIO_PinModeSet>

  /* EBI AD0..7 */
  GPIO_PinModeSet( gpioPortE,  8, gpioModePushPull, 0 );
    185a:	2300      	movs	r3, #0
    185c:	2204      	movs	r2, #4
    185e:	2108      	movs	r1, #8
    1860:	2004      	movs	r0, #4
    1862:	f001 fe6f 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE,  9, gpioModePushPull, 0 );
    1866:	2300      	movs	r3, #0
    1868:	2204      	movs	r2, #4
    186a:	2109      	movs	r1, #9
    186c:	2004      	movs	r0, #4
    186e:	f001 fe69 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 10, gpioModePushPull, 0 );
    1872:	2300      	movs	r3, #0
    1874:	2204      	movs	r2, #4
    1876:	210a      	movs	r1, #10
    1878:	2004      	movs	r0, #4
    187a:	f001 fe63 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 11, gpioModePushPull, 0 );
    187e:	2300      	movs	r3, #0
    1880:	2204      	movs	r2, #4
    1882:	210b      	movs	r1, #11
    1884:	2004      	movs	r0, #4
    1886:	f001 fe5d 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 12, gpioModePushPull, 0 );
    188a:	2300      	movs	r3, #0
    188c:	2204      	movs	r2, #4
    188e:	210c      	movs	r1, #12
    1890:	2004      	movs	r0, #4
    1892:	f001 fe57 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 13, gpioModePushPull, 0 );
    1896:	2300      	movs	r3, #0
    1898:	2204      	movs	r2, #4
    189a:	210d      	movs	r1, #13
    189c:	2004      	movs	r0, #4
    189e:	f001 fe51 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 14, gpioModePushPull, 0 );
    18a2:	2300      	movs	r3, #0
    18a4:	2204      	movs	r2, #4
    18a6:	210e      	movs	r1, #14
    18a8:	2004      	movs	r0, #4
    18aa:	f001 fe4b 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortE, 15, gpioModePushPull, 0 );
    18ae:	2300      	movs	r3, #0
    18b0:	2204      	movs	r2, #4
    18b2:	210f      	movs	r1, #15
    18b4:	2004      	movs	r0, #4
    18b6:	f001 fe45 	bl	3544 <GPIO_PinModeSet>

  /* EBI ARDY/WEN/REN/ALE */
  GPIO_PinModeSet( gpioPortF,  2, gpioModeInput,    0 );
    18ba:	2300      	movs	r3, #0
    18bc:	2201      	movs	r2, #1
    18be:	2102      	movs	r1, #2
    18c0:	2005      	movs	r0, #5
    18c2:	f001 fe3f 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortF,  8, gpioModePushPull, 0 );
    18c6:	2300      	movs	r3, #0
    18c8:	2204      	movs	r2, #4
    18ca:	2108      	movs	r1, #8
    18cc:	2005      	movs	r0, #5
    18ce:	f001 fe39 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortF,  9, gpioModePushPull, 0 );
    18d2:	2300      	movs	r3, #0
    18d4:	2204      	movs	r2, #4
    18d6:	2109      	movs	r1, #9
    18d8:	2005      	movs	r0, #5
    18da:	f001 fe33 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortC, 11, gpioModePushPull, 0 );
    18de:	2300      	movs	r3, #0
    18e0:	2204      	movs	r2, #4
    18e2:	210b      	movs	r1, #11
    18e4:	2002      	movs	r0, #2
    18e6:	f001 fe2d 	bl	3544 <GPIO_PinModeSet>

  /* EBI Byte Lane 0 support BL0/BL1 */
  GPIO_PinModeSet( gpioPortF, 6, gpioModePushPull, 0 );
    18ea:	2300      	movs	r3, #0
    18ec:	2204      	movs	r2, #4
    18ee:	2106      	movs	r1, #6
    18f0:	2005      	movs	r0, #5
    18f2:	f001 fe27 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet( gpioPortF, 7, gpioModePushPull, 0 );
    18f6:	2300      	movs	r3, #0
    18f8:	2204      	movs	r2, #4
    18fa:	2107      	movs	r1, #7
    18fc:	2005      	movs	r0, #5
    18fe:	f001 fe21 	bl	3544 <GPIO_PinModeSet>

  /* ---------------------------------------------------- */
  /* External 4MB PSRAM, Bank 2, Base Address 0x88000000  */
  /* Micron MT45W2MW16PGA-70 IT, 32Mb Cellular RAM        */
  /* ---------------------------------------------------- */
  ebiConfig.banks        = EBI_BANK2;
    1902:	2308      	movs	r3, #8
    1904:	9303      	str	r3, [sp, #12]
  ebiConfig.csLines      = EBI_CS2;
    1906:	2308      	movs	r3, #8
    1908:	9304      	str	r3, [sp, #16]
  ebiConfig.mode         = ebiModeD16A16ALE;
    190a:	2301      	movs	r3, #1
    190c:	f88d 3000 	strb.w	r3, [sp]
  ebiConfig.alePolarity  = ebiActiveHigh;
    1910:	2301      	movs	r3, #1
    1912:	f88d 3002 	strb.w	r3, [sp, #2]
  ebiConfig.blEnable     = true;
    1916:	2301      	movs	r3, #1
    1918:	f88d 3007 	strb.w	r3, [sp, #7]
  ebiConfig.noIdle       = true;
    191c:	2301      	movs	r3, #1
    191e:	f88d 3008 	strb.w	r3, [sp, #8]
  ebiConfig.ardyEnable   = false;
    1922:	2300      	movs	r3, #0
    1924:	f88d 3009 	strb.w	r3, [sp, #9]
  ebiConfig.addrHalfALE  = true;
    1928:	2301      	movs	r3, #1
    192a:	f88d 301c 	strb.w	r3, [sp, #28]
  ebiConfig.readPrefetch = true;
    192e:	2301      	movs	r3, #1
    1930:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  ebiConfig.aLow         = ebiALowA16;
    1934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1938:	9310      	str	r3, [sp, #64]	; 0x40
  ebiConfig.aHigh        = ebiAHighA23;
    193a:	f44f 03b8 	mov.w	r3, #6029312	; 0x5c0000
    193e:	9311      	str	r3, [sp, #68]	; 0x44
  ebiConfig.location     = ebiLocation1;
    1940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1944:	9312      	str	r3, [sp, #72]	; 0x48

  /* Address Setup and hold time */
  ebiConfig.addrHoldCycles  = 0;
    1946:	2300      	movs	r3, #0
    1948:	9306      	str	r3, [sp, #24]
  ebiConfig.addrSetupCycles = 0;
    194a:	2300      	movs	r3, #0
    194c:	9305      	str	r3, [sp, #20]

  /* Read cycle times */
  ebiConfig.readStrobeCycles = 4;
    194e:	2304      	movs	r3, #4
    1950:	9309      	str	r3, [sp, #36]	; 0x24
  ebiConfig.readHoldCycles   = 0;
    1952:	2300      	movs	r3, #0
    1954:	930a      	str	r3, [sp, #40]	; 0x28
  ebiConfig.readSetupCycles  = 0;
    1956:	2300      	movs	r3, #0
    1958:	9308      	str	r3, [sp, #32]

  /* Write cycle times */
  ebiConfig.writeStrobeCycles = 2;
    195a:	2302      	movs	r3, #2
    195c:	930d      	str	r3, [sp, #52]	; 0x34
  ebiConfig.writeHoldCycles   = 0;
    195e:	2300      	movs	r3, #0
    1960:	930e      	str	r3, [sp, #56]	; 0x38
  ebiConfig.writeSetupCycles  = 0;
    1962:	2300      	movs	r3, #0
    1964:	930c      	str	r3, [sp, #48]	; 0x30

  /* Configure EBI bank 2 - external PSRAM */
  EBI_Init(&ebiConfig);
    1966:	466b      	mov	r3, sp
    1968:	4618      	mov	r0, r3
    196a:	f001 f8d1 	bl	2b10 <EBI_Init>

  /* --------------------------------------------------------- */
  /* Board Control Registers, Bank 0, Base Address 0x80000000  */
  /* FPGA Xilinx Spartan XC6SLX9 CSG324                        */
  /* --------------------------------------------------------- */
  ebiConfig.banks       = EBI_BANK0;
    196e:	2302      	movs	r3, #2
    1970:	9303      	str	r3, [sp, #12]
  ebiConfig.csLines     = EBI_CS0;
    1972:	2302      	movs	r3, #2
    1974:	9304      	str	r3, [sp, #16]
  ebiConfig.mode        = ebiModeD16A16ALE;;
    1976:	2301      	movs	r3, #1
    1978:	f88d 3000 	strb.w	r3, [sp]
  ebiConfig.alePolarity = ebiActiveHigh;
    197c:	2301      	movs	r3, #1
    197e:	f88d 3002 	strb.w	r3, [sp, #2]
  /* keep blEnable */
  ebiConfig.blEnable     = false;
    1982:	2300      	movs	r3, #0
    1984:	f88d 3007 	strb.w	r3, [sp, #7]
  ebiConfig.addrHalfALE  = true;
    1988:	2301      	movs	r3, #1
    198a:	f88d 301c 	strb.w	r3, [sp, #28]
  ebiConfig.readPrefetch = false;
    198e:	2300      	movs	r3, #0
    1990:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  ebiConfig.noIdle       = true;
    1994:	2301      	movs	r3, #1
    1996:	f88d 3008 	strb.w	r3, [sp, #8]
  /* keep alow/ahigh configuration */
  /* ebiConfig.aLow = ebiALowA0; - needs to be set for PSRAM */
  /* ebiConfig.aHigh = ebiAHighA0; - needs to be set for PSRAM */

  /* Address Setup and hold time */
  ebiConfig.addrHoldCycles  = 3;
    199a:	2303      	movs	r3, #3
    199c:	9306      	str	r3, [sp, #24]
  ebiConfig.addrSetupCycles = 3;
    199e:	2303      	movs	r3, #3
    19a0:	9305      	str	r3, [sp, #20]

  /* Read cycle times */
  ebiConfig.readStrobeCycles = 7;
    19a2:	2307      	movs	r3, #7
    19a4:	9309      	str	r3, [sp, #36]	; 0x24
  ebiConfig.readHoldCycles   = 3;
    19a6:	2303      	movs	r3, #3
    19a8:	930a      	str	r3, [sp, #40]	; 0x28
  ebiConfig.readSetupCycles  = 3;
    19aa:	2303      	movs	r3, #3
    19ac:	9308      	str	r3, [sp, #32]

  /* Write cycle times */
  ebiConfig.writeStrobeCycles = 7;
    19ae:	2307      	movs	r3, #7
    19b0:	930d      	str	r3, [sp, #52]	; 0x34
  ebiConfig.writeHoldCycles   = 3;
    19b2:	2303      	movs	r3, #3
    19b4:	930e      	str	r3, [sp, #56]	; 0x38
  ebiConfig.writeSetupCycles  = 3;
    19b6:	2303      	movs	r3, #3
    19b8:	930c      	str	r3, [sp, #48]	; 0x30

  /* Configure EBI bank 0 */
  EBI_Init(&ebiConfig);
    19ba:	466b      	mov	r3, sp
    19bc:	4618      	mov	r0, r3
    19be:	f001 f8a7 	bl	2b10 <EBI_Init>
  /* ----------------------------------------------------- */
  /* TFT-LCD Registers, Bank1, Base Address 0x84000000     */
  /* URT USMH_8252MD_320X240_RGB                           */
  /* Solomon Systech SSD 2119                              */
  /* ----------------------------------------------------- */
  ebiConfig.banks   = EBI_BANK1;
    19c2:	2304      	movs	r3, #4
    19c4:	9303      	str	r3, [sp, #12]
  ebiConfig.csLines = EBI_CS1;
    19c6:	2304      	movs	r3, #4
    19c8:	9304      	str	r3, [sp, #16]

  /* Address Setup and hold time */
  ebiConfig.addrHoldCycles  = 1;
    19ca:	2301      	movs	r3, #1
    19cc:	9306      	str	r3, [sp, #24]
  ebiConfig.addrSetupCycles = 1;
    19ce:	2301      	movs	r3, #1
    19d0:	9305      	str	r3, [sp, #20]

  /* Read cycle times */
  ebiConfig.readStrobeCycles = 7;
    19d2:	2307      	movs	r3, #7
    19d4:	9309      	str	r3, [sp, #36]	; 0x24
  ebiConfig.readHoldCycles   = 3;
    19d6:	2303      	movs	r3, #3
    19d8:	930a      	str	r3, [sp, #40]	; 0x28
  ebiConfig.readSetupCycles  = 3;
    19da:	2303      	movs	r3, #3
    19dc:	9308      	str	r3, [sp, #32]

  /* Write cycle times */
  ebiConfig.writeStrobeCycles = 2;
    19de:	2302      	movs	r3, #2
    19e0:	930d      	str	r3, [sp, #52]	; 0x34
  ebiConfig.writeHoldCycles   = 1;
    19e2:	2301      	movs	r3, #1
    19e4:	930e      	str	r3, [sp, #56]	; 0x38
  ebiConfig.writeSetupCycles  = 1;
    19e6:	2301      	movs	r3, #1
    19e8:	930c      	str	r3, [sp, #48]	; 0x30

  /* Configure EBI bank 1 */
  EBI_Init(&ebiConfig);
    19ea:	466b      	mov	r3, sp
    19ec:	4618      	mov	r0, r3
    19ee:	f001 f88f 	bl	2b10 <EBI_Init>

  /* ----------------------------------------- */
  /* NOR Flash, Bank3, Base Address 0x8c000000 */
  /* Spansion flash S29GLxxx_FBGA              */
  /* ----------------------------------------- */
  ebiConfig.banks       = EBI_BANK3;
    19f2:	2310      	movs	r3, #16
    19f4:	9303      	str	r3, [sp, #12]
  ebiConfig.csLines     = EBI_CS3;
    19f6:	2310      	movs	r3, #16
    19f8:	9304      	str	r3, [sp, #16]
  ebiConfig.mode        = ebiModeD16A16ALE;
    19fa:	2301      	movs	r3, #1
    19fc:	f88d 3000 	strb.w	r3, [sp]
  ebiConfig.alePolarity = ebiActiveHigh;
    1a00:	2301      	movs	r3, #1
    1a02:	f88d 3002 	strb.w	r3, [sp, #2]

  /* keep blEnable */
  ebiConfig.blEnable     = true;
    1a06:	2301      	movs	r3, #1
    1a08:	f88d 3007 	strb.w	r3, [sp, #7]
  ebiConfig.addrHalfALE  = true;
    1a0c:	2301      	movs	r3, #1
    1a0e:	f88d 301c 	strb.w	r3, [sp, #28]
  ebiConfig.readPrefetch = false;
    1a12:	2300      	movs	r3, #0
    1a14:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  ebiConfig.noIdle       = true;
    1a18:	2301      	movs	r3, #1
    1a1a:	f88d 3008 	strb.w	r3, [sp, #8]

  /* Address Setup and hold time */
  ebiConfig.addrHoldCycles  = 0;
    1a1e:	2300      	movs	r3, #0
    1a20:	9306      	str	r3, [sp, #24]
  ebiConfig.addrSetupCycles = 0;
    1a22:	2300      	movs	r3, #0
    1a24:	9305      	str	r3, [sp, #20]

  /* Read cycle times */
  ebiConfig.readStrobeCycles = 6;
    1a26:	2306      	movs	r3, #6
    1a28:	9309      	str	r3, [sp, #36]	; 0x24
  ebiConfig.readHoldCycles   = 0;
    1a2a:	2300      	movs	r3, #0
    1a2c:	930a      	str	r3, [sp, #40]	; 0x28
  ebiConfig.readSetupCycles  = 0;
    1a2e:	2300      	movs	r3, #0
    1a30:	9308      	str	r3, [sp, #32]

  /* Write cycle times */
  ebiConfig.writeStrobeCycles = 5;
    1a32:	2305      	movs	r3, #5
    1a34:	930d      	str	r3, [sp, #52]	; 0x34
  ebiConfig.writeHoldCycles   = 0;
    1a36:	2300      	movs	r3, #0
    1a38:	930e      	str	r3, [sp, #56]	; 0x38
  ebiConfig.writeSetupCycles  = 0;
    1a3a:	2300      	movs	r3, #0
    1a3c:	930c      	str	r3, [sp, #48]	; 0x30

  /* Configure EBI bank 3 */
  EBI_Init(&ebiConfig);
    1a3e:	466b      	mov	r3, sp
    1a40:	4618      	mov	r0, r3
    1a42:	f001 f865 	bl	2b10 <EBI_Init>

  /* Enable extended address range */
  BSP_EbiExtendedAddressRange(true);
    1a46:	2001      	movs	r0, #1
    1a48:	f7ff fb4e 	bl	10e8 <BSP_EbiExtendedAddressRange>
#endif

  /* Verify connectivity to Board Control registers */
  if (BC_REGISTER->MAGIC != 0xef32)
    1a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    1a50:	889b      	ldrh	r3, [r3, #4]
    1a52:	b29b      	uxth	r3, r3
    1a54:	f64e 7232 	movw	r2, #61234	; 0xef32
    1a58:	4293      	cmp	r3, r2
    1a5a:	d001      	beq.n	1a60 <EbiInit+0x320>
  {
    return false;
    1a5c:	2300      	movs	r3, #0
    1a5e:	e000      	b.n	1a62 <EbiInit+0x322>
  }
  else
  {
    return true;
    1a60:	2301      	movs	r3, #1
  }
}
    1a62:	4618      	mov	r0, r3
    1a64:	b015      	add	sp, #84	; 0x54
    1a66:	f85d fb04 	ldr.w	pc, [sp], #4
    1a6a:	bf00      	nop
    1a6c:	00025300 	.word	0x00025300
    1a70:	0004d200 	.word	0x0004d200

00001a74 <SpiBcAccess>:

static uint16_t SpiBcAccess(uint8_t addr, uint8_t rw, uint16_t data)
{
    1a74:	b500      	push	{lr}
    1a76:	b085      	sub	sp, #20
    1a78:	4603      	mov	r3, r0
    1a7a:	f88d 3007 	strb.w	r3, [sp, #7]
    1a7e:	460b      	mov	r3, r1
    1a80:	f88d 3006 	strb.w	r3, [sp, #6]
    1a84:	4613      	mov	r3, r2
    1a86:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint16_t tmp;

  /* Enable CS */
  GPIO_PinOutClear(BSP_PORT_SPI_CS, BSP_PIN_SPI_CS);
    1a8a:	2105      	movs	r1, #5
    1a8c:	2002      	movs	r0, #2
    1a8e:	f7ff fa0d 	bl	eac <GPIO_PinOutClear>

  /* Write SPI address MSB */
  USART_Tx(BSP_SPI_USART_USED, (addr & 0x3) | rw << 3);
    1a92:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    1a96:	f003 0303 	and.w	r3, r3, #3
    1a9a:	b25a      	sxtb	r2, r3
    1a9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1aa0:	00db      	lsls	r3, r3, #3
    1aa2:	b25b      	sxtb	r3, r3
    1aa4:	4313      	orrs	r3, r2
    1aa6:	b25b      	sxtb	r3, r3
    1aa8:	b2db      	uxtb	r3, r3
    1aaa:	4619      	mov	r1, r3
    1aac:	4818      	ldr	r0, [pc, #96]	; (1b10 <SpiBcAccess+0x9c>)
    1aae:	f001 fff3 	bl	3a98 <USART_Tx>
  /* Just ignore data read back */
  USART_Rx(BSP_SPI_USART_USED);
    1ab2:	4817      	ldr	r0, [pc, #92]	; (1b10 <SpiBcAccess+0x9c>)
    1ab4:	f001 ffe0 	bl	3a78 <USART_Rx>

  /* Write SPI address  LSB */
  USART_Tx(BSP_SPI_USART_USED, data & 0xFF);
    1ab8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    1abc:	b2db      	uxtb	r3, r3
    1abe:	4619      	mov	r1, r3
    1ac0:	4813      	ldr	r0, [pc, #76]	; (1b10 <SpiBcAccess+0x9c>)
    1ac2:	f001 ffe9 	bl	3a98 <USART_Tx>

  tmp = (uint16_t) USART_Rx(BSP_SPI_USART_USED);
    1ac6:	4812      	ldr	r0, [pc, #72]	; (1b10 <SpiBcAccess+0x9c>)
    1ac8:	f001 ffd6 	bl	3a78 <USART_Rx>
    1acc:	4603      	mov	r3, r0
    1ace:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* SPI data MSB */
  USART_Tx(BSP_SPI_USART_USED, data >> 8);
    1ad2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    1ad6:	0a1b      	lsrs	r3, r3, #8
    1ad8:	b29b      	uxth	r3, r3
    1ada:	b2db      	uxtb	r3, r3
    1adc:	4619      	mov	r1, r3
    1ade:	480c      	ldr	r0, [pc, #48]	; (1b10 <SpiBcAccess+0x9c>)
    1ae0:	f001 ffda 	bl	3a98 <USART_Tx>
  tmp |= (uint16_t) USART_Rx(BSP_SPI_USART_USED) << 8;
    1ae4:	480a      	ldr	r0, [pc, #40]	; (1b10 <SpiBcAccess+0x9c>)
    1ae6:	f001 ffc7 	bl	3a78 <USART_Rx>
    1aea:	4603      	mov	r3, r0
    1aec:	021b      	lsls	r3, r3, #8
    1aee:	b21a      	sxth	r2, r3
    1af0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
    1af4:	4313      	orrs	r3, r2
    1af6:	b21b      	sxth	r3, r3
    1af8:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Disable CS */
  GPIO_PinOutSet(BSP_PORT_SPI_CS, BSP_PIN_SPI_CS);
    1afc:	2105      	movs	r1, #5
    1afe:	2002      	movs	r0, #2
    1b00:	f7ff fa04 	bl	f0c <GPIO_PinOutSet>

  return tmp;
    1b04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    1b08:	4618      	mov	r0, r3
    1b0a:	b005      	add	sp, #20
    1b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    1b10:	4000c800 	.word	0x4000c800

00001b14 <SpiBcDisable>:

static void SpiBcDisable(void)
{
    1b14:	b508      	push	{r3, lr}
  /* Restore and disable USART */
  USART_Reset(BSP_SPI_USART_USED);
    1b16:	4810      	ldr	r0, [pc, #64]	; (1b58 <SpiBcDisable+0x44>)
    1b18:	f001 ff5a 	bl	39d0 <USART_Reset>

  GPIO_PinModeSet(BSP_PORT_SPI_TX, BSP_PIN_SPI_TX, gpioModeDisabled, 0);
    1b1c:	2300      	movs	r3, #0
    1b1e:	2200      	movs	r2, #0
    1b20:	2102      	movs	r1, #2
    1b22:	2002      	movs	r0, #2
    1b24:	f001 fd0e 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet(BSP_PORT_SPI_RX, BSP_PIN_SPI_RX, gpioModeDisabled, 0);
    1b28:	2300      	movs	r3, #0
    1b2a:	2200      	movs	r2, #0
    1b2c:	2103      	movs	r1, #3
    1b2e:	2002      	movs	r0, #2
    1b30:	f001 fd08 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet(BSP_PORT_SPI_CLK, BSP_PIN_SPI_CLK, gpioModeDisabled, 0);
    1b34:	2300      	movs	r3, #0
    1b36:	2200      	movs	r2, #0
    1b38:	2104      	movs	r1, #4
    1b3a:	2002      	movs	r0, #2
    1b3c:	f001 fd02 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet(BSP_PORT_SPI_CS, BSP_PIN_SPI_CS, gpioModeDisabled, 0);
    1b40:	2300      	movs	r3, #0
    1b42:	2200      	movs	r2, #0
    1b44:	2105      	movs	r1, #5
    1b46:	2002      	movs	r0, #2
    1b48:	f001 fcfc 	bl	3544 <GPIO_PinModeSet>

  /* Disable USART clock - we can't disable GPIO or HFPER as we don't know who else
   * might be using it */
  CMU_ClockEnable(BSP_SPI_USART_CLK, false);
    1b4c:	2100      	movs	r1, #0
    1b4e:	4803      	ldr	r0, [pc, #12]	; (1b5c <SpiBcDisable+0x48>)
    1b50:	f000 fdaa 	bl	26a8 <CMU_ClockEnable>
}
    1b54:	bf00      	nop
    1b56:	bd08      	pop	{r3, pc}
    1b58:	4000c800 	.word	0x4000c800
    1b5c:	00042200 	.word	0x00042200

00001b60 <SpiBcInit>:

static void SpiBcInit(void)
{
    1b60:	b530      	push	{r4, r5, lr}
    1b62:	b087      	sub	sp, #28
  USART_InitSync_TypeDef bcinit = USART_INITSYNC_DEFAULT;
    1b64:	4b19      	ldr	r3, [pc, #100]	; (1bcc <SpiBcInit+0x6c>)
    1b66:	466c      	mov	r4, sp
    1b68:	461d      	mov	r5, r3
    1b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1b6e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1b72:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Enable module clocks */
  CMU_ClockEnable(BSP_SPI_USART_CLK, true);
    1b76:	2101      	movs	r1, #1
    1b78:	4815      	ldr	r0, [pc, #84]	; (1bd0 <SpiBcInit+0x70>)
    1b7a:	f000 fd95 	bl	26a8 <CMU_ClockEnable>

  /* Configure SPI pins */
  GPIO_PinModeSet(BSP_PORT_SPI_TX, BSP_PIN_SPI_TX, gpioModePushPull, 0);
    1b7e:	2300      	movs	r3, #0
    1b80:	2204      	movs	r2, #4
    1b82:	2102      	movs	r1, #2
    1b84:	2002      	movs	r0, #2
    1b86:	f001 fcdd 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet(BSP_PORT_SPI_RX, BSP_PIN_SPI_RX, gpioModeInput, 0);
    1b8a:	2300      	movs	r3, #0
    1b8c:	2201      	movs	r2, #1
    1b8e:	2103      	movs	r1, #3
    1b90:	2002      	movs	r0, #2
    1b92:	f001 fcd7 	bl	3544 <GPIO_PinModeSet>
  GPIO_PinModeSet(BSP_PORT_SPI_CLK, BSP_PIN_SPI_CLK, gpioModePushPull, 0);
    1b96:	2300      	movs	r3, #0
    1b98:	2204      	movs	r2, #4
    1b9a:	2104      	movs	r1, #4
    1b9c:	2002      	movs	r0, #2
    1b9e:	f001 fcd1 	bl	3544 <GPIO_PinModeSet>

  /* Keep CS high to not activate slave */
  GPIO_PinModeSet(BSP_PORT_SPI_CS, BSP_PIN_SPI_CS, gpioModePushPull, 1);
    1ba2:	2301      	movs	r3, #1
    1ba4:	2204      	movs	r2, #4
    1ba6:	2105      	movs	r1, #5
    1ba8:	2002      	movs	r0, #2
    1baa:	f001 fccb 	bl	3544 <GPIO_PinModeSet>
  /* for all configurations. */

  #if defined(_EFM32_GECKO_FAMILY)
    bcinit.refFreq  = 32000000;
  #else
    bcinit.refFreq  = 48000000;
    1bae:	4b09      	ldr	r3, [pc, #36]	; (1bd4 <SpiBcInit+0x74>)
    1bb0:	9301      	str	r3, [sp, #4]
  #endif
  bcinit.baudrate = 7000000;
    1bb2:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <SpiBcInit+0x78>)
    1bb4:	9302      	str	r3, [sp, #8]

  /* Initialize USART */
  USART_InitSync(BSP_SPI_USART_USED, &bcinit);
    1bb6:	466b      	mov	r3, sp
    1bb8:	4619      	mov	r1, r3
    1bba:	4808      	ldr	r0, [pc, #32]	; (1bdc <SpiBcInit+0x7c>)
    1bbc:	f001 fea4 	bl	3908 <USART_InitSync>

  /* Enable pins at default location */
  BSP_SPI_USART_USED->ROUTE = USART_ROUTE_TXPEN | USART_ROUTE_RXPEN | USART_ROUTE_CLKPEN;
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <SpiBcInit+0x7c>)
    1bc2:	220b      	movs	r2, #11
    1bc4:	655a      	str	r2, [r3, #84]	; 0x54
}
    1bc6:	bf00      	nop
    1bc8:	b007      	add	sp, #28
    1bca:	bd30      	pop	{r4, r5, pc}
    1bcc:	00004ff8 	.word	0x00004ff8
    1bd0:	00042200 	.word	0x00042200
    1bd4:	02dc6c00 	.word	0x02dc6c00
    1bd8:	006acfc0 	.word	0x006acfc0
    1bdc:	4000c800 	.word	0x4000c800

00001be0 <SpiControl>:

static void SpiControl(BSP_SpiControl_TypeDef device)
{
    1be0:	b500      	push	{lr}
    1be2:	b083      	sub	sp, #12
    1be4:	4603      	mov	r3, r0
    1be6:	f88d 3007 	strb.w	r3, [sp, #7]
  switch (device)
    1bea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1bee:	2b03      	cmp	r3, #3
    1bf0:	d821      	bhi.n	1c36 <SpiControl+0x56>
    1bf2:	a201      	add	r2, pc, #4	; (adr r2, 1bf8 <SpiControl+0x18>)
    1bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1bf8:	00001c09 	.word	0x00001c09
    1bfc:	00001c13 	.word	0x00001c13
    1c00:	00001c1d 	.word	0x00001c1d
    1c04:	00001c27 	.word	0x00001c27
  {
  case BSP_SPI_Audio:
    BSP_RegisterWrite(&BC_REGISTER->SPI_DEMUX, BC_SPI_DEMUX_SLAVE_AUDIO);
    1c08:	2100      	movs	r1, #0
    1c0a:	480d      	ldr	r0, [pc, #52]	; (1c40 <SpiControl+0x60>)
    1c0c:	f7ff fcaa 	bl	1564 <BSP_RegisterWrite>
    break;
    1c10:	e011      	b.n	1c36 <SpiControl+0x56>

  case BSP_SPI_Ethernet:
    BSP_RegisterWrite(&BC_REGISTER->SPI_DEMUX, BC_SPI_DEMUX_SLAVE_ETHERNET);
    1c12:	2101      	movs	r1, #1
    1c14:	480a      	ldr	r0, [pc, #40]	; (1c40 <SpiControl+0x60>)
    1c16:	f7ff fca5 	bl	1564 <BSP_RegisterWrite>
    break;
    1c1a:	e00c      	b.n	1c36 <SpiControl+0x56>

  case BSP_SPI_Display:
    BSP_RegisterWrite(&BC_REGISTER->SPI_DEMUX, BC_SPI_DEMUX_SLAVE_DISPLAY);
    1c1c:	2102      	movs	r1, #2
    1c1e:	4808      	ldr	r0, [pc, #32]	; (1c40 <SpiControl+0x60>)
    1c20:	f7ff fca0 	bl	1564 <BSP_RegisterWrite>
    break;
    1c24:	e007      	b.n	1c36 <SpiControl+0x56>

  case BSP_SPI_OFF:
    USART_Reset(USART1);
    1c26:	4807      	ldr	r0, [pc, #28]	; (1c44 <SpiControl+0x64>)
    1c28:	f001 fed2 	bl	39d0 <USART_Reset>
    CMU_ClockEnable(cmuClock_USART1, false);
    1c2c:	2100      	movs	r1, #0
    1c2e:	4806      	ldr	r0, [pc, #24]	; (1c48 <SpiControl+0x68>)
    1c30:	f000 fd3a 	bl	26a8 <CMU_ClockEnable>
    break;
    1c34:	bf00      	nop
  }
}
    1c36:	bf00      	nop
    1c38:	b003      	add	sp, #12
    1c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    1c3e:	bf00      	nop
    1c40:	8000001a 	.word	0x8000001a
    1c44:	4000c400 	.word	0x4000c400
    1c48:	00041200 	.word	0x00041200

00001c4c <SpiInit>:

static bool SpiInit(void)
{
    1c4c:	b500      	push	{lr}
    1c4e:	b083      	sub	sp, #12
  uint16_t bcMagic;

  /* Enable HF and GPIO clocks */
  CMU_ClockEnable(cmuClock_HFPER, true);
    1c50:	2101      	movs	r1, #1
    1c52:	480e      	ldr	r0, [pc, #56]	; (1c8c <SpiInit+0x40>)
    1c54:	f000 fd28 	bl	26a8 <CMU_ClockEnable>
  CMU_ClockEnable(cmuClock_GPIO, true);
    1c58:	2101      	movs	r1, #1
    1c5a:	480d      	ldr	r0, [pc, #52]	; (1c90 <SpiInit+0x44>)
    1c5c:	f000 fd24 	bl	26a8 <CMU_ClockEnable>

  SpiBcInit();
    1c60:	f7ff ff7e 	bl	1b60 <SpiBcInit>
  /* Read "board control Magic" register to verify SPI is up and running */
  /*  if not FPGA is configured to be in EBI mode  */
  bcMagic = SpiRegisterRead(&BC_REGISTER->MAGIC);
    1c64:	480b      	ldr	r0, [pc, #44]	; (1c94 <SpiInit+0x48>)
    1c66:	f000 f817 	bl	1c98 <SpiRegisterRead>
    1c6a:	4603      	mov	r3, r0
    1c6c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (bcMagic != BC_MAGIC_VALUE)
    1c70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1c74:	f64e 7232 	movw	r2, #61234	; 0xef32
    1c78:	4293      	cmp	r3, r2
    1c7a:	d001      	beq.n	1c80 <SpiInit+0x34>
  {
    return false;
    1c7c:	2300      	movs	r3, #0
    1c7e:	e000      	b.n	1c82 <SpiInit+0x36>
  }
  else
  {
    return true;
    1c80:	2301      	movs	r3, #1
  }
}
    1c82:	4618      	mov	r0, r3
    1c84:	b003      	add	sp, #12
    1c86:	f85d fb04 	ldr.w	pc, [sp], #4
    1c8a:	bf00      	nop
    1c8c:	00048140 	.word	0x00048140
    1c90:	0004d200 	.word	0x0004d200
    1c94:	80000004 	.word	0x80000004

00001c98 <SpiRegisterRead>:

static uint16_t SpiRegisterRead(volatile uint16_t *addr)
{
    1c98:	b500      	push	{lr}
    1c9a:	b085      	sub	sp, #20
    1c9c:	9001      	str	r0, [sp, #4]
  uint16_t data;

  if (addr != lastAddr)
    1c9e:	4b1d      	ldr	r3, [pc, #116]	; (1d14 <SpiRegisterRead+0x7c>)
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	9a01      	ldr	r2, [sp, #4]
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d01b      	beq.n	1ce0 <SpiRegisterRead+0x48>
  {
    SpiBcAccess(0x00, 0, 0xFFFF & ((uint32_t) addr));           /* LSBs of address */
    1ca8:	9b01      	ldr	r3, [sp, #4]
    1caa:	b29b      	uxth	r3, r3
    1cac:	461a      	mov	r2, r3
    1cae:	2100      	movs	r1, #0
    1cb0:	2000      	movs	r0, #0
    1cb2:	f7ff fedf 	bl	1a74 <SpiBcAccess>
    SpiBcAccess(0x01, 0, 0xFF & ((uint32_t) addr >> 16));       /* MSBs of address */
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	0c1b      	lsrs	r3, r3, #16
    1cba:	b29b      	uxth	r3, r3
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	b29b      	uxth	r3, r3
    1cc0:	461a      	mov	r2, r3
    1cc2:	2100      	movs	r1, #0
    1cc4:	2001      	movs	r0, #1
    1cc6:	f7ff fed5 	bl	1a74 <SpiBcAccess>
    SpiBcAccess(0x02, 0, (0x0C000000 & (uint32_t) addr) >> 26); /* Chip select */
    1cca:	9b01      	ldr	r3, [sp, #4]
    1ccc:	0e9b      	lsrs	r3, r3, #26
    1cce:	b29b      	uxth	r3, r3
    1cd0:	f003 0303 	and.w	r3, r3, #3
    1cd4:	b29b      	uxth	r3, r3
    1cd6:	461a      	mov	r2, r3
    1cd8:	2100      	movs	r1, #0
    1cda:	2002      	movs	r0, #2
    1cdc:	f7ff feca 	bl	1a74 <SpiBcAccess>
  }
  /* Read twice; when register address has changed we need two SPI transfer
   * to clock out valid data through board controller FIFOs */
  data     = SpiBcAccess(0x03, 1, 0);
    1ce0:	2200      	movs	r2, #0
    1ce2:	2101      	movs	r1, #1
    1ce4:	2003      	movs	r0, #3
    1ce6:	f7ff fec5 	bl	1a74 <SpiBcAccess>
    1cea:	4603      	mov	r3, r0
    1cec:	f8ad 300e 	strh.w	r3, [sp, #14]
  data     = SpiBcAccess(0x03, 1, 0);
    1cf0:	2200      	movs	r2, #0
    1cf2:	2101      	movs	r1, #1
    1cf4:	2003      	movs	r0, #3
    1cf6:	f7ff febd 	bl	1a74 <SpiBcAccess>
    1cfa:	4603      	mov	r3, r0
    1cfc:	f8ad 300e 	strh.w	r3, [sp, #14]

  lastAddr = addr;
    1d00:	4a04      	ldr	r2, [pc, #16]	; (1d14 <SpiRegisterRead+0x7c>)
    1d02:	9b01      	ldr	r3, [sp, #4]
    1d04:	6013      	str	r3, [r2, #0]
  return data;
    1d06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    1d0a:	4618      	mov	r0, r3
    1d0c:	b005      	add	sp, #20
    1d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    1d12:	bf00      	nop
    1d14:	2000078c 	.word	0x2000078c

00001d18 <SpiRegisterWrite>:

static void SpiRegisterWrite(volatile uint16_t *addr, uint16_t data)
{
    1d18:	b500      	push	{lr}
    1d1a:	b083      	sub	sp, #12
    1d1c:	9001      	str	r0, [sp, #4]
    1d1e:	460b      	mov	r3, r1
    1d20:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (addr != lastAddr)
    1d24:	4b17      	ldr	r3, [pc, #92]	; (1d84 <SpiRegisterWrite+0x6c>)
    1d26:	681b      	ldr	r3, [r3, #0]
    1d28:	9a01      	ldr	r2, [sp, #4]
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d01b      	beq.n	1d66 <SpiRegisterWrite+0x4e>
  {
    SpiBcAccess(0x00, 0, 0xFFFF & ((uint32_t) addr));           /* LSBs of address */
    1d2e:	9b01      	ldr	r3, [sp, #4]
    1d30:	b29b      	uxth	r3, r3
    1d32:	461a      	mov	r2, r3
    1d34:	2100      	movs	r1, #0
    1d36:	2000      	movs	r0, #0
    1d38:	f7ff fe9c 	bl	1a74 <SpiBcAccess>
    SpiBcAccess(0x01, 0, 0xFF & ((uint32_t) addr >> 16));       /* MSBs of address */
    1d3c:	9b01      	ldr	r3, [sp, #4]
    1d3e:	0c1b      	lsrs	r3, r3, #16
    1d40:	b29b      	uxth	r3, r3
    1d42:	b2db      	uxtb	r3, r3
    1d44:	b29b      	uxth	r3, r3
    1d46:	461a      	mov	r2, r3
    1d48:	2100      	movs	r1, #0
    1d4a:	2001      	movs	r0, #1
    1d4c:	f7ff fe92 	bl	1a74 <SpiBcAccess>
    SpiBcAccess(0x02, 0, (0x0C000000 & (uint32_t) addr) >> 26); /* Chip select */
    1d50:	9b01      	ldr	r3, [sp, #4]
    1d52:	0e9b      	lsrs	r3, r3, #26
    1d54:	b29b      	uxth	r3, r3
    1d56:	f003 0303 	and.w	r3, r3, #3
    1d5a:	b29b      	uxth	r3, r3
    1d5c:	461a      	mov	r2, r3
    1d5e:	2100      	movs	r1, #0
    1d60:	2002      	movs	r0, #2
    1d62:	f7ff fe87 	bl	1a74 <SpiBcAccess>
  }
  SpiBcAccess(0x03, 0, data);                                   /* Data */
    1d66:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1d6a:	461a      	mov	r2, r3
    1d6c:	2100      	movs	r1, #0
    1d6e:	2003      	movs	r0, #3
    1d70:	f7ff fe80 	bl	1a74 <SpiBcAccess>
  lastAddr = addr;
    1d74:	4a03      	ldr	r2, [pc, #12]	; (1d84 <SpiRegisterWrite+0x6c>)
    1d76:	9b01      	ldr	r3, [sp, #4]
    1d78:	6013      	str	r3, [r2, #0]
}
    1d7a:	bf00      	nop
    1d7c:	b003      	add	sp, #12
    1d7e:	f85d fb04 	ldr.w	pc, [sp], #4
    1d82:	bf00      	nop
    1d84:	2000078c 	.word	0x2000078c

00001d88 <update_status>:

pynq_t pynqs[PYNQ_SIZE];
char pynq_map[PYNQ_SIZE];
unsigned int pynq_num;

void update_status() {
    1d88:	b510      	push	{r4, lr}
    1d8a:	b086      	sub	sp, #24
	reset();
    1d8c:	f7fe fabc 	bl	308 <reset>
	writef("unit    progress", get_buffer(), 0, 0, 1);
    1d90:	f7fe fade 	bl	350 <get_buffer>
    1d94:	4601      	mov	r1, r0
    1d96:	2301      	movs	r3, #1
    1d98:	9300      	str	r3, [sp, #0]
    1d9a:	2300      	movs	r3, #0
    1d9c:	2200      	movs	r2, #0
    1d9e:	4828      	ldr	r0, [pc, #160]	; (1e40 <update_status+0xb8>)
    1da0:	f7fe fcd2 	bl	748 <writef>
	for(int i = 0; i < pynq_num; i++) {
    1da4:	2300      	movs	r3, #0
    1da6:	9305      	str	r3, [sp, #20]
    1da8:	e01f      	b.n	1dea <update_status+0x62>
		writef("pynq%i   %i\%", get_buffer(), 0, (i + 1)*9 + 5, 1, pynqs[i].index, pynqs[i].percentage);
    1daa:	f7fe fad1 	bl	350 <get_buffer>
    1dae:	9b05      	ldr	r3, [sp, #20]
    1db0:	1c5a      	adds	r2, r3, #1
    1db2:	4613      	mov	r3, r2
    1db4:	00db      	lsls	r3, r3, #3
    1db6:	4413      	add	r3, r2
    1db8:	3305      	adds	r3, #5
    1dba:	461c      	mov	r4, r3
    1dbc:	4a21      	ldr	r2, [pc, #132]	; (1e44 <update_status+0xbc>)
    1dbe:	9b05      	ldr	r3, [sp, #20]
    1dc0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
    1dc4:	4619      	mov	r1, r3
    1dc6:	4a1f      	ldr	r2, [pc, #124]	; (1e44 <update_status+0xbc>)
    1dc8:	9b05      	ldr	r3, [sp, #20]
    1dca:	005b      	lsls	r3, r3, #1
    1dcc:	4413      	add	r3, r2
    1dce:	785b      	ldrb	r3, [r3, #1]
    1dd0:	9302      	str	r3, [sp, #8]
    1dd2:	9101      	str	r1, [sp, #4]
    1dd4:	2301      	movs	r3, #1
    1dd6:	9300      	str	r3, [sp, #0]
    1dd8:	4623      	mov	r3, r4
    1dda:	2200      	movs	r2, #0
    1ddc:	4601      	mov	r1, r0
    1dde:	481a      	ldr	r0, [pc, #104]	; (1e48 <update_status+0xc0>)
    1de0:	f7fe fcb2 	bl	748 <writef>
unsigned int pynq_num;

void update_status() {
	reset();
	writef("unit    progress", get_buffer(), 0, 0, 1);
	for(int i = 0; i < pynq_num; i++) {
    1de4:	9b05      	ldr	r3, [sp, #20]
    1de6:	3301      	adds	r3, #1
    1de8:	9305      	str	r3, [sp, #20]
    1dea:	9a05      	ldr	r2, [sp, #20]
    1dec:	4b17      	ldr	r3, [pc, #92]	; (1e4c <update_status+0xc4>)
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	429a      	cmp	r2, r3
    1df2:	d3da      	bcc.n	1daa <update_status+0x22>
		writef("pynq%i   %i\%", get_buffer(), 0, (i + 1)*9 + 5, 1, pynqs[i].index, pynqs[i].percentage);
	}

	for(int i = 0; i < 8; i++) writef("%i", get_buffer(), i*8, 120, 1, (last_char >> (7 - i)) & 1);
    1df4:	2300      	movs	r3, #0
    1df6:	9304      	str	r3, [sp, #16]
    1df8:	e01a      	b.n	1e30 <update_status+0xa8>
    1dfa:	f7fe faa9 	bl	350 <get_buffer>
    1dfe:	4601      	mov	r1, r0
    1e00:	9b04      	ldr	r3, [sp, #16]
    1e02:	00db      	lsls	r3, r3, #3
    1e04:	4618      	mov	r0, r3
    1e06:	4b12      	ldr	r3, [pc, #72]	; (1e50 <update_status+0xc8>)
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	461a      	mov	r2, r3
    1e0c:	9b04      	ldr	r3, [sp, #16]
    1e0e:	f1c3 0307 	rsb	r3, r3, #7
    1e12:	fa42 f303 	asr.w	r3, r2, r3
    1e16:	f003 0301 	and.w	r3, r3, #1
    1e1a:	9301      	str	r3, [sp, #4]
    1e1c:	2301      	movs	r3, #1
    1e1e:	9300      	str	r3, [sp, #0]
    1e20:	2378      	movs	r3, #120	; 0x78
    1e22:	4602      	mov	r2, r0
    1e24:	480b      	ldr	r0, [pc, #44]	; (1e54 <update_status+0xcc>)
    1e26:	f7fe fc8f 	bl	748 <writef>
    1e2a:	9b04      	ldr	r3, [sp, #16]
    1e2c:	3301      	adds	r3, #1
    1e2e:	9304      	str	r3, [sp, #16]
    1e30:	9b04      	ldr	r3, [sp, #16]
    1e32:	2b07      	cmp	r3, #7
    1e34:	dde1      	ble.n	1dfa <update_status+0x72>
	update();
    1e36:	f7fe fa47 	bl	2c8 <update>
}
    1e3a:	bf00      	nop
    1e3c:	b006      	add	sp, #24
    1e3e:	bd10      	pop	{r4, pc}
    1e40:	00005010 	.word	0x00005010
    1e44:	200011c0 	.word	0x200011c0
    1e48:	00005024 	.word	0x00005024
    1e4c:	200011d0 	.word	0x200011d0
    1e50:	200011d4 	.word	0x200011d4
    1e54:	00005034 	.word	0x00005034

00001e58 <reset_table>:

void reset_table() {
    1e58:	b500      	push	{lr}
    1e5a:	b083      	sub	sp, #12
	for(int i = 0; i < PYNQ_SIZE; i++) {
    1e5c:	2300      	movs	r3, #0
    1e5e:	9301      	str	r3, [sp, #4]
    1e60:	e012      	b.n	1e88 <reset_table+0x30>
		pynqs[i].percentage = 0;
    1e62:	4a14      	ldr	r2, [pc, #80]	; (1eb4 <reset_table+0x5c>)
    1e64:	9b01      	ldr	r3, [sp, #4]
    1e66:	005b      	lsls	r3, r3, #1
    1e68:	4413      	add	r3, r2
    1e6a:	2200      	movs	r2, #0
    1e6c:	705a      	strb	r2, [r3, #1]
		pynqs[i].index = 0;
    1e6e:	4a11      	ldr	r2, [pc, #68]	; (1eb4 <reset_table+0x5c>)
    1e70:	9b01      	ldr	r3, [sp, #4]
    1e72:	2100      	movs	r1, #0
    1e74:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		pynq_map[i] = 10;
    1e78:	4a0f      	ldr	r2, [pc, #60]	; (1eb8 <reset_table+0x60>)
    1e7a:	9b01      	ldr	r3, [sp, #4]
    1e7c:	4413      	add	r3, r2
    1e7e:	220a      	movs	r2, #10
    1e80:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++) writef("%i", get_buffer(), i*8, 120, 1, (last_char >> (7 - i)) & 1);
	update();
}

void reset_table() {
	for(int i = 0; i < PYNQ_SIZE; i++) {
    1e82:	9b01      	ldr	r3, [sp, #4]
    1e84:	3301      	adds	r3, #1
    1e86:	9301      	str	r3, [sp, #4]
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	2b07      	cmp	r3, #7
    1e8c:	dde9      	ble.n	1e62 <reset_table+0xa>
		pynqs[i].percentage = 0;
		pynqs[i].index = 0;
		pynq_map[i] = 10;
	}
	pynq_num = 0;
    1e8e:	4b0b      	ldr	r3, [pc, #44]	; (1ebc <reset_table+0x64>)
    1e90:	2200      	movs	r2, #0
    1e92:	601a      	str	r2, [r3, #0]

	reset();
    1e94:	f7fe fa38 	bl	308 <reset>
	write_image(get_buffer(), start_image, 69, 128);
    1e98:	f7fe fa5a 	bl	350 <get_buffer>
    1e9c:	2380      	movs	r3, #128	; 0x80
    1e9e:	2245      	movs	r2, #69	; 0x45
    1ea0:	4907      	ldr	r1, [pc, #28]	; (1ec0 <reset_table+0x68>)
    1ea2:	f000 f8cd 	bl	2040 <write_image>
	update();
    1ea6:	f7fe fa0f 	bl	2c8 <update>
}
    1eaa:	bf00      	nop
    1eac:	b003      	add	sp, #12
    1eae:	f85d fb04 	ldr.w	pc, [sp], #4
    1eb2:	bf00      	nop
    1eb4:	200011c0 	.word	0x200011c0
    1eb8:	200011b8 	.word	0x200011b8
    1ebc:	200011d0 	.word	0x200011d0
    1ec0:	20000158 	.word	0x20000158
    1ec4:	00000000 	.word	0x00000000

00001ec8 <parse_command>:

void parse_command(char c) {
    1ec8:	b510      	push	{r4, lr}
    1eca:	b084      	sub	sp, #16
    1ecc:	4603      	mov	r3, r0
    1ece:	f88d 3007 	strb.w	r3, [sp, #7]
	if(c & 0b10000000) {
    1ed2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	da02      	bge.n	1ee0 <parse_command+0x18>
		reset_table();
    1eda:	f7ff ffbd 	bl	1e58 <reset_table>
		return;
    1ede:	e046      	b.n	1f6e <parse_command+0xa6>
	}

	char server_id	= c >> 4 & 0b111;
    1ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1ee4:	091b      	lsrs	r3, r3, #4
    1ee6:	b2db      	uxtb	r3, r3
    1ee8:	f003 0307 	and.w	r3, r3, #7
    1eec:	f88d 300e 	strb.w	r3, [sp, #14]

	if(pynq_map[server_id] == 10) {
    1ef0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1ef4:	4a22      	ldr	r2, [pc, #136]	; (1f80 <parse_command+0xb8>)
    1ef6:	5cd3      	ldrb	r3, [r2, r3]
    1ef8:	2b0a      	cmp	r3, #10
    1efa:	d110      	bne.n	1f1e <parse_command+0x56>
		pynq_map[server_id] = pynq_num;
    1efc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1f00:	4a20      	ldr	r2, [pc, #128]	; (1f84 <parse_command+0xbc>)
    1f02:	6812      	ldr	r2, [r2, #0]
    1f04:	b2d1      	uxtb	r1, r2
    1f06:	4a1e      	ldr	r2, [pc, #120]	; (1f80 <parse_command+0xb8>)
    1f08:	54d1      	strb	r1, [r2, r3]
		pynqs[pynq_num++].index = server_id;
    1f0a:	4b1e      	ldr	r3, [pc, #120]	; (1f84 <parse_command+0xbc>)
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	1c5a      	adds	r2, r3, #1
    1f10:	491c      	ldr	r1, [pc, #112]	; (1f84 <parse_command+0xbc>)
    1f12:	600a      	str	r2, [r1, #0]
    1f14:	491c      	ldr	r1, [pc, #112]	; (1f88 <parse_command+0xc0>)
    1f16:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1f1a:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
	}

	char percentage	= (c & 0b1111)*6.67;
    1f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f22:	f003 030f 	and.w	r3, r3, #15
    1f26:	4618      	mov	r0, r3
    1f28:	f001 ff1c 	bl	3d64 <__aeabi_i2d>
    1f2c:	a312      	add	r3, pc, #72	; (adr r3, 1f78 <parse_command+0xb0>)
    1f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f32:	f001 ff7d 	bl	3e30 <__aeabi_dmul>
    1f36:	4603      	mov	r3, r0
    1f38:	460c      	mov	r4, r1
    1f3a:	4618      	mov	r0, r3
    1f3c:	4621      	mov	r1, r4
    1f3e:	f002 f989 	bl	4254 <__aeabi_d2uiz>
    1f42:	4603      	mov	r3, r0
    1f44:	f88d 300f 	strb.w	r3, [sp, #15]
	if(percentage > 100) percentage = 100;
    1f48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1f4c:	2b64      	cmp	r3, #100	; 0x64
    1f4e:	d902      	bls.n	1f56 <parse_command+0x8e>
    1f50:	2364      	movs	r3, #100	; 0x64
    1f52:	f88d 300f 	strb.w	r3, [sp, #15]

	pynqs[pynq_map[server_id]].percentage = percentage;
    1f56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1f5a:	4a09      	ldr	r2, [pc, #36]	; (1f80 <parse_command+0xb8>)
    1f5c:	5cd3      	ldrb	r3, [r2, r3]
    1f5e:	4a0a      	ldr	r2, [pc, #40]	; (1f88 <parse_command+0xc0>)
    1f60:	005b      	lsls	r3, r3, #1
    1f62:	4413      	add	r3, r2
    1f64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1f68:	705a      	strb	r2, [r3, #1]
	update_status();
    1f6a:	f7ff ff0d 	bl	1d88 <update_status>
}
    1f6e:	b004      	add	sp, #16
    1f70:	bd10      	pop	{r4, pc}
    1f72:	bf00      	nop
    1f74:	f3af 8000 	nop.w
    1f78:	7ae147ae 	.word	0x7ae147ae
    1f7c:	401aae14 	.word	0x401aae14
    1f80:	200011b8 	.word	0x200011b8
    1f84:	200011d0 	.word	0x200011d0
    1f88:	200011c0 	.word	0x200011c0

00001f8c <recv_char>:

void recv_char(char c) {
    1f8c:	b500      	push	{lr}
    1f8e:	b083      	sub	sp, #12
    1f90:	4603      	mov	r3, r0
    1f92:	f88d 3007 	strb.w	r3, [sp, #7]
	if(c == last_char) return;
    1f96:	4b0a      	ldr	r3, [pc, #40]	; (1fc0 <recv_char+0x34>)
    1f98:	781b      	ldrb	r3, [r3, #0]
    1f9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1f9e:	429a      	cmp	r2, r3
    1fa0:	d009      	beq.n	1fb6 <recv_char+0x2a>
	last_char = c;
    1fa2:	4a07      	ldr	r2, [pc, #28]	; (1fc0 <recv_char+0x34>)
    1fa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1fa8:	7013      	strb	r3, [r2, #0]
	parse_command(c);
    1faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1fae:	4618      	mov	r0, r3
    1fb0:	f7ff ff8a 	bl	1ec8 <parse_command>
    1fb4:	e000      	b.n	1fb8 <recv_char+0x2c>
	pynqs[pynq_map[server_id]].percentage = percentage;
	update_status();
}

void recv_char(char c) {
	if(c == last_char) return;
    1fb6:	bf00      	nop
	last_char = c;
	parse_command(c);
}
    1fb8:	b003      	add	sp, #12
    1fba:	f85d fb04 	ldr.w	pc, [sp], #4
    1fbe:	bf00      	nop
    1fc0:	200011d4 	.word	0x200011d4

00001fc4 <communicator_setup_lcd>:

void communicator_setup_lcd() {
    1fc4:	b508      	push	{r3, lr}
	setup_LCD();
    1fc6:	f7fe f94b 	bl	260 <setup_LCD>
}
    1fca:	bf00      	nop
    1fcc:	bd08      	pop	{r3, pc}
    1fce:	bf00      	nop

00001fd0 <communicator_setup_uart>:

void communicator_setup_uart() {
    1fd0:	b508      	push	{r3, lr}
	set_recv_callback(&recv_char);
    1fd2:	4803      	ldr	r0, [pc, #12]	; (1fe0 <communicator_setup_uart+0x10>)
    1fd4:	f7fe ff60 	bl	e98 <set_recv_callback>

	setup_uart();
    1fd8:	f7fe fdb0 	bl	b3c <setup_uart>
}
    1fdc:	bf00      	nop
    1fde:	bd08      	pop	{r3, pc}
    1fe0:	00001f8d 	.word	0x00001f8d

00001fe4 <setup_project>:

void setup_project() {
    1fe4:	b508      	push	{r3, lr}
	communicator_setup_lcd();
    1fe6:	f7ff ffed 	bl	1fc4 <communicator_setup_lcd>
	reset_table();
    1fea:	f7ff ff35 	bl	1e58 <reset_table>
	communicator_setup_uart();
    1fee:	f7ff ffef 	bl	1fd0 <communicator_setup_uart>
	free(pynqs);
    1ff2:	4802      	ldr	r0, [pc, #8]	; (1ffc <setup_project+0x18>)
    1ff4:	f002 fb82 	bl	46fc <free>
}
    1ff8:	bf00      	nop
    1ffa:	bd08      	pop	{r3, pc}
    1ffc:	200011c0 	.word	0x200011c0

00002000 <ceil>:

#include <stdio.h>

#define LINE_WIDTH 18

int ceil(float f) {
    2000:	b500      	push	{lr}
    2002:	b083      	sub	sp, #12
    2004:	9001      	str	r0, [sp, #4]
	if(f == (int)f) return f;
    2006:	9801      	ldr	r0, [sp, #4]
    2008:	f002 fb18 	bl	463c <__aeabi_f2iz>
    200c:	4603      	mov	r3, r0
    200e:	4618      	mov	r0, r3
    2010:	f002 fa4a 	bl	44a8 <__aeabi_i2f>
    2014:	4603      	mov	r3, r0
    2016:	9901      	ldr	r1, [sp, #4]
    2018:	4618      	mov	r0, r3
    201a:	f002 fadd 	bl	45d8 <__aeabi_fcmpeq>
    201e:	4603      	mov	r3, r0
    2020:	2b00      	cmp	r3, #0
    2022:	d004      	beq.n	202e <ceil+0x2e>
    2024:	9801      	ldr	r0, [sp, #4]
    2026:	f002 fb09 	bl	463c <__aeabi_f2iz>
    202a:	4603      	mov	r3, r0
    202c:	e004      	b.n	2038 <ceil+0x38>
	return ((int)f) + 1;
    202e:	9801      	ldr	r0, [sp, #4]
    2030:	f002 fb04 	bl	463c <__aeabi_f2iz>
    2034:	4603      	mov	r3, r0
    2036:	3301      	adds	r3, #1
}
    2038:	4618      	mov	r0, r3
    203a:	b003      	add	sp, #12
    203c:	f85d fb04 	ldr.w	pc, [sp], #4

00002040 <write_image>:

void write_image(uint8_t *buffer, char *image, int w, int h) {
    2040:	b510      	push	{r4, lr}
    2042:	b08c      	sub	sp, #48	; 0x30
    2044:	9003      	str	r0, [sp, #12]
    2046:	9102      	str	r1, [sp, #8]
    2048:	9201      	str	r2, [sp, #4]
    204a:	9300      	str	r3, [sp, #0]
	int x = 3;
    204c:	2303      	movs	r3, #3
    204e:	9308      	str	r3, [sp, #32]
	int y = 0;
    2050:	2300      	movs	r3, #0
    2052:	9307      	str	r3, [sp, #28]

	int row = 0;
    2054:	2300      	movs	r3, #0
    2056:	930b      	str	r3, [sp, #44]	; 0x2c
	int col = 0;
    2058:	2300      	movs	r3, #0
    205a:	930a      	str	r3, [sp, #40]	; 0x28
	for(int i = 0; i < (ceil(w/8.0)*h); i++) {
    205c:	2300      	movs	r3, #0
    205e:	9309      	str	r3, [sp, #36]	; 0x24
    2060:	e047      	b.n	20f2 <write_image+0xb2>
		int x_block = x + col;
    2062:	9a08      	ldr	r2, [sp, #32]
    2064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2066:	4413      	add	r3, r2
    2068:	9306      	str	r3, [sp, #24]
		int y_block = y + row;
    206a:	9a07      	ldr	r2, [sp, #28]
    206c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    206e:	4413      	add	r3, r2
    2070:	9305      	str	r3, [sp, #20]
		if(y_block >= 128) break;
    2072:	9b05      	ldr	r3, [sp, #20]
    2074:	2b7f      	cmp	r3, #127	; 0x7f
    2076:	dc56      	bgt.n	2126 <write_image+0xe6>
		if(x_block >= 16) continue;
    2078:	9b06      	ldr	r3, [sp, #24]
    207a:	2b0f      	cmp	r3, #15
    207c:	dc35      	bgt.n	20ea <write_image+0xaa>
		buffer[2 + x_block + y_block*LINE_WIDTH] = image[i];
    207e:	9b06      	ldr	r3, [sp, #24]
    2080:	1c99      	adds	r1, r3, #2
    2082:	9a05      	ldr	r2, [sp, #20]
    2084:	4613      	mov	r3, r2
    2086:	00db      	lsls	r3, r3, #3
    2088:	4413      	add	r3, r2
    208a:	005b      	lsls	r3, r3, #1
    208c:	440b      	add	r3, r1
    208e:	461a      	mov	r2, r3
    2090:	9b03      	ldr	r3, [sp, #12]
    2092:	4413      	add	r3, r2
    2094:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2096:	9902      	ldr	r1, [sp, #8]
    2098:	440a      	add	r2, r1
    209a:	7812      	ldrb	r2, [r2, #0]
    209c:	701a      	strb	r2, [r3, #0]
		if((i + 1) % (int)(ceil(w/8.0)) == 0) {row++; col = 0;} else {col++;}
    209e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20a0:	1c5c      	adds	r4, r3, #1
    20a2:	9801      	ldr	r0, [sp, #4]
    20a4:	f001 fe5e 	bl	3d64 <__aeabi_i2d>
    20a8:	f04f 0200 	mov.w	r2, #0
    20ac:	4b20      	ldr	r3, [pc, #128]	; (2130 <write_image+0xf0>)
    20ae:	f001 ffe9 	bl	4084 <__aeabi_ddiv>
    20b2:	4602      	mov	r2, r0
    20b4:	460b      	mov	r3, r1
    20b6:	4610      	mov	r0, r2
    20b8:	4619      	mov	r1, r3
    20ba:	f002 f8eb 	bl	4294 <__aeabi_d2f>
    20be:	4603      	mov	r3, r0
    20c0:	4618      	mov	r0, r3
    20c2:	f7ff ff9d 	bl	2000 <ceil>
    20c6:	4603      	mov	r3, r0
    20c8:	fb94 f2f3 	sdiv	r2, r4, r3
    20cc:	fb03 f302 	mul.w	r3, r3, r2
    20d0:	1ae3      	subs	r3, r4, r3
    20d2:	2b00      	cmp	r3, #0
    20d4:	d105      	bne.n	20e2 <write_image+0xa2>
    20d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    20d8:	3301      	adds	r3, #1
    20da:	930b      	str	r3, [sp, #44]	; 0x2c
    20dc:	2300      	movs	r3, #0
    20de:	930a      	str	r3, [sp, #40]	; 0x28
    20e0:	e004      	b.n	20ec <write_image+0xac>
    20e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    20e4:	3301      	adds	r3, #1
    20e6:	930a      	str	r3, [sp, #40]	; 0x28
    20e8:	e000      	b.n	20ec <write_image+0xac>
	int col = 0;
	for(int i = 0; i < (ceil(w/8.0)*h); i++) {
		int x_block = x + col;
		int y_block = y + row;
		if(y_block >= 128) break;
		if(x_block >= 16) continue;
    20ea:	bf00      	nop
	int x = 3;
	int y = 0;

	int row = 0;
	int col = 0;
	for(int i = 0; i < (ceil(w/8.0)*h); i++) {
    20ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20ee:	3301      	adds	r3, #1
    20f0:	9309      	str	r3, [sp, #36]	; 0x24
    20f2:	9801      	ldr	r0, [sp, #4]
    20f4:	f001 fe36 	bl	3d64 <__aeabi_i2d>
    20f8:	f04f 0200 	mov.w	r2, #0
    20fc:	4b0c      	ldr	r3, [pc, #48]	; (2130 <write_image+0xf0>)
    20fe:	f001 ffc1 	bl	4084 <__aeabi_ddiv>
    2102:	4603      	mov	r3, r0
    2104:	460c      	mov	r4, r1
    2106:	4618      	mov	r0, r3
    2108:	4621      	mov	r1, r4
    210a:	f002 f8c3 	bl	4294 <__aeabi_d2f>
    210e:	4603      	mov	r3, r0
    2110:	4618      	mov	r0, r3
    2112:	f7ff ff75 	bl	2000 <ceil>
    2116:	4602      	mov	r2, r0
    2118:	9b00      	ldr	r3, [sp, #0]
    211a:	fb03 f202 	mul.w	r2, r3, r2
    211e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2120:	429a      	cmp	r2, r3
    2122:	dc9e      	bgt.n	2062 <write_image+0x22>
		if(y_block >= 128) break;
		if(x_block >= 16) continue;
		buffer[2 + x_block + y_block*LINE_WIDTH] = image[i];
		if((i + 1) % (int)(ceil(w/8.0)) == 0) {row++; col = 0;} else {col++;}
        }
}
    2124:	e000      	b.n	2128 <write_image+0xe8>
	int row = 0;
	int col = 0;
	for(int i = 0; i < (ceil(w/8.0)*h); i++) {
		int x_block = x + col;
		int y_block = y + row;
		if(y_block >= 128) break;
    2126:	bf00      	nop
		if(x_block >= 16) continue;
		buffer[2 + x_block + y_block*LINE_WIDTH] = image[i];
		if((i + 1) % (int)(ceil(w/8.0)) == 0) {row++; col = 0;} else {col++;}
        }
}
    2128:	bf00      	nop
    212a:	b00c      	add	sp, #48	; 0x30
    212c:	bd10      	pop	{r4, pc}
    212e:	bf00      	nop
    2130:	40200000 	.word	0x40200000

00002134 <Reset_Handler>:
    .align      2
    .globl      Reset_Handler
    .type       Reset_Handler, %function
Reset_Handler:
#ifndef __NO_SYSTEM_INIT
    ldr     r0, =SystemInit
    2134:	4806      	ldr	r0, [pc, #24]	; (2150 <Reset_Handler+0x1c>)
    blx     r0
    2136:	4780      	blx	r0
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr     r1, =__etext
    2138:	4906      	ldr	r1, [pc, #24]	; (2154 <Reset_Handler+0x20>)
    ldr     r2, =__data_start__
    213a:	4a07      	ldr	r2, [pc, #28]	; (2158 <Reset_Handler+0x24>)
    ldr     r3, =__data_end__
    213c:	4b07      	ldr	r3, [pc, #28]	; (215c <Reset_Handler+0x28>)

.L_loop1:
    cmp     r2, r3
    213e:	429a      	cmp	r2, r3
    ittt    lt
    2140:	bfbe      	ittt	lt
    ldrlt   r0, [r1], #4
    2142:	f851 0b04 	ldrlt.w	r0, [r1], #4
    strlt   r0, [r2], #4
    2146:	f842 0b04 	strlt.w	r0, [r2], #4
    blt     .L_loop1
    214a:	e7f8      	blt.n	213e <Reset_Handler+0xa>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __START
#define __START _start
#endif
    bl      __START
    214c:	f7fd fff4 	bl	138 <_mainCRTStartup>
    .align      2
    .globl      Reset_Handler
    .type       Reset_Handler, %function
Reset_Handler:
#ifndef __NO_SYSTEM_INIT
    ldr     r0, =SystemInit
    2150:	000022ad 	.word	0x000022ad
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr     r1, =__etext
    2154:	0000507c 	.word	0x0000507c
    ldr     r2, =__data_start__
    2158:	20000000 	.word	0x20000000
    ldr     r3, =__data_end__
    215c:	20000654 	.word	0x20000654

00002160 <ACMP0_IRQHandler>:
    .align  1
    .thumb_func
    .weak   Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
    2160:	e7fe      	b.n	2160 <ACMP0_IRQHandler>
    2162:	bf00      	nop

00002164 <GetProdRev>:
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    2164:	4b03      	ldr	r3, [pc, #12]	; (2174 <GetProdRev+0x10>)
    2166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2168:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
                         >> _DEVINFO_PART_PROD_REV_SHIFT);
    216c:	0e1b      	lsrs	r3, r3, #24
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    216e:	b2db      	uxtb	r3, r3
                         >> _DEVINFO_PART_PROD_REV_SHIFT);
}
    2170:	4618      	mov	r0, r3
    2172:	4770      	bx	lr
    2174:	0fe081b0 	.word	0x0fe081b0

00002178 <SystemCoreClockGet>:
 *
 * @return
 *   The current core clock frequency in Hz.
 ******************************************************************************/
uint32_t SystemCoreClockGet(void)
{
    2178:	b500      	push	{lr}
    217a:	b083      	sub	sp, #12
  uint32_t ret;

  ret = SystemHFClockGet();
    217c:	f000 f816 	bl	21ac <SystemHFClockGet>
    2180:	9001      	str	r0, [sp, #4]
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >>
    2182:	4b08      	ldr	r3, [pc, #32]	; (21a4 <SystemCoreClockGet+0x2c>)
    2184:	685b      	ldr	r3, [r3, #4]
    2186:	f003 030f 	and.w	r3, r3, #15
    218a:	9a01      	ldr	r2, [sp, #4]
    218c:	fa22 f303 	lsr.w	r3, r2, r3
    2190:	9301      	str	r3, [sp, #4]
          _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;

  /* Keep CMSIS variable up-to-date just in case */
  SystemCoreClock = ret;
    2192:	4a05      	ldr	r2, [pc, #20]	; (21a8 <SystemCoreClockGet+0x30>)
    2194:	9b01      	ldr	r3, [sp, #4]
    2196:	6013      	str	r3, [r2, #0]

  return ret;
    2198:	9b01      	ldr	r3, [sp, #4]
}
    219a:	4618      	mov	r0, r3
    219c:	b003      	add	sp, #12
    219e:	f85d fb04 	ldr.w	pc, [sp], #4
    21a2:	bf00      	nop
    21a4:	400c8000 	.word	0x400c8000
    21a8:	200005e0 	.word	0x200005e0

000021ac <SystemHFClockGet>:
 *
 * @return
 *   The current HFCLK frequency in Hz.
 ******************************************************************************/
uint32_t SystemHFClockGet(void)
{
    21ac:	b500      	push	{lr}
    21ae:	b083      	sub	sp, #12
  uint32_t ret;

  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
    21b0:	4b33      	ldr	r3, [pc, #204]	; (2280 <SystemHFClockGet+0xd4>)
    21b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
    21b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    21bc:	d00a      	beq.n	21d4 <SystemHFClockGet+0x28>
    21be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    21c2:	d003      	beq.n	21cc <SystemHFClockGet+0x20>
    21c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    21c8:	d008      	beq.n	21dc <SystemHFClockGet+0x30>
    21ca:	e00b      	b.n	21e4 <SystemHFClockGet+0x38>
                         CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
  {
    case CMU_STATUS_LFXOSEL:
#if (EFM32_LFXO_FREQ > 0)
      ret = SystemLFXOClock;
    21cc:	4b2d      	ldr	r3, [pc, #180]	; (2284 <SystemHFClockGet+0xd8>)
    21ce:	681b      	ldr	r3, [r3, #0]
    21d0:	9301      	str	r3, [sp, #4]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
    21d2:	e047      	b.n	2264 <SystemHFClockGet+0xb8>

    case CMU_STATUS_LFRCOSEL:
      ret = EFM32_LFRCO_FREQ;
    21d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21d8:	9301      	str	r3, [sp, #4]
      break;
    21da:	e043      	b.n	2264 <SystemHFClockGet+0xb8>

    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
    21dc:	4b2a      	ldr	r3, [pc, #168]	; (2288 <SystemHFClockGet+0xdc>)
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	9301      	str	r3, [sp, #4]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
    21e2:	e03f      	b.n	2264 <SystemHFClockGet+0xb8>

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
    21e4:	4b26      	ldr	r3, [pc, #152]	; (2280 <SystemHFClockGet+0xd4>)
    21e6:	68db      	ldr	r3, [r3, #12]
    21e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    21ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    21f0:	d01b      	beq.n	222a <SystemHFClockGet+0x7e>
    21f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    21f6:	d805      	bhi.n	2204 <SystemHFClockGet+0x58>
    21f8:	2b00      	cmp	r3, #0
    21fa:	d024      	beq.n	2246 <SystemHFClockGet+0x9a>
    21fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2200:	d016      	beq.n	2230 <SystemHFClockGet+0x84>
    2202:	e02b      	b.n	225c <SystemHFClockGet+0xb0>
    2204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2208:	d009      	beq.n	221e <SystemHFClockGet+0x72>
    220a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    220e:	d003      	beq.n	2218 <SystemHFClockGet+0x6c>
    2210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2214:	d006      	beq.n	2224 <SystemHFClockGet+0x78>
    2216:	e021      	b.n	225c <SystemHFClockGet+0xb0>
      {
      case CMU_HFRCOCTRL_BAND_28MHZ:
        ret = 28000000;
    2218:	4b1c      	ldr	r3, [pc, #112]	; (228c <SystemHFClockGet+0xe0>)
    221a:	9301      	str	r3, [sp, #4]
        break;
    221c:	e021      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
    221e:	4b1c      	ldr	r3, [pc, #112]	; (2290 <SystemHFClockGet+0xe4>)
    2220:	9301      	str	r3, [sp, #4]
        break;
    2222:	e01e      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
    2224:	4b1b      	ldr	r3, [pc, #108]	; (2294 <SystemHFClockGet+0xe8>)
    2226:	9301      	str	r3, [sp, #4]
        break;
    2228:	e01b      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_11MHZ:
        ret = 11000000;
    222a:	4b1b      	ldr	r3, [pc, #108]	; (2298 <SystemHFClockGet+0xec>)
    222c:	9301      	str	r3, [sp, #4]
        break;
    222e:	e018      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
    2230:	f7ff ff98 	bl	2164 <GetProdRev>
    2234:	4603      	mov	r3, r0
    2236:	2b12      	cmp	r3, #18
    2238:	d902      	bls.n	2240 <SystemHFClockGet+0x94>
          ret = 6600000;
    223a:	4b18      	ldr	r3, [pc, #96]	; (229c <SystemHFClockGet+0xf0>)
    223c:	9301      	str	r3, [sp, #4]
        else
          ret = 7000000;
        break;
    223e:	e010      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
        else
          ret = 7000000;
    2240:	4b17      	ldr	r3, [pc, #92]	; (22a0 <SystemHFClockGet+0xf4>)
    2242:	9301      	str	r3, [sp, #4]
        break;
    2244:	e00d      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
    2246:	f7ff ff8d 	bl	2164 <GetProdRev>
    224a:	4603      	mov	r3, r0
    224c:	2b12      	cmp	r3, #18
    224e:	d902      	bls.n	2256 <SystemHFClockGet+0xaa>
          ret = 1200000;
    2250:	4b14      	ldr	r3, [pc, #80]	; (22a4 <SystemHFClockGet+0xf8>)
    2252:	9301      	str	r3, [sp, #4]
        else
          ret = 1000000;
        break;
    2254:	e005      	b.n	2262 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
        else
          ret = 1000000;
    2256:	4b14      	ldr	r3, [pc, #80]	; (22a8 <SystemHFClockGet+0xfc>)
    2258:	9301      	str	r3, [sp, #4]
        break;
    225a:	e002      	b.n	2262 <SystemHFClockGet+0xb6>

      default:
        ret = 0;
    225c:	2300      	movs	r3, #0
    225e:	9301      	str	r3, [sp, #4]
        break;
    2260:	bf00      	nop
      }
      break;
    2262:	bf00      	nop
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    2264:	4b06      	ldr	r3, [pc, #24]	; (2280 <SystemHFClockGet+0xd4>)
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
                      >> _CMU_CTRL_HFCLKDIV_SHIFT));
    226c:	0b9b      	lsrs	r3, r3, #14
        break;
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    226e:	3301      	adds	r3, #1
    2270:	9a01      	ldr	r2, [sp, #4]
    2272:	fbb2 f3f3 	udiv	r3, r2, r3
                      >> _CMU_CTRL_HFCLKDIV_SHIFT));
}
    2276:	4618      	mov	r0, r3
    2278:	b003      	add	sp, #12
    227a:	f85d fb04 	ldr.w	pc, [sp], #4
    227e:	bf00      	nop
    2280:	400c8000 	.word	0x400c8000
    2284:	200005dc 	.word	0x200005dc
    2288:	200005d8 	.word	0x200005d8
    228c:	01ab3f00 	.word	0x01ab3f00
    2290:	01406f40 	.word	0x01406f40
    2294:	00d59f80 	.word	0x00d59f80
    2298:	00a7d8c0 	.word	0x00a7d8c0
    229c:	0064b540 	.word	0x0064b540
    22a0:	006acfc0 	.word	0x006acfc0
    22a4:	00124f80 	.word	0x00124f80
    22a8:	000f4240 	.word	0x000f4240

000022ac <SystemInit>:
 *   and any data has been initialized. For this reason, it cannot do any
 *   initialization of variables etc.
 *****************************************************************************/
void SystemInit(void)
{
}
    22ac:	bf00      	nop
    22ae:	4770      	bx	lr

000022b0 <SystemLFRCOClockGet>:
uint32_t SystemLFRCOClockGet(void)
{
  /* Currently we assume that this frequency is properly tuned during */
  /* manufacturing and is not changed after reset. If future requirements */
  /* for re-tuning by user, we can add support for that. */
  return EFM32_LFRCO_FREQ;
    22b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    22b4:	4618      	mov	r0, r3
    22b6:	4770      	bx	lr

000022b8 <SystemULFRCOClockGet>:
 *   ULFRCO frequency in Hz.
 *****************************************************************************/
uint32_t SystemULFRCOClockGet(void)
{
  /* The ULFRCO frequency is not tuned, and can be very inaccurate */
  return EFM32_ULFRCO_FREQ;
    22b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
    22bc:	4618      	mov	r0, r3
    22be:	4770      	bx	lr

000022c0 <SystemLFXOClockGet>:
 *****************************************************************************/
uint32_t SystemLFXOClockGet(void)
{
  /* External crystal oscillator present? */
#if (EFM32_LFXO_FREQ > 0)
  return SystemLFXOClock;
    22c0:	4b01      	ldr	r3, [pc, #4]	; (22c8 <SystemLFXOClockGet+0x8>)
    22c2:	681b      	ldr	r3, [r3, #0]
#else
  return 0;
#endif
}
    22c4:	4618      	mov	r0, r3
    22c6:	4770      	bx	lr
    22c8:	200005dc 	.word	0x200005dc

000022cc <BUS_RegBitWrite>:
 * @param[in] val Value to set bit to, 0 or 1
 ******************************************************************************/
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
    22cc:	b086      	sub	sp, #24
    22ce:	9003      	str	r0, [sp, #12]
    22d0:	9102      	str	r1, [sp, #8]
    22d2:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    22d4:	9b03      	ldr	r3, [sp, #12]
    22d6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    22da:	00da      	lsls	r2, r3, #3
    22dc:	9b02      	ldr	r3, [sp, #8]
    22de:	4413      	add	r3, r2
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    22e0:	009b      	lsls	r3, r3, #2
    22e2:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    22e4:	9b05      	ldr	r3, [sp, #20]
    22e6:	9a01      	ldr	r2, [sp, #4]
    22e8:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;

  /* Make sure val is not more than 1, because we only want to set one bit. */
  *addr = (tmp & ~(1 << bit)) | ((val & 1) << bit);
#endif
}
    22ea:	bf00      	nop
    22ec:	b006      	add	sp, #24
    22ee:	4770      	bx	lr

000022f0 <BUS_RegBitRead>:
 * @return
 *     The requested bit shifted to bit position 0 in the return value
 ******************************************************************************/
__STATIC_INLINE unsigned int BUS_RegBitRead(volatile const uint32_t *addr,
                                            unsigned int bit)
{
    22f0:	b084      	sub	sp, #16
    22f2:	9001      	str	r0, [sp, #4]
    22f4:	9100      	str	r1, [sp, #0]
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    22f6:	9b01      	ldr	r3, [sp, #4]
    22f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    22fc:	00da      	lsls	r2, r3, #3
    22fe:	9b00      	ldr	r3, [sp, #0]
    2300:	4413      	add	r3, r2
 ******************************************************************************/
__STATIC_INLINE unsigned int BUS_RegBitRead(volatile const uint32_t *addr,
                                            unsigned int bit)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    2302:	009b      	lsls	r3, r3, #2
    2304:	9303      	str	r3, [sp, #12]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    2306:	9b03      	ldr	r3, [sp, #12]
    2308:	681b      	ldr	r3, [r3, #0]
#else
  return ((*addr) >> bit) & 1;
#endif
}
    230a:	4618      	mov	r0, r3
    230c:	b004      	add	sp, #16
    230e:	4770      	bx	lr

00002310 <CMU_DivToLog2>:
 *
 * @return
 *   Logarithm of 2, as used by fixed prescalers.
 ******************************************************************************/
__STATIC_INLINE uint32_t CMU_DivToLog2(CMU_ClkDiv_TypeDef div)
{
    2310:	b084      	sub	sp, #16
    2312:	9001      	str	r0, [sp, #4]
  uint32_t log2;

  /* Fixed 2^n prescalers take argument of 32768 or less. */
  EFM_ASSERT((div > 0U) && (div <= 32768U));
    2314:	9b01      	ldr	r3, [sp, #4]
    2316:	2b00      	cmp	r3, #0
    2318:	d003      	beq.n	2322 <CMU_DivToLog2+0x12>
    231a:	9b01      	ldr	r3, [sp, #4]
    231c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2320:	bf00      	nop

  /* Count leading zeroes and "reverse" result */
  log2 = (31U - __CLZ(div));
    2322:	9b01      	ldr	r3, [sp, #4]
    2324:	fab3 f383 	clz	r3, r3
    2328:	f1c3 031f 	rsb	r3, r3, #31
    232c:	9303      	str	r3, [sp, #12]

  return log2;
    232e:	9b03      	ldr	r3, [sp, #12]
}
    2330:	4618      	mov	r0, r3
    2332:	b004      	add	sp, #16
    2334:	4770      	bx	lr
    2336:	bf00      	nop

00002338 <SYSTEM_GetProdRev>:
 * @return
 *   Production revision for this part.
 ******************************************************************************/
__STATIC_INLINE uint8_t SYSTEM_GetProdRev(void)
{
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    2338:	4b03      	ldr	r3, [pc, #12]	; (2348 <SYSTEM_GetProdRev+0x10>)
    233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    233c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
         >> _DEVINFO_PART_PROD_REV_SHIFT;
    2340:	0e1b      	lsrs	r3, r3, #24
 * @return
 *   Production revision for this part.
 ******************************************************************************/
__STATIC_INLINE uint8_t SYSTEM_GetProdRev(void)
{
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    2342:	b2db      	uxtb	r3, r3
         >> _DEVINFO_PART_PROD_REV_SHIFT;
}
    2344:	4618      	mov	r0, r3
    2346:	4770      	bx	lr
    2348:	0fe081b0 	.word	0x0fe081b0

0000234c <SYSTEM_GetFamily>:
 *   The family identifier of the MCU.
 ******************************************************************************/
__STATIC_INLINE SYSTEM_PartFamily_TypeDef SYSTEM_GetFamily(void)
{
  return (SYSTEM_PartFamily_TypeDef)
         ((DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK)
    234c:	4b03      	ldr	r3, [pc, #12]	; (235c <SYSTEM_GetFamily+0x10>)
    234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
          >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT);
    2354:	0c1b      	lsrs	r3, r3, #16
 * @return
 *   The family identifier of the MCU.
 ******************************************************************************/
__STATIC_INLINE SYSTEM_PartFamily_TypeDef SYSTEM_GetFamily(void)
{
  return (SYSTEM_PartFamily_TypeDef)
    2356:	b2db      	uxtb	r3, r3
         ((DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK)
          >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT);
}
    2358:	4618      	mov	r0, r3
    235a:	4770      	bx	lr
    235c:	0fe081b0 	.word	0x0fe081b0

00002360 <maxFreqHfle>:
/***************************************************************************//**
 * @brief
 *   Return max allowed frequency for low energy peripherals.
 ******************************************************************************/
static uint32_t maxFreqHfle(void)
{
    2360:	b500      	push	{lr}
    2362:	b083      	sub	sp, #12
  uint16_t majorMinorRev;

  switch (SYSTEM_GetFamily()) {
    2364:	f7ff fff2 	bl	234c <SYSTEM_GetFamily>
    2368:	4603      	mov	r3, r0
    236a:	2b4a      	cmp	r3, #74	; 0x4a
    236c:	d004      	beq.n	2378 <maxFreqHfle+0x18>
    236e:	2b79      	cmp	r3, #121	; 0x79
    2370:	d002      	beq.n	2378 <maxFreqHfle+0x18>
    2372:	2b48      	cmp	r3, #72	; 0x48
    2374:	d027      	beq.n	23c6 <maxFreqHfle+0x66>
    2376:	e028      	b.n	23ca <maxFreqHfle+0x6a>
    case systemPartFamilyEfm32Leopard:
    case systemPartFamilyEzr32Leopard:
      /* CHIP MAJOR bit [5:0] */
      majorMinorRev = (((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK)
    2378:	4b16      	ldr	r3, [pc, #88]	; (23d4 <maxFreqHfle+0x74>)
    237a:	691b      	ldr	r3, [r3, #16]
    237c:	b29b      	uxth	r3, r3
    237e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2382:	b29b      	uxth	r3, r3
    2384:	021b      	lsls	r3, r3, #8
    2386:	f8ad 3006 	strh.w	r3, [sp, #6]
                        >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8);
      /* CHIP MINOR bit [7:4] */
      majorMinorRev |= (((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK)
    238a:	4b12      	ldr	r3, [pc, #72]	; (23d4 <maxFreqHfle+0x74>)
    238c:	699b      	ldr	r3, [r3, #24]
                         >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4);
    238e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    case systemPartFamilyEzr32Leopard:
      /* CHIP MAJOR bit [5:0] */
      majorMinorRev = (((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK)
                        >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8);
      /* CHIP MINOR bit [7:4] */
      majorMinorRev |= (((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK)
    2392:	b29a      	uxth	r2, r3
    2394:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2398:	4313      	orrs	r3, r2
    239a:	f8ad 3006 	strh.w	r3, [sp, #6]
                         >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4);
      /* CHIP MINOR bit [3:0] */
      majorMinorRev |=  ((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK)
    239e:	4b0d      	ldr	r3, [pc, #52]	; (23d4 <maxFreqHfle+0x74>)
    23a0:	69db      	ldr	r3, [r3, #28]
    23a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
                         >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);
    23a6:	091b      	lsrs	r3, r3, #4
                        >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8);
      /* CHIP MINOR bit [7:4] */
      majorMinorRev |= (((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK)
                         >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4);
      /* CHIP MINOR bit [3:0] */
      majorMinorRev |=  ((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK)
    23a8:	b29a      	uxth	r2, r3
    23aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    23ae:	4313      	orrs	r3, r2
    23b0:	f8ad 3006 	strh.w	r3, [sp, #6]
                         >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);

      if (majorMinorRev >= 0x0204) {
    23b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    23b8:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
    23bc:	d301      	bcc.n	23c2 <maxFreqHfle+0x62>
        return 24000000;
    23be:	4b06      	ldr	r3, [pc, #24]	; (23d8 <maxFreqHfle+0x78>)
    23c0:	e004      	b.n	23cc <maxFreqHfle+0x6c>
      } else {
        return 32000000;
    23c2:	4b06      	ldr	r3, [pc, #24]	; (23dc <maxFreqHfle+0x7c>)
    23c4:	e002      	b.n	23cc <maxFreqHfle+0x6c>
      }

    case systemPartFamilyEfm32Giant:
      return 32000000;
    23c6:	4b05      	ldr	r3, [pc, #20]	; (23dc <maxFreqHfle+0x7c>)
    23c8:	e000      	b.n	23cc <maxFreqHfle+0x6c>

    default:
      /* Invalid device family. */
      EFM_ASSERT(false);
      return 0;
    23ca:	2300      	movs	r3, #0
  }
}
    23cc:	4618      	mov	r0, r3
    23ce:	b003      	add	sp, #12
    23d0:	f85d fb04 	ldr.w	pc, [sp], #4
    23d4:	e00fffd0 	.word	0xe00fffd0
    23d8:	016e3600 	.word	0x016e3600
    23dc:	01e84800 	.word	0x01e84800

000023e0 <setHfLeConfig>:
 *
 * @param[in] maxLeFreq
 *   Max LE frequency
 ******************************************************************************/
static void setHfLeConfig(uint32_t hfFreq)
{
    23e0:	b500      	push	{lr}
    23e2:	b085      	sub	sp, #20
    23e4:	9001      	str	r0, [sp, #4]

  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
    23e6:	2301      	movs	r3, #1
    23e8:	9303      	str	r3, [sp, #12]
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    23ea:	f7ff ffb9 	bl	2360 <maxFreqHfle>
    23ee:	4602      	mov	r2, r0
    23f0:	9b01      	ldr	r3, [sp, #4]
    23f2:	429a      	cmp	r2, r3
    23f4:	d304      	bcc.n	2400 <setHfLeConfig+0x20>
    hfleWs = 0;
    23f6:	2300      	movs	r3, #0
    23f8:	9303      	str	r3, [sp, #12]
    hflePresc = 0;
    23fa:	2300      	movs	r3, #0
    23fc:	9302      	str	r3, [sp, #8]
    23fe:	e00b      	b.n	2418 <setHfLeConfig+0x38>
  } else if (hfFreq <= (2 * CMU_MAX_FREQ_HFLE)) {
    2400:	f7ff ffae 	bl	2360 <maxFreqHfle>
    2404:	4603      	mov	r3, r0
    2406:	005a      	lsls	r2, r3, #1
    2408:	9b01      	ldr	r3, [sp, #4]
    240a:	429a      	cmp	r2, r3
    240c:	d302      	bcc.n	2414 <setHfLeConfig+0x34>
    hflePresc = 1;
    240e:	2301      	movs	r3, #1
    2410:	9302      	str	r3, [sp, #8]
    2412:	e001      	b.n	2418 <setHfLeConfig+0x38>
  } else {
    hflePresc = 2;
    2414:	2302      	movs	r3, #2
    2416:	9302      	str	r3, [sp, #8]
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
    2418:	9a03      	ldr	r2, [sp, #12]
    241a:	211e      	movs	r1, #30
    241c:	4807      	ldr	r0, [pc, #28]	; (243c <setHfLeConfig+0x5c>)
    241e:	f7ff ff55 	bl	22cc <BUS_RegBitWrite>
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    2422:	4906      	ldr	r1, [pc, #24]	; (243c <setHfLeConfig+0x5c>)
    2424:	4b05      	ldr	r3, [pc, #20]	; (243c <setHfLeConfig+0x5c>)
    2426:	685b      	ldr	r3, [r3, #4]
    2428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    242c:	9b02      	ldr	r3, [sp, #8]
    242e:	021b      	lsls	r3, r3, #8
    2430:	4313      	orrs	r3, r2
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    2432:	604b      	str	r3, [r1, #4]
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
}
    2434:	bf00      	nop
    2436:	b005      	add	sp, #20
    2438:	f85d fb04 	ldr.w	pc, [sp], #4
    243c:	400c8000 	.word	0x400c8000

00002440 <getHfLeConfig>:
 *
 * @return
 *   Current wait-state configuration.
 ******************************************************************************/
static uint32_t getHfLeConfig(void)
{
    2440:	b500      	push	{lr}
    2442:	b083      	sub	sp, #12
  uint32_t ws = BUS_RegBitRead(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT);
    2444:	211e      	movs	r1, #30
    2446:	4804      	ldr	r0, [pc, #16]	; (2458 <getHfLeConfig+0x18>)
    2448:	f7ff ff52 	bl	22f0 <BUS_RegBitRead>
    244c:	9001      	str	r0, [sp, #4]
  return ws;
    244e:	9b01      	ldr	r3, [sp, #4]
}
    2450:	4618      	mov	r0, r3
    2452:	b003      	add	sp, #12
    2454:	f85d fb04 	ldr.w	pc, [sp], #4
    2458:	400c8000 	.word	0x400c8000

0000245c <auxClkGet>:
 *
 * @return
 *   AUX Frequency in Hz
 ******************************************************************************/
static uint32_t auxClkGet(void)
{
    245c:	b500      	push	{lr}
    245e:	b083      	sub	sp, #12
#if defined(_CMU_AUXHFRCOCTRL_FREQRANGE_MASK)
  ret = auxHfrcoFreq;

#elif defined(_CMU_AUXHFRCOCTRL_BAND_MASK)
  /* All series 0 families except EFM32G */
  switch (CMU->AUXHFRCOCTRL & _CMU_AUXHFRCOCTRL_BAND_MASK) {
    2460:	4b21      	ldr	r3, [pc, #132]	; (24e8 <auxClkGet+0x8c>)
    2462:	695b      	ldr	r3, [r3, #20]
    2464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    246c:	d01c      	beq.n	24a8 <auxClkGet+0x4c>
    246e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2472:	d805      	bhi.n	2480 <auxClkGet+0x24>
    2474:	2b00      	cmp	r3, #0
    2476:	d025      	beq.n	24c4 <auxClkGet+0x68>
    2478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    247c:	d01f      	beq.n	24be <auxClkGet+0x62>
    247e:	e02a      	b.n	24d6 <auxClkGet+0x7a>
    2480:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2484:	d024      	beq.n	24d0 <auxClkGet+0x74>
    2486:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    248a:	d01e      	beq.n	24ca <auxClkGet+0x6e>
    248c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2490:	d121      	bne.n	24d6 <auxClkGet+0x7a>
    case CMU_AUXHFRCOCTRL_BAND_1MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
    2492:	f7ff ff51 	bl	2338 <SYSTEM_GetProdRev>
    2496:	4603      	mov	r3, r0
    2498:	2b12      	cmp	r3, #18
    249a:	d902      	bls.n	24a2 <auxClkGet+0x46>
        ret = 1200000;
    249c:	4b13      	ldr	r3, [pc, #76]	; (24ec <auxClkGet+0x90>)
    249e:	9301      	str	r3, [sp, #4]
      } else {
        ret = 1000000;
      }
      break;
    24a0:	e01c      	b.n	24dc <auxClkGet+0x80>
  switch (CMU->AUXHFRCOCTRL & _CMU_AUXHFRCOCTRL_BAND_MASK) {
    case CMU_AUXHFRCOCTRL_BAND_1MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
        ret = 1200000;
      } else {
        ret = 1000000;
    24a2:	4b13      	ldr	r3, [pc, #76]	; (24f0 <auxClkGet+0x94>)
    24a4:	9301      	str	r3, [sp, #4]
      }
      break;
    24a6:	e019      	b.n	24dc <auxClkGet+0x80>

    case CMU_AUXHFRCOCTRL_BAND_7MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
    24a8:	f7ff ff46 	bl	2338 <SYSTEM_GetProdRev>
    24ac:	4603      	mov	r3, r0
    24ae:	2b12      	cmp	r3, #18
    24b0:	d902      	bls.n	24b8 <auxClkGet+0x5c>
        ret = 6600000;
    24b2:	4b10      	ldr	r3, [pc, #64]	; (24f4 <auxClkGet+0x98>)
    24b4:	9301      	str	r3, [sp, #4]
      } else {
        ret = 7000000;
      }
      break;
    24b6:	e011      	b.n	24dc <auxClkGet+0x80>

    case CMU_AUXHFRCOCTRL_BAND_7MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
        ret = 6600000;
      } else {
        ret = 7000000;
    24b8:	4b0f      	ldr	r3, [pc, #60]	; (24f8 <auxClkGet+0x9c>)
    24ba:	9301      	str	r3, [sp, #4]
      }
      break;
    24bc:	e00e      	b.n	24dc <auxClkGet+0x80>

    case CMU_AUXHFRCOCTRL_BAND_11MHZ:
      ret = 11000000;
    24be:	4b0f      	ldr	r3, [pc, #60]	; (24fc <auxClkGet+0xa0>)
    24c0:	9301      	str	r3, [sp, #4]
      break;
    24c2:	e00b      	b.n	24dc <auxClkGet+0x80>

    case CMU_AUXHFRCOCTRL_BAND_14MHZ:
      ret = 14000000;
    24c4:	4b0e      	ldr	r3, [pc, #56]	; (2500 <auxClkGet+0xa4>)
    24c6:	9301      	str	r3, [sp, #4]
      break;
    24c8:	e008      	b.n	24dc <auxClkGet+0x80>

    case CMU_AUXHFRCOCTRL_BAND_21MHZ:
      ret = 21000000;
    24ca:	4b0e      	ldr	r3, [pc, #56]	; (2504 <auxClkGet+0xa8>)
    24cc:	9301      	str	r3, [sp, #4]
      break;
    24ce:	e005      	b.n	24dc <auxClkGet+0x80>

#if defined(_CMU_AUXHFRCOCTRL_BAND_28MHZ)
    case CMU_AUXHFRCOCTRL_BAND_28MHZ:
      ret = 28000000;
    24d0:	4b0d      	ldr	r3, [pc, #52]	; (2508 <auxClkGet+0xac>)
    24d2:	9301      	str	r3, [sp, #4]
      break;
    24d4:	e002      	b.n	24dc <auxClkGet+0x80>
#endif

    default:
      EFM_ASSERT(0);
      ret = 0;
    24d6:	2300      	movs	r3, #0
    24d8:	9301      	str	r3, [sp, #4]
      break;
    24da:	bf00      	nop
  /* Gecko has a fixed 14Mhz AUXHFRCO clock */
  ret = 14000000;

#endif

  return ret;
    24dc:	9b01      	ldr	r3, [sp, #4]
}
    24de:	4618      	mov	r0, r3
    24e0:	b003      	add	sp, #12
    24e2:	f85d fb04 	ldr.w	pc, [sp], #4
    24e6:	bf00      	nop
    24e8:	400c8000 	.word	0x400c8000
    24ec:	00124f80 	.word	0x00124f80
    24f0:	000f4240 	.word	0x000f4240
    24f4:	0064b540 	.word	0x0064b540
    24f8:	006acfc0 	.word	0x006acfc0
    24fc:	00a7d8c0 	.word	0x00a7d8c0
    2500:	00d59f80 	.word	0x00d59f80
    2504:	01406f40 	.word	0x01406f40
    2508:	01ab3f00 	.word	0x01ab3f00

0000250c <dbgClkGet>:
 *
 * @return
 *   Debug Trace frequency in Hz
 ******************************************************************************/
static uint32_t dbgClkGet(void)
{
    250c:	b500      	push	{lr}
    250e:	b083      	sub	sp, #12
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_DBG);
    2510:	480d      	ldr	r0, [pc, #52]	; (2548 <dbgClkGet+0x3c>)
    2512:	f000 fa1b 	bl	294c <CMU_ClockSelectGet>
    2516:	4603      	mov	r3, r0
    2518:	f88d 3003 	strb.w	r3, [sp, #3]

  switch (clk) {
    251c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2520:	2b07      	cmp	r3, #7
    2522:	d005      	beq.n	2530 <dbgClkGet+0x24>
    2524:	2b09      	cmp	r3, #9
    2526:	d107      	bne.n	2538 <dbgClkGet+0x2c>
    case cmuSelect_HFCLK:
      ret = SystemHFClockGet();
    2528:	f7ff fe40 	bl	21ac <SystemHFClockGet>
    252c:	9001      	str	r0, [sp, #4]
      break;
    252e:	e006      	b.n	253e <dbgClkGet+0x32>

    case cmuSelect_AUXHFRCO:
      ret = auxClkGet();
    2530:	f7ff ff94 	bl	245c <auxClkGet>
    2534:	9001      	str	r0, [sp, #4]
      break;
    2536:	e002      	b.n	253e <dbgClkGet+0x32>

    default:
      EFM_ASSERT(0);
      ret = 0;
    2538:	2300      	movs	r3, #0
    253a:	9301      	str	r3, [sp, #4]
      break;
    253c:	bf00      	nop
  }
  return ret;
    253e:	9b01      	ldr	r3, [sp, #4]
}
    2540:	4618      	mov	r0, r3
    2542:	b003      	add	sp, #12
    2544:	f85d fb04 	ldr.w	pc, [sp], #4
    2548:	000c0006 	.word	0x000c0006

0000254c <lfClkGet>:
 * @return
 *   The LFnCLK frequency in Hz. If no LFnCLK is selected (disabled), 0 is
 *   returned.
 ******************************************************************************/
static uint32_t lfClkGet(CMU_Clock_TypeDef lfClkBranch)
{
    254c:	b510      	push	{r4, lr}
    254e:	b084      	sub	sp, #16
    2550:	9001      	str	r0, [sp, #4]
  uint32_t sel;
  uint32_t ret = 0;
    2552:	2300      	movs	r3, #0
    2554:	9302      	str	r3, [sp, #8]

  switch (lfClkBranch) {
    2556:	9b01      	ldr	r3, [sp, #4]
    2558:	4a32      	ldr	r2, [pc, #200]	; (2624 <lfClkGet+0xd8>)
    255a:	4293      	cmp	r3, r2
    255c:	d003      	beq.n	2566 <lfClkGet+0x1a>
    255e:	4a32      	ldr	r2, [pc, #200]	; (2628 <lfClkGet+0xdc>)
    2560:	4293      	cmp	r3, r2
    2562:	d000      	beq.n	2566 <lfClkGet+0x1a>
#endif
      break;

    default:
      EFM_ASSERT(0);
      break;
    2564:	e000      	b.n	2568 <lfClkGet+0x1c>
    case cmuClock_LFC:
#endif
#if defined(_CMU_LFECLKSEL_MASK)
    case cmuClock_LFE:
#endif
      break;
    2566:	bf00      	nop
    default:
      EFM_ASSERT(0);
      break;
  }

  sel = CMU_ClockSelectGet(lfClkBranch);
    2568:	9801      	ldr	r0, [sp, #4]
    256a:	f000 f9ef 	bl	294c <CMU_ClockSelectGet>
    256e:	4603      	mov	r3, r0
    2570:	9303      	str	r3, [sp, #12]

  /* Get clock select field */
  switch (lfClkBranch) {
    2572:	9b01      	ldr	r3, [sp, #4]
    2574:	4a2b      	ldr	r2, [pc, #172]	; (2624 <lfClkGet+0xd8>)
    2576:	4293      	cmp	r3, r2
    2578:	d003      	beq.n	2582 <lfClkGet+0x36>
    257a:	4a2b      	ldr	r2, [pc, #172]	; (2628 <lfClkGet+0xdc>)
    257c:	4293      	cmp	r3, r2
    257e:	d006      	beq.n	258e <lfClkGet+0x42>
      break;
#endif

    default:
      EFM_ASSERT(0);
      break;
    2580:	e00c      	b.n	259c <lfClkGet+0x50>

  /* Get clock select field */
  switch (lfClkBranch) {
    case cmuClock_LFA:
#if defined(_CMU_LFCLKSEL_MASK)
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) >> _CMU_LFCLKSEL_LFA_SHIFT;
    2582:	4b2a      	ldr	r3, [pc, #168]	; (262c <lfClkGet+0xe0>)
    2584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2586:	f003 0303 	and.w	r3, r3, #3
    258a:	9303      	str	r3, [sp, #12]
#elif defined(_CMU_LFACLKSEL_MASK)
      sel = (CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK) >> _CMU_LFACLKSEL_LFA_SHIFT;
#else
      EFM_ASSERT(0);
#endif
      break;
    258c:	e006      	b.n	259c <lfClkGet+0x50>

    case cmuClock_LFB:
#if defined(_CMU_LFCLKSEL_MASK)
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) >> _CMU_LFCLKSEL_LFB_SHIFT;
    258e:	4b27      	ldr	r3, [pc, #156]	; (262c <lfClkGet+0xe0>)
    2590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2592:	f003 030c 	and.w	r3, r3, #12
    2596:	089b      	lsrs	r3, r3, #2
    2598:	9303      	str	r3, [sp, #12]
#elif defined(_CMU_LFBCLKSEL_MASK)
      sel = (CMU->LFBCLKSEL & _CMU_LFBCLKSEL_LFB_MASK) >> _CMU_LFBCLKSEL_LFB_SHIFT;
#else
      EFM_ASSERT(0);
#endif
      break;
    259a:	bf00      	nop
      break;
  }

  /* Get clock frequency */
#if defined(_CMU_LFCLKSEL_MASK)
  switch (sel) {
    259c:	9b03      	ldr	r3, [sp, #12]
    259e:	2b03      	cmp	r3, #3
    25a0:	d838      	bhi.n	2614 <lfClkGet+0xc8>
    25a2:	a201      	add	r2, pc, #4	; (adr r2, 25a8 <lfClkGet+0x5c>)
    25a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    25a8:	000025df 	.word	0x000025df
    25ac:	000025b9 	.word	0x000025b9
    25b0:	000025c1 	.word	0x000025c1
    25b4:	000025c9 	.word	0x000025c9
    case _CMU_LFCLKSEL_LFA_LFRCO:
      ret = SystemLFRCOClockGet();
    25b8:	f7ff fe7a 	bl	22b0 <SystemLFRCOClockGet>
    25bc:	9002      	str	r0, [sp, #8]
      break;
    25be:	e02d      	b.n	261c <lfClkGet+0xd0>

    case _CMU_LFCLKSEL_LFA_LFXO:
      ret = SystemLFXOClockGet();
    25c0:	f7ff fe7e 	bl	22c0 <SystemLFXOClockGet>
    25c4:	9002      	str	r0, [sp, #8]
      break;
    25c6:	e029      	b.n	261c <lfClkGet+0xd0>
#if defined(_CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2)
    case _CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2:
#if defined(CMU_MAX_FREQ_HFLE)
      /* HFLE bit is or'ed by hardware with HFCORECLKLEDIV to reduce the
       * frequency of CMU_HFCORECLKLEDIV2. */
      ret = SystemCoreClockGet() / (1U << (getHfLeConfig() + 1));
    25c8:	f7ff fdd6 	bl	2178 <SystemCoreClockGet>
    25cc:	4604      	mov	r4, r0
    25ce:	f7ff ff37 	bl	2440 <getHfLeConfig>
    25d2:	4603      	mov	r3, r0
    25d4:	3301      	adds	r3, #1
    25d6:	fa24 f303 	lsr.w	r3, r4, r3
    25da:	9302      	str	r3, [sp, #8]
#else
      ret = SystemCoreClockGet() / 2U;
#endif
      break;
    25dc:	e01e      	b.n	261c <lfClkGet+0xd0>
#endif

    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
    25de:	2300      	movs	r3, #0
    25e0:	9302      	str	r3, [sp, #8]
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
    25e2:	9b01      	ldr	r3, [sp, #4]
    25e4:	4a0f      	ldr	r2, [pc, #60]	; (2624 <lfClkGet+0xd8>)
    25e6:	4293      	cmp	r3, r2
    25e8:	d003      	beq.n	25f2 <lfClkGet+0xa6>
    25ea:	9b01      	ldr	r3, [sp, #4]
    25ec:	4a0e      	ldr	r2, [pc, #56]	; (2628 <lfClkGet+0xdc>)
    25ee:	4293      	cmp	r3, r2
    25f0:	d113      	bne.n	261a <lfClkGet+0xce>
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
    25f2:	4b0e      	ldr	r3, [pc, #56]	; (262c <lfClkGet+0xe0>)
    25f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                              ? _CMU_LFCLKSEL_LFAE_SHIFT
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	490a      	ldr	r1, [pc, #40]	; (2624 <lfClkGet+0xd8>)
    25fa:	428b      	cmp	r3, r1
    25fc:	d101      	bne.n	2602 <lfClkGet+0xb6>
    25fe:	2310      	movs	r3, #16
    2600:	e000      	b.n	2604 <lfClkGet+0xb8>
    2602:	2314      	movs	r3, #20
    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
    2604:	fa22 f303 	lsr.w	r3, r2, r3
    2608:	2b00      	cmp	r3, #0
    260a:	d006      	beq.n	261a <lfClkGet+0xce>
                              ? _CMU_LFCLKSEL_LFAE_SHIFT
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
          ret = SystemULFRCOClockGet();
    260c:	f7ff fe54 	bl	22b8 <SystemULFRCOClockGet>
    2610:	9002      	str	r0, [sp, #8]
        }
      }
#endif
      break;
    2612:	e002      	b.n	261a <lfClkGet+0xce>

    default:
      EFM_ASSERT(0);
      ret = 0U;
    2614:	2300      	movs	r3, #0
    2616:	9302      	str	r3, [sp, #8]
      break;
    2618:	e000      	b.n	261c <lfClkGet+0xd0>
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
          ret = SystemULFRCOClockGet();
        }
      }
#endif
      break;
    261a:	bf00      	nop
      ret = 0;
      break;
  }
#endif

  return ret;
    261c:	9b02      	ldr	r3, [sp, #8]
}
    261e:	4618      	mov	r0, r3
    2620:	b004      	add	sp, #16
    2622:	bd10      	pop	{r4, pc}
    2624:	001a0002 	.word	0x001a0002
    2628:	001c0003 	.word	0x001c0003
    262c:	400c8000 	.word	0x400c8000

00002630 <syncReg>:
 * @param[in] mask
 *   Bitmask corresponding to SYNCBUSY register defined bits, indicating
 *   registers that must complete any ongoing synchronization.
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
    2630:	b082      	sub	sp, #8
    2632:	9001      	str	r0, [sp, #4]
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    2634:	4b08      	ldr	r3, [pc, #32]	; (2658 <syncReg+0x28>)
    2636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2638:	f003 0301 	and.w	r3, r3, #1
    263c:	2b00      	cmp	r3, #0
    263e:	d107      	bne.n	2650 <syncReg+0x20>
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    2640:	bf00      	nop
    2642:	4b05      	ldr	r3, [pc, #20]	; (2658 <syncReg+0x28>)
    2644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2646:	9b01      	ldr	r3, [sp, #4]
    2648:	4013      	ands	r3, r2
    264a:	2b00      	cmp	r3, #0
    264c:	d1f9      	bne.n	2642 <syncReg+0x12>
    264e:	e000      	b.n	2652 <syncReg+0x22>
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    return;
    2650:	bf00      	nop

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
  }
}
    2652:	b002      	add	sp, #8
    2654:	4770      	bx	lr
    2656:	bf00      	nop
    2658:	400c8000 	.word	0x400c8000

0000265c <usbCClkGet>:
 *
 * @return
 *   USBC frequency in Hz
 ******************************************************************************/
static uint32_t usbCClkGet(void)
{
    265c:	b500      	push	{lr}
    265e:	b083      	sub	sp, #12
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_USBC);
    2660:	4810      	ldr	r0, [pc, #64]	; (26a4 <usbCClkGet+0x48>)
    2662:	f000 f973 	bl	294c <CMU_ClockSelectGet>
    2666:	4603      	mov	r3, r0
    2668:	f88d 3003 	strb.w	r3, [sp, #3]

  switch (clk) {
    266c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2670:	2b03      	cmp	r3, #3
    2672:	d007      	beq.n	2684 <usbCClkGet+0x28>
    2674:	2b09      	cmp	r3, #9
    2676:	d009      	beq.n	268c <usbCClkGet+0x30>
    2678:	2b02      	cmp	r3, #2
    267a:	d10b      	bne.n	2694 <usbCClkGet+0x38>
    case cmuSelect_LFXO:
      ret = SystemLFXOClockGet();
    267c:	f7ff fe20 	bl	22c0 <SystemLFXOClockGet>
    2680:	9001      	str	r0, [sp, #4]
      break;
    2682:	e00a      	b.n	269a <usbCClkGet+0x3e>
    case cmuSelect_LFRCO:
      ret = SystemLFRCOClockGet();
    2684:	f7ff fe14 	bl	22b0 <SystemLFRCOClockGet>
    2688:	9001      	str	r0, [sp, #4]
      break;
    268a:	e006      	b.n	269a <usbCClkGet+0x3e>
    case cmuSelect_USHFRCO:
      ret = ushfrcoFreq;
      break;
#endif
    case cmuSelect_HFCLK:
      ret = SystemHFClockGet();
    268c:	f7ff fd8e 	bl	21ac <SystemHFClockGet>
    2690:	9001      	str	r0, [sp, #4]
      break;
    2692:	e002      	b.n	269a <usbCClkGet+0x3e>
    default:
      /* Clock is not enabled */
      ret = 0;
    2694:	2300      	movs	r3, #0
    2696:	9301      	str	r3, [sp, #4]
      break;
    2698:	bf00      	nop
  }
  return ret;
    269a:	9b01      	ldr	r3, [sp, #4]
}
    269c:	4618      	mov	r0, r3
    269e:	b003      	add	sp, #12
    26a0:	f85d fb04 	ldr.w	pc, [sp], #4
    26a4:	00222307 	.word	0x00222307

000026a8 <CMU_ClockEnable>:
 * @param[in] enable
 *   @li true - enable specified clock.
 *   @li false - disable specified clock.
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
    26a8:	b500      	push	{lr}
    26aa:	b087      	sub	sp, #28
    26ac:	9001      	str	r0, [sp, #4]
    26ae:	460b      	mov	r3, r1
    26b0:	f88d 3003 	strb.w	r3, [sp, #3]
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
    26b4:	2300      	movs	r3, #0
    26b6:	9304      	str	r3, [sp, #16]

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
    26b8:	9b01      	ldr	r3, [sp, #4]
    26ba:	0a1b      	lsrs	r3, r3, #8
    26bc:	f003 030f 	and.w	r3, r3, #15
    26c0:	3b01      	subs	r3, #1
    26c2:	2b09      	cmp	r3, #9
    26c4:	d846      	bhi.n	2754 <CMU_ClockEnable+0xac>
    26c6:	a201      	add	r2, pc, #4	; (adr r2, 26cc <CMU_ClockEnable+0x24>)
    26c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    26cc:	00002709 	.word	0x00002709
    26d0:	0000270f 	.word	0x0000270f
    26d4:	000026f5 	.word	0x000026f5
    26d8:	00002755 	.word	0x00002755
    26dc:	00002755 	.word	0x00002755
    26e0:	00002715 	.word	0x00002715
    26e4:	0000271f 	.word	0x0000271f
    26e8:	00002755 	.word	0x00002755
    26ec:	00002755 	.word	0x00002755
    26f0:	00002729 	.word	0x00002729
      break;
#endif

#if defined(_CMU_HFCORECLKEN0_MASK)
    case CMU_HFCORECLKEN0_EN_REG:
      reg = &CMU->HFCORECLKEN0;
    26f4:	4b19      	ldr	r3, [pc, #100]	; (275c <CMU_ClockEnable+0xb4>)
    26f6:	9305      	str	r3, [sp, #20]
#if defined(CMU_MAX_FREQ_HFLE)
      setHfLeConfig(CMU_ClockFreqGet(cmuClock_HFLE));
    26f8:	4819      	ldr	r0, [pc, #100]	; (2760 <CMU_ClockEnable+0xb8>)
    26fa:	f000 f83d 	bl	2778 <CMU_ClockFreqGet>
    26fe:	4603      	mov	r3, r0
    2700:	4618      	mov	r0, r3
    2702:	f7ff fe6d 	bl	23e0 <setHfLeConfig>
#endif
      break;
    2706:	e012      	b.n	272e <CMU_ClockEnable+0x86>
      break;
#endif

#if defined(_CMU_HFPERCLKDIV_MASK)
    case CMU_HFPERCLKDIV_EN_REG:
      reg = &CMU->HFPERCLKDIV;
    2708:	4b16      	ldr	r3, [pc, #88]	; (2764 <CMU_ClockEnable+0xbc>)
    270a:	9305      	str	r3, [sp, #20]
      break;
    270c:	e00f      	b.n	272e <CMU_ClockEnable+0x86>
#endif

    case CMU_HFPERCLKEN0_EN_REG:
      reg = &CMU->HFPERCLKEN0;
    270e:	4b16      	ldr	r3, [pc, #88]	; (2768 <CMU_ClockEnable+0xc0>)
    2710:	9305      	str	r3, [sp, #20]
      break;
    2712:	e00c      	b.n	272e <CMU_ClockEnable+0x86>
      reg = &CMU->HFPERCLKEN1;
      break;
#endif

    case CMU_LFACLKEN0_EN_REG:
      reg  = &CMU->LFACLKEN0;
    2714:	4b15      	ldr	r3, [pc, #84]	; (276c <CMU_ClockEnable+0xc4>)
    2716:	9305      	str	r3, [sp, #20]
      sync = CMU_SYNCBUSY_LFACLKEN0;
    2718:	2301      	movs	r3, #1
    271a:	9304      	str	r3, [sp, #16]
      break;
    271c:	e007      	b.n	272e <CMU_ClockEnable+0x86>

    case CMU_LFBCLKEN0_EN_REG:
      reg  = &CMU->LFBCLKEN0;
    271e:	4b14      	ldr	r3, [pc, #80]	; (2770 <CMU_ClockEnable+0xc8>)
    2720:	9305      	str	r3, [sp, #20]
      sync = CMU_SYNCBUSY_LFBCLKEN0;
    2722:	2310      	movs	r3, #16
    2724:	9304      	str	r3, [sp, #16]
      break;
    2726:	e002      	b.n	272e <CMU_ClockEnable+0x86>
      reg = &CMU->USBCTRL;
      break;
#endif

    case CMU_PCNT_EN_REG:
      reg = &CMU->PCNTCTRL;
    2728:	4b12      	ldr	r3, [pc, #72]	; (2774 <CMU_ClockEnable+0xcc>)
    272a:	9305      	str	r3, [sp, #20]
      break;
    272c:	bf00      	nop
      EFM_ASSERT(0);
      return;
  }

  /* Get bit position used to enable/disable */
  bit = (clock >> CMU_EN_BIT_POS) & CMU_EN_BIT_MASK;
    272e:	9b01      	ldr	r3, [sp, #4]
    2730:	0b1b      	lsrs	r3, r3, #12
    2732:	f003 031f 	and.w	r3, r3, #31
    2736:	9303      	str	r3, [sp, #12]

  /* LF synchronization required? */
  if (sync) {
    2738:	9b04      	ldr	r3, [sp, #16]
    273a:	2b00      	cmp	r3, #0
    273c:	d002      	beq.n	2744 <CMU_ClockEnable+0x9c>
    syncReg(sync);
    273e:	9804      	ldr	r0, [sp, #16]
    2740:	f7ff ff76 	bl	2630 <syncReg>
  }

  /* Set/clear bit as requested */
  BUS_RegBitWrite(reg, bit, enable);
    2744:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2748:	461a      	mov	r2, r3
    274a:	9903      	ldr	r1, [sp, #12]
    274c:	9805      	ldr	r0, [sp, #20]
    274e:	f7ff fdbd 	bl	22cc <BUS_RegBitWrite>
    2752:	e000      	b.n	2756 <CMU_ClockEnable+0xae>
      reg = &CMU->PCNTCTRL;
      break;

    default: /* Cannot enable/disable clock point */
      EFM_ASSERT(0);
      return;
    2754:	bf00      	nop
    syncReg(sync);
  }

  /* Set/clear bit as requested */
  BUS_RegBitWrite(reg, bit, enable);
}
    2756:	b007      	add	sp, #28
    2758:	f85d fb04 	ldr.w	pc, [sp], #4
    275c:	400c8040 	.word	0x400c8040
    2760:	00024300 	.word	0x00024300
    2764:	400c8008 	.word	0x400c8008
    2768:	400c8044 	.word	0x400c8044
    276c:	400c8058 	.word	0x400c8058
    2770:	400c8060 	.word	0x400c8060
    2774:	400c8078 	.word	0x400c8078

00002778 <CMU_ClockFreqGet>:
 *
 * @return
 *   The current frequency in Hz.
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
    2778:	b510      	push	{r4, lr}
    277a:	b084      	sub	sp, #16
    277c:	9001      	str	r0, [sp, #4]
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
    277e:	9b01      	ldr	r3, [sp, #4]
    2780:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
    2784:	f5b3 1fb0 	cmp.w	r3, #1441792	; 0x160000
    2788:	f000 80ab 	beq.w	28e2 <CMU_ClockFreqGet+0x16a>
    278c:	f5b3 1fb0 	cmp.w	r3, #1441792	; 0x160000
    2790:	d81a      	bhi.n	27c8 <CMU_ClockFreqGet+0x50>
    2792:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
    2796:	f000 80bf 	beq.w	2918 <CMU_ClockFreqGet+0x1a0>
    279a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
    279e:	d808      	bhi.n	27b2 <CMU_ClockFreqGet+0x3a>
    27a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    27a4:	d03c      	beq.n	2820 <CMU_ClockFreqGet+0xa8>
    27a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    27aa:	d02d      	beq.n	2808 <CMU_ClockFreqGet+0x90>
    27ac:	2b00      	cmp	r3, #0
    27ae:	d027      	beq.n	2800 <CMU_ClockFreqGet+0x88>
    27b0:	e0be      	b.n	2930 <CMU_ClockFreqGet+0x1b8>
    27b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    27b6:	d03c      	beq.n	2832 <CMU_ClockFreqGet+0xba>
    27b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
    27bc:	d047      	beq.n	284e <CMU_ClockFreqGet+0xd6>
    27be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
    27c2:	f000 80ad 	beq.w	2920 <CMU_ClockFreqGet+0x1a8>
    27c6:	e0b3      	b.n	2930 <CMU_ClockFreqGet+0x1b8>
    27c8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
    27cc:	f000 80ac 	beq.w	2928 <CMU_ClockFreqGet+0x1b0>
    27d0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
    27d4:	d80a      	bhi.n	27ec <CMU_ClockFreqGet+0x74>
    27d6:	f5b3 1fd0 	cmp.w	r3, #1703936	; 0x1a0000
    27da:	d025      	beq.n	2828 <CMU_ClockFreqGet+0xb0>
    27dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
    27e0:	d07a      	beq.n	28d8 <CMU_ClockFreqGet+0x160>
    27e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
    27e6:	f000 8089 	beq.w	28fc <CMU_ClockFreqGet+0x184>
    27ea:	e0a1      	b.n	2930 <CMU_ClockFreqGet+0x1b8>
    27ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
    27f0:	d04e      	beq.n	2890 <CMU_ClockFreqGet+0x118>
    27f2:	f5b3 1f28 	cmp.w	r3, #2752512	; 0x2a0000
    27f6:	d062      	beq.n	28be <CMU_ClockFreqGet+0x146>
    27f8:	f5b3 1f18 	cmp.w	r3, #2490368	; 0x260000
    27fc:	d035      	beq.n	286a <CMU_ClockFreqGet+0xf2>
    27fe:	e097      	b.n	2930 <CMU_ClockFreqGet+0x1b8>
    case (CMU_HF_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
    2800:	f7ff fcd4 	bl	21ac <SystemHFClockGet>
    2804:	9003      	str	r0, [sp, #12]
      break;
    2806:	e096      	b.n	2936 <CMU_ClockFreqGet+0x1be>

    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
    2808:	f7ff fcd0 	bl	21ac <SystemHFClockGet>
    280c:	9003      	str	r0, [sp, #12]
      /* Calculate frequency after HFPER divider. */
#if defined(_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
    280e:	4b4c      	ldr	r3, [pc, #304]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    2810:	689b      	ldr	r3, [r3, #8]
              >> _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT;
    2812:	f003 030f 	and.w	r3, r3, #15

    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
      /* Calculate frequency after HFPER divider. */
#if defined(_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
    2816:	9a03      	ldr	r2, [sp, #12]
    2818:	fa22 f303 	lsr.w	r3, r2, r3
    281c:	9303      	str	r3, [sp, #12]
#endif
#if defined(_CMU_HFPERPRESC_PRESC_MASK)
      ret /= 1U + ((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK)
                   >> _CMU_HFPERPRESC_PRESC_SHIFT);
#endif
      break;
    281e:	e08a      	b.n	2936 <CMU_ClockFreqGet+0x1be>
      || defined(DMA_PRESENT) \
      || defined(EBI_PRESENT) \
      || defined(USB_PRESENT)
    case (CMU_HFCORE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = SystemCoreClockGet();
    2820:	f7ff fcaa 	bl	2178 <SystemCoreClockGet>
    2824:	9003      	str	r0, [sp, #12]
    } break;
    2826:	e086      	b.n	2936 <CMU_ClockFreqGet+0x1be>
#endif
#endif

    case (CMU_LFA_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    2828:	4846      	ldr	r0, [pc, #280]	; (2944 <CMU_ClockFreqGet+0x1cc>)
    282a:	f7ff fe8f 	bl	254c <lfClkGet>
    282e:	9003      	str	r0, [sp, #12]
      break;
    2830:	e081      	b.n	2936 <CMU_ClockFreqGet+0x1be>

#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    2832:	4844      	ldr	r0, [pc, #272]	; (2944 <CMU_ClockFreqGet+0x1cc>)
    2834:	f7ff fe8a 	bl	254c <lfClkGet>
    2838:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK)
    283a:	4b41      	ldr	r3, [pc, #260]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    283c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    283e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
              >> _CMU_LFAPRESC0_RTC_SHIFT;
    2842:	091b      	lsrs	r3, r3, #4
      break;

#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK)
    2844:	9a03      	ldr	r2, [sp, #12]
    2846:	fa22 f303 	lsr.w	r3, r2, r3
    284a:	9303      	str	r3, [sp, #12]
              >> _CMU_LFAPRESC0_RTC_SHIFT;
      break;
    284c:	e073      	b.n	2936 <CMU_ClockFreqGet+0x1be>
      break;
#endif

#if defined(_CMU_LFACLKEN0_LETIMER0_MASK)
    case (CMU_LETIMER0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    284e:	483d      	ldr	r0, [pc, #244]	; (2944 <CMU_ClockFreqGet+0x1cc>)
    2850:	f7ff fe7c 	bl	254c <lfClkGet>
    2854:	9003      	str	r0, [sp, #12]
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK)
    2856:	4b3a      	ldr	r3, [pc, #232]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    2858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    285a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
              >> _CMU_LFAPRESC0_LETIMER0_SHIFT;
    285e:	0a1b      	lsrs	r3, r3, #8

#if defined(_CMU_LFACLKEN0_LETIMER0_MASK)
    case (CMU_LETIMER0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK)
    2860:	9a03      	ldr	r2, [sp, #12]
    2862:	fa22 f303 	lsr.w	r3, r2, r3
    2866:	9303      	str	r3, [sp, #12]
              >> _CMU_LFAPRESC0_LETIMER0_SHIFT;
#else
      ret /= CMU_Log2ToDiv((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK)
                           >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
#endif
      break;
    2868:	e065      	b.n	2936 <CMU_ClockFreqGet+0x1be>
#endif

#if defined(_CMU_LFACLKEN0_LCD_MASK)
    case (CMU_LCDPRE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    286a:	4836      	ldr	r0, [pc, #216]	; (2944 <CMU_ClockFreqGet+0x1cc>)
    286c:	f7ff fe6e 	bl	254c <lfClkGet>
    2870:	9003      	str	r0, [sp, #12]
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK)
    2872:	4b33      	ldr	r3, [pc, #204]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    2874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2876:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
               >> _CMU_LFAPRESC0_LCD_SHIFT)
    287a:	0b1c      	lsrs	r4, r3, #12
              + CMU_DivToLog2(cmuClkDiv_16);
    287c:	2010      	movs	r0, #16
    287e:	f7ff fd47 	bl	2310 <CMU_DivToLog2>
    2882:	4603      	mov	r3, r0
    2884:	4423      	add	r3, r4

#if defined(_CMU_LFACLKEN0_LCD_MASK)
    case (CMU_LCDPRE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK)
    2886:	9a03      	ldr	r2, [sp, #12]
    2888:	fa22 f303 	lsr.w	r3, r2, r3
    288c:	9303      	str	r3, [sp, #12]
              + CMU_DivToLog2(cmuClkDiv_16);
#else
      ret /= CMU_Log2ToDiv((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK)
                           >> _CMU_LFAPRESC0_LCD_SHIFT);
#endif
      break;
    288e:	e052      	b.n	2936 <CMU_ClockFreqGet+0x1be>

#if defined(_CMU_LCDCTRL_MASK)
    case (CMU_LCD_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    2890:	482c      	ldr	r0, [pc, #176]	; (2944 <CMU_ClockFreqGet+0x1cc>)
    2892:	f7ff fe5b 	bl	254c <lfClkGet>
    2896:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK)
    2898:	4b29      	ldr	r3, [pc, #164]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    289a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    289c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
              >> _CMU_LFAPRESC0_LCD_SHIFT;
    28a0:	0b1b      	lsrs	r3, r3, #12
      break;

#if defined(_CMU_LCDCTRL_MASK)
    case (CMU_LCD_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK)
    28a2:	9a03      	ldr	r2, [sp, #12]
    28a4:	fa22 f303 	lsr.w	r3, r2, r3
    28a8:	9303      	str	r3, [sp, #12]
              >> _CMU_LFAPRESC0_LCD_SHIFT;
      ret /= 1U + ((CMU->LCDCTRL & _CMU_LCDCTRL_FDIV_MASK)
    28aa:	4b25      	ldr	r3, [pc, #148]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    28ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
                   >> _CMU_LCDCTRL_FDIV_SHIFT);
    28ae:	f003 0307 	and.w	r3, r3, #7
#if defined(_CMU_LCDCTRL_MASK)
    case (CMU_LCD_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK)
              >> _CMU_LFAPRESC0_LCD_SHIFT;
      ret /= 1U + ((CMU->LCDCTRL & _CMU_LCDCTRL_FDIV_MASK)
    28b2:	3301      	adds	r3, #1
    28b4:	9a03      	ldr	r2, [sp, #12]
    28b6:	fbb2 f3f3 	udiv	r3, r2, r3
    28ba:	9303      	str	r3, [sp, #12]
                   >> _CMU_LCDCTRL_FDIV_SHIFT);
      break;
    28bc:	e03b      	b.n	2936 <CMU_ClockFreqGet+0x1be>
#endif
#endif

#if defined(_CMU_LFACLKEN0_LESENSE_MASK)
    case (CMU_LESENSE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    28be:	4821      	ldr	r0, [pc, #132]	; (2944 <CMU_ClockFreqGet+0x1cc>)
    28c0:	f7ff fe44 	bl	254c <lfClkGet>
    28c4:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK)
    28c6:	4b1e      	ldr	r3, [pc, #120]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    28c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
    28ca:	f003 0303 	and.w	r3, r3, #3
#endif

#if defined(_CMU_LFACLKEN0_LESENSE_MASK)
    case (CMU_LESENSE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK)
    28ce:	9a03      	ldr	r2, [sp, #12]
    28d0:	fa22 f303 	lsr.w	r3, r2, r3
    28d4:	9303      	str	r3, [sp, #12]
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
      break;
    28d6:	e02e      	b.n	2936 <CMU_ClockFreqGet+0x1be>
#endif

    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    28d8:	481b      	ldr	r0, [pc, #108]	; (2948 <CMU_ClockFreqGet+0x1d0>)
    28da:	f7ff fe37 	bl	254c <lfClkGet>
    28de:	9003      	str	r0, [sp, #12]
      break;
    28e0:	e029      	b.n	2936 <CMU_ClockFreqGet+0x1be>

#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    28e2:	4819      	ldr	r0, [pc, #100]	; (2948 <CMU_ClockFreqGet+0x1d0>)
    28e4:	f7ff fe32 	bl	254c <lfClkGet>
    28e8:	9003      	str	r0, [sp, #12]
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
    28ea:	4b15      	ldr	r3, [pc, #84]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    28ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
              >> _CMU_LFBPRESC0_LEUART0_SHIFT;
    28ee:	f003 0303 	and.w	r3, r3, #3

#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
    28f2:	9a03      	ldr	r2, [sp, #12]
    28f4:	fa22 f303 	lsr.w	r3, r2, r3
    28f8:	9303      	str	r3, [sp, #12]
              >> _CMU_LFBPRESC0_LEUART0_SHIFT;
#else
      ret /= CMU_Log2ToDiv((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
                           >> _CMU_LFBPRESC0_LEUART0_SHIFT);
#endif
      break;
    28fa:	e01c      	b.n	2936 <CMU_ClockFreqGet+0x1be>
#endif

#if defined(_CMU_LFBCLKEN0_LEUART1_MASK)
    case (CMU_LEUART1_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    28fc:	4812      	ldr	r0, [pc, #72]	; (2948 <CMU_ClockFreqGet+0x1d0>)
    28fe:	f7ff fe25 	bl	254c <lfClkGet>
    2902:	9003      	str	r0, [sp, #12]
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK)
    2904:	4b0e      	ldr	r3, [pc, #56]	; (2940 <CMU_ClockFreqGet+0x1c8>)
    2906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2908:	f003 0330 	and.w	r3, r3, #48	; 0x30
              >> _CMU_LFBPRESC0_LEUART1_SHIFT;
    290c:	091b      	lsrs	r3, r3, #4

#if defined(_CMU_LFBCLKEN0_LEUART1_MASK)
    case (CMU_LEUART1_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK)
    290e:	9a03      	ldr	r2, [sp, #12]
    2910:	fa22 f303 	lsr.w	r3, r2, r3
    2914:	9303      	str	r3, [sp, #12]
              >> _CMU_LFBPRESC0_LEUART1_SHIFT;
#else
      ret /= CMU_Log2ToDiv((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK)
                           >> _CMU_LFBPRESC0_LEUART1_SHIFT);
#endif
      break;
    2916:	e00e      	b.n	2936 <CMU_ClockFreqGet+0x1be>
      ret = lfClkGet(cmuClock_LFE);
      break;
#endif

    case (CMU_DBG_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = dbgClkGet();
    2918:	f7ff fdf8 	bl	250c <dbgClkGet>
    291c:	9003      	str	r0, [sp, #12]
      break;
    291e:	e00a      	b.n	2936 <CMU_ClockFreqGet+0x1be>

    case (CMU_AUX_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = auxClkGet();
    2920:	f7ff fd9c 	bl	245c <auxClkGet>
    2924:	9003      	str	r0, [sp, #12]
      break;
    2926:	e006      	b.n	2936 <CMU_ClockFreqGet+0x1be>

#if defined(USBC_CLOCK_PRESENT)
    case (CMU_USBC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = usbCClkGet();
    2928:	f7ff fe98 	bl	265c <usbCClkGet>
    292c:	9003      	str	r0, [sp, #12]
      break;
    292e:	e002      	b.n	2936 <CMU_ClockFreqGet+0x1be>
      break;
#endif

    default:
      EFM_ASSERT(0);
      ret = 0;
    2930:	2300      	movs	r3, #0
    2932:	9303      	str	r3, [sp, #12]
      break;
    2934:	bf00      	nop
  }

  return ret;
    2936:	9b03      	ldr	r3, [sp, #12]
}
    2938:	4618      	mov	r0, r3
    293a:	b004      	add	sp, #16
    293c:	bd10      	pop	{r4, pc}
    293e:	bf00      	nop
    2940:	400c8000 	.word	0x400c8000
    2944:	001a0002 	.word	0x001a0002
    2948:	001c0003 	.word	0x001c0003

0000294c <CMU_ClockSelectGet>:
 * @return
 *   Reference clock used for clocking selected branch, #cmuSelect_Error if
 *   invalid @p clock provided.
 ******************************************************************************/
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
    294c:	b084      	sub	sp, #16
    294e:	9001      	str	r0, [sp, #4]
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
    2950:	2301      	movs	r3, #1
    2952:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
    2956:	9b01      	ldr	r3, [sp, #4]
    2958:	f003 030f 	and.w	r3, r3, #15
    295c:	9302      	str	r3, [sp, #8]

  switch (selReg) {
    295e:	9b02      	ldr	r3, [sp, #8]
    2960:	3b01      	subs	r3, #1
    2962:	2b06      	cmp	r3, #6
    2964:	f200 80a6 	bhi.w	2ab4 <CMU_ClockSelectGet+0x168>
    2968:	a201      	add	r2, pc, #4	; (adr r2, 2970 <CMU_ClockSelectGet+0x24>)
    296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    296e:	bf00      	nop
    2970:	0000298d 	.word	0x0000298d
    2974:	000029cb 	.word	0x000029cb
    2978:	00002a0f 	.word	0x00002a0f
    297c:	00002ab5 	.word	0x00002ab5
    2980:	00002ab5 	.word	0x00002ab5
    2984:	00002a53 	.word	0x00002a53
    2988:	00002a79 	.word	0x00002a79
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
    298c:	4b4e      	ldr	r3, [pc, #312]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_HFRCOSEL
    2990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
    2994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    2998:	d00a      	beq.n	29b0 <CMU_ClockSelectGet+0x64>
    299a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    299e:	d003      	beq.n	29a8 <CMU_ClockSelectGet+0x5c>
    29a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    29a4:	d008      	beq.n	29b8 <CMU_ClockSelectGet+0x6c>
    29a6:	e00b      	b.n	29c0 <CMU_ClockSelectGet+0x74>
#if defined(CMU_STATUS_USHFRCODIV2SEL)
                 | CMU_STATUS_USHFRCODIV2SEL
#endif
                 | CMU_STATUS_LFXOSEL)) {
        case CMU_STATUS_LFXOSEL:
          ret = cmuSelect_LFXO;
    29a8:	2302      	movs	r3, #2
    29aa:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29ae:	e00b      	b.n	29c8 <CMU_ClockSelectGet+0x7c>

        case CMU_STATUS_LFRCOSEL:
          ret = cmuSelect_LFRCO;
    29b0:	2303      	movs	r3, #3
    29b2:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29b6:	e007      	b.n	29c8 <CMU_ClockSelectGet+0x7c>

        case CMU_STATUS_HFXOSEL:
          ret = cmuSelect_HFXO;
    29b8:	2304      	movs	r3, #4
    29ba:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29be:	e003      	b.n	29c8 <CMU_ClockSelectGet+0x7c>
          ret = cmuSelect_USHFRCODIV2;
          break;
#endif

        default:
          ret = cmuSelect_HFRCO;
    29c0:	2305      	movs	r3, #5
    29c2:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29c6:	bf00      	nop
      }
#endif
      break;
    29c8:	e078      	b.n	2abc <CMU_ClockSelectGet+0x170>

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFACLKSEL_MASK)
    case CMU_LFACLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) {
    29ca:	4b3f      	ldr	r3, [pc, #252]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    29cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29ce:	f003 0303 	and.w	r3, r3, #3
    29d2:	2b02      	cmp	r3, #2
    29d4:	d007      	beq.n	29e6 <CMU_ClockSelectGet+0x9a>
    29d6:	2b03      	cmp	r3, #3
    29d8:	d009      	beq.n	29ee <CMU_ClockSelectGet+0xa2>
    29da:	2b01      	cmp	r3, #1
    29dc:	d10b      	bne.n	29f6 <CMU_ClockSelectGet+0xaa>
        case CMU_LFCLKSEL_LFA_LFRCO:
          ret = cmuSelect_LFRCO;
    29de:	2303      	movs	r3, #3
    29e0:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29e4:	e012      	b.n	2a0c <CMU_ClockSelectGet+0xc0>

        case CMU_LFCLKSEL_LFA_LFXO:
          ret = cmuSelect_LFXO;
    29e6:	2302      	movs	r3, #2
    29e8:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29ec:	e00e      	b.n	2a0c <CMU_ClockSelectGet+0xc0>

#if defined(CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2)
        case CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2:
          ret = cmuSelect_HFCLKLE;
    29ee:	2306      	movs	r3, #6
    29f0:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    29f4:	e00a      	b.n	2a0c <CMU_ClockSelectGet+0xc0>
#endif

        default:
#if defined(CMU_LFCLKSEL_LFAE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFAE_MASK) {
    29f6:	4b34      	ldr	r3, [pc, #208]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    29f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    29fe:	2b00      	cmp	r3, #0
    2a00:	d003      	beq.n	2a0a <CMU_ClockSelectGet+0xbe>
            ret = cmuSelect_ULFRCO;
    2a02:	230a      	movs	r3, #10
    2a04:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
    2a08:	e000      	b.n	2a0c <CMU_ClockSelectGet+0xc0>
          }
#else
          ret = cmuSelect_Disabled;
#endif
          break;
    2a0a:	bf00      	nop
        default:
          ret = cmuSelect_Disabled;
          break;
      }
#endif
      break;
    2a0c:	e056      	b.n	2abc <CMU_ClockSelectGet+0x170>
#endif /* _CMU_LFCLKSEL_MASK || _CMU_LFACLKSEL_MASK */

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFBCLKSEL_MASK)
    case CMU_LFBCLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) {
    2a0e:	4b2e      	ldr	r3, [pc, #184]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    2a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a12:	f003 030c 	and.w	r3, r3, #12
    2a16:	2b08      	cmp	r3, #8
    2a18:	d007      	beq.n	2a2a <CMU_ClockSelectGet+0xde>
    2a1a:	2b0c      	cmp	r3, #12
    2a1c:	d009      	beq.n	2a32 <CMU_ClockSelectGet+0xe6>
    2a1e:	2b04      	cmp	r3, #4
    2a20:	d10b      	bne.n	2a3a <CMU_ClockSelectGet+0xee>
        case CMU_LFCLKSEL_LFB_LFRCO:
          ret = cmuSelect_LFRCO;
    2a22:	2303      	movs	r3, #3
    2a24:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2a28:	e012      	b.n	2a50 <CMU_ClockSelectGet+0x104>

        case CMU_LFCLKSEL_LFB_LFXO:
          ret = cmuSelect_LFXO;
    2a2a:	2302      	movs	r3, #2
    2a2c:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2a30:	e00e      	b.n	2a50 <CMU_ClockSelectGet+0x104>

#if defined(CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2)
        case CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2:
          ret = cmuSelect_HFCLKLE;
    2a32:	2306      	movs	r3, #6
    2a34:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2a38:	e00a      	b.n	2a50 <CMU_ClockSelectGet+0x104>
          break;
#endif

        default:
#if defined(CMU_LFCLKSEL_LFBE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFBE_MASK) {
    2a3a:	4b23      	ldr	r3, [pc, #140]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    2a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    2a42:	2b00      	cmp	r3, #0
    2a44:	d003      	beq.n	2a4e <CMU_ClockSelectGet+0x102>
            ret = cmuSelect_ULFRCO;
    2a46:	230a      	movs	r3, #10
    2a48:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
    2a4c:	e000      	b.n	2a50 <CMU_ClockSelectGet+0x104>
          }
#else
          ret = cmuSelect_Disabled;
#endif
          break;
    2a4e:	bf00      	nop
        default:
          ret = cmuSelect_Disabled;
          break;
      }
#endif
      break;
    2a50:	e034      	b.n	2abc <CMU_ClockSelectGet+0x170>
          ret = cmuSelect_AUXHFRCO;
          break;
      }

#elif defined(_CMU_CTRL_DBGCLK_MASK)
      switch (CMU->CTRL & _CMU_CTRL_DBGCLK_MASK) {
    2a52:	4b1d      	ldr	r3, [pc, #116]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d003      	beq.n	2a66 <CMU_ClockSelectGet+0x11a>
    2a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    2a62:	d004      	beq.n	2a6e <CMU_ClockSelectGet+0x122>
          break;
      }
#else
      ret = cmuSelect_AUXHFRCO;
#endif
      break;
    2a64:	e02a      	b.n	2abc <CMU_ClockSelectGet+0x170>
      }

#elif defined(_CMU_CTRL_DBGCLK_MASK)
      switch (CMU->CTRL & _CMU_CTRL_DBGCLK_MASK) {
        case CMU_CTRL_DBGCLK_AUXHFRCO:
          ret = cmuSelect_AUXHFRCO;
    2a66:	2307      	movs	r3, #7
    2a68:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2a6c:	e003      	b.n	2a76 <CMU_ClockSelectGet+0x12a>

        case CMU_CTRL_DBGCLK_HFCLK:
          ret = cmuSelect_HFCLK;
    2a6e:	2309      	movs	r3, #9
    2a70:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2a74:	bf00      	nop
      }
#else
      ret = cmuSelect_AUXHFRCO;
#endif
      break;
    2a76:	e021      	b.n	2abc <CMU_ClockSelectGet+0x170>

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
    2a78:	4b13      	ldr	r3, [pc, #76]	; (2ac8 <CMU_ClockSelectGet+0x17c>)
    2a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_USBCLFXOSEL
    2a7c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
#endif
      break;

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
    2a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2a84:	d009      	beq.n	2a9a <CMU_ClockSelectGet+0x14e>
    2a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2a8a:	d00a      	beq.n	2aa2 <CMU_ClockSelectGet+0x156>
    2a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2a90:	d10b      	bne.n	2aaa <CMU_ClockSelectGet+0x15e>
                 | CMU_STATUS_USBCUSHFRCOSEL
#endif
                 | CMU_STATUS_USBCLFRCOSEL)) {
#if defined(_CMU_STATUS_USBCHFCLKSEL_MASK)
        case CMU_STATUS_USBCHFCLKSEL:
          ret = cmuSelect_HFCLK;
    2a92:	2309      	movs	r3, #9
    2a94:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2a98:	e00b      	b.n	2ab2 <CMU_ClockSelectGet+0x166>
          ret = cmuSelect_USHFRCO;
          break;
#endif

        case CMU_STATUS_USBCLFXOSEL:
          ret = cmuSelect_LFXO;
    2a9a:	2302      	movs	r3, #2
    2a9c:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2aa0:	e007      	b.n	2ab2 <CMU_ClockSelectGet+0x166>

        case CMU_STATUS_USBCLFRCOSEL:
          ret = cmuSelect_LFRCO;
    2aa2:	2303      	movs	r3, #3
    2aa4:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2aa8:	e003      	b.n	2ab2 <CMU_ClockSelectGet+0x166>

        default:
          ret = cmuSelect_Disabled;
    2aaa:	2301      	movs	r3, #1
    2aac:	f88d 300f 	strb.w	r3, [sp, #15]
          break;
    2ab0:	bf00      	nop
      }
      break;
    2ab2:	e003      	b.n	2abc <CMU_ClockSelectGet+0x170>
      break;
#endif

    default:
      EFM_ASSERT(0);
      ret = cmuSelect_Error;
    2ab4:	2300      	movs	r3, #0
    2ab6:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
    2aba:	bf00      	nop
  }

  return ret;
    2abc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2ac0:	4618      	mov	r0, r3
    2ac2:	b004      	add	sp, #16
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop
    2ac8:	400c8000 	.word	0x400c8000

00002acc <BUS_RegBitWrite>:
 * @param[in] val Value to set bit to, 0 or 1
 ******************************************************************************/
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
    2acc:	b086      	sub	sp, #24
    2ace:	9003      	str	r0, [sp, #12]
    2ad0:	9102      	str	r1, [sp, #8]
    2ad2:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    2ad4:	9b03      	ldr	r3, [sp, #12]
    2ad6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    2ada:	00da      	lsls	r2, r3, #3
    2adc:	9b02      	ldr	r3, [sp, #8]
    2ade:	4413      	add	r3, r2
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    2ae0:	009b      	lsls	r3, r3, #2
    2ae2:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    2ae4:	9b05      	ldr	r3, [sp, #20]
    2ae6:	9a01      	ldr	r2, [sp, #4]
    2ae8:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;

  /* Make sure val is not more than 1, because we only want to set one bit. */
  *addr = (tmp & ~(1 << bit)) | ((val & 1) << bit);
#endif
}
    2aea:	bf00      	nop
    2aec:	b006      	add	sp, #24
    2aee:	4770      	bx	lr

00002af0 <EBI_RouteBitWrite>:
 *
 * @param[in] val
 *   0 to clear bit and 1 to set bit
 ******************************************************************************/
__STATIC_INLINE void EBI_RouteBitWrite(uint32_t bit, uint32_t val)
{
    2af0:	b500      	push	{lr}
    2af2:	b083      	sub	sp, #12
    2af4:	9001      	str	r0, [sp, #4]
    2af6:	9100      	str	r1, [sp, #0]
  BUS_RegBitWrite(&(EBI_GENERIC_ROUTE_REG), bit, val);
    2af8:	9a00      	ldr	r2, [sp, #0]
    2afa:	9901      	ldr	r1, [sp, #4]
    2afc:	4803      	ldr	r0, [pc, #12]	; (2b0c <EBI_RouteBitWrite+0x1c>)
    2afe:	f7ff ffe5 	bl	2acc <BUS_RegBitWrite>
}
    2b02:	bf00      	nop
    2b04:	b003      	add	sp, #12
    2b06:	f85d fb04 	ldr.w	pc, [sp], #4
    2b0a:	bf00      	nop
    2b0c:	40008014 	.word	0x40008014

00002b10 <EBI_Init>:
 * @note
 *   GPIO lines must be configured as PUSH_PULL for correct operation
 *   GPIO and EBI clocks must be enabled in the CMU
 ******************************************************************************/
void EBI_Init(const EBI_Init_TypeDef *ebiInit)
{
    2b10:	b500      	push	{lr}
    2b12:	b085      	sub	sp, #20
    2b14:	9001      	str	r0, [sp, #4]
  uint32_t ctrl = EBI->CTRL;
    2b16:	4b87      	ldr	r3, [pc, #540]	; (2d34 <EBI_Init+0x224>)
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	9303      	str	r3, [sp, #12]
  EBI_PolaritySet(ebiLineRE, ebiInit->rePolarity);
  /* Set polarity of chip select lines */
  EBI_PolaritySet(ebiLineCS, ebiInit->csPolarity);
#else
  /* Enable Independent Timing for devices that supports it */
  ctrl |= EBI_CTRL_ITS;
    2b1c:	9b03      	ldr	r3, [sp, #12]
    2b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2b22:	9303      	str	r3, [sp, #12]

  /* Set polarity of address ready */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineARDY, ebiInit->ardyPolarity);
    2b24:	9b01      	ldr	r3, [sp, #4]
    2b26:	68d8      	ldr	r0, [r3, #12]
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	785b      	ldrb	r3, [r3, #1]
    2b2c:	461a      	mov	r2, r3
    2b2e:	2100      	movs	r1, #0
    2b30:	f000 fbe8 	bl	3304 <EBI_BankPolaritySet>
  /* Set polarity of address latch enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineALE, ebiInit->alePolarity);
    2b34:	9b01      	ldr	r3, [sp, #4]
    2b36:	68d8      	ldr	r0, [r3, #12]
    2b38:	9b01      	ldr	r3, [sp, #4]
    2b3a:	789b      	ldrb	r3, [r3, #2]
    2b3c:	461a      	mov	r2, r3
    2b3e:	2101      	movs	r1, #1
    2b40:	f000 fbe0 	bl	3304 <EBI_BankPolaritySet>
  /* Set polarity of write enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineWE, ebiInit->wePolarity);
    2b44:	9b01      	ldr	r3, [sp, #4]
    2b46:	68d8      	ldr	r0, [r3, #12]
    2b48:	9b01      	ldr	r3, [sp, #4]
    2b4a:	78db      	ldrb	r3, [r3, #3]
    2b4c:	461a      	mov	r2, r3
    2b4e:	2102      	movs	r1, #2
    2b50:	f000 fbd8 	bl	3304 <EBI_BankPolaritySet>
  /* Set polarity of read enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineRE, ebiInit->rePolarity);
    2b54:	9b01      	ldr	r3, [sp, #4]
    2b56:	68d8      	ldr	r0, [r3, #12]
    2b58:	9b01      	ldr	r3, [sp, #4]
    2b5a:	791b      	ldrb	r3, [r3, #4]
    2b5c:	461a      	mov	r2, r3
    2b5e:	2103      	movs	r1, #3
    2b60:	f000 fbd0 	bl	3304 <EBI_BankPolaritySet>
  /* Set polarity of chip select lines */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineCS, ebiInit->csPolarity);
    2b64:	9b01      	ldr	r3, [sp, #4]
    2b66:	68d8      	ldr	r0, [r3, #12]
    2b68:	9b01      	ldr	r3, [sp, #4]
    2b6a:	795b      	ldrb	r3, [r3, #5]
    2b6c:	461a      	mov	r2, r3
    2b6e:	2104      	movs	r1, #4
    2b70:	f000 fbc8 	bl	3304 <EBI_BankPolaritySet>
  /* Set polarity of byte lane line */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineBL, ebiInit->blPolarity);
    2b74:	9b01      	ldr	r3, [sp, #4]
    2b76:	68d8      	ldr	r0, [r3, #12]
    2b78:	9b01      	ldr	r3, [sp, #4]
    2b7a:	799b      	ldrb	r3, [r3, #6]
    2b7c:	461a      	mov	r2, r3
    2b7e:	2105      	movs	r1, #5
    2b80:	f000 fbc0 	bl	3304 <EBI_BankPolaritySet>
  }
  ctrl |= ebiInit->mode;
  ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
  ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
#else
  if (ebiInit->banks & EBI_BANK0) {
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	68db      	ldr	r3, [r3, #12]
    2b88:	f003 0302 	and.w	r3, r3, #2
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d02e      	beq.n	2bee <EBI_Init+0xde>
    ctrl &= ~(_EBI_CTRL_MODE_MASK
    2b90:	9a03      	ldr	r2, [sp, #12]
    2b92:	4b69      	ldr	r3, [pc, #420]	; (2d38 <EBI_Init+0x228>)
    2b94:	4013      	ands	r3, r2
    2b96:	9303      	str	r3, [sp, #12]
              | _EBI_CTRL_ARDYEN_MASK
              | _EBI_CTRL_ARDYTODIS_MASK
              | _EBI_CTRL_BL_MASK
              | _EBI_CTRL_NOIDLE_MASK
              | _EBI_CTRL_BANK0EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE_SHIFT);
    2b98:	9b01      	ldr	r3, [sp, #4]
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	461a      	mov	r2, r3
    2b9e:	9b03      	ldr	r3, [sp, #12]
    2ba0:	4313      	orrs	r3, r2
    2ba2:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
    2ba4:	9b01      	ldr	r3, [sp, #4]
    2ba6:	7a5b      	ldrb	r3, [r3, #9]
    2ba8:	041b      	lsls	r3, r3, #16
    2baa:	461a      	mov	r2, r3
    2bac:	9b03      	ldr	r3, [sp, #12]
    2bae:	4313      	orrs	r3, r2
    2bb0:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
    2bb2:	9b01      	ldr	r3, [sp, #4]
    2bb4:	7a9b      	ldrb	r3, [r3, #10]
    2bb6:	045b      	lsls	r3, r3, #17
    2bb8:	461a      	mov	r2, r3
    2bba:	9b03      	ldr	r3, [sp, #12]
    2bbc:	4313      	orrs	r3, r2
    2bbe:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL_SHIFT);
    2bc0:	9b01      	ldr	r3, [sp, #4]
    2bc2:	79db      	ldrb	r3, [r3, #7]
    2bc4:	061b      	lsls	r3, r3, #24
    2bc6:	461a      	mov	r2, r3
    2bc8:	9b03      	ldr	r3, [sp, #12]
    2bca:	4313      	orrs	r3, r2
    2bcc:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE_SHIFT);
    2bce:	9b01      	ldr	r3, [sp, #4]
    2bd0:	7a1b      	ldrb	r3, [r3, #8]
    2bd2:	031b      	lsls	r3, r3, #12
    2bd4:	461a      	mov	r2, r3
    2bd6:	9b03      	ldr	r3, [sp, #12]
    2bd8:	4313      	orrs	r3, r2
    2bda:	9303      	str	r3, [sp, #12]
    if ( ebiInit->enable) {
    2bdc:	9b01      	ldr	r3, [sp, #4]
    2bde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    2be2:	2b00      	cmp	r3, #0
    2be4:	d003      	beq.n	2bee <EBI_Init+0xde>
      ctrl |= EBI_CTRL_BANK0EN;
    2be6:	9b03      	ldr	r3, [sp, #12]
    2be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2bec:	9303      	str	r3, [sp, #12]
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    2bee:	9b01      	ldr	r3, [sp, #4]
    2bf0:	68db      	ldr	r3, [r3, #12]
    2bf2:	f003 0304 	and.w	r3, r3, #4
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d02f      	beq.n	2c5a <EBI_Init+0x14a>
    ctrl &= ~(_EBI_CTRL_BL1_MASK
    2bfa:	9a03      	ldr	r2, [sp, #12]
    2bfc:	4b4f      	ldr	r3, [pc, #316]	; (2d3c <EBI_Init+0x22c>)
    2bfe:	4013      	ands	r3, r2
    2c00:	9303      	str	r3, [sp, #12]
              | _EBI_CTRL_MODE1_MASK
              | _EBI_CTRL_ARDY1EN_MASK
              | _EBI_CTRL_ARDYTO1DIS_MASK
              | _EBI_CTRL_NOIDLE1_MASK
              | _EBI_CTRL_BANK1EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE1_SHIFT);
    2c02:	9b01      	ldr	r3, [sp, #4]
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	009b      	lsls	r3, r3, #2
    2c08:	461a      	mov	r2, r3
    2c0a:	9b03      	ldr	r3, [sp, #12]
    2c0c:	4313      	orrs	r3, r2
    2c0e:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY1EN_SHIFT);
    2c10:	9b01      	ldr	r3, [sp, #4]
    2c12:	7a5b      	ldrb	r3, [r3, #9]
    2c14:	049b      	lsls	r3, r3, #18
    2c16:	461a      	mov	r2, r3
    2c18:	9b03      	ldr	r3, [sp, #12]
    2c1a:	4313      	orrs	r3, r2
    2c1c:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO1DIS_SHIFT);
    2c1e:	9b01      	ldr	r3, [sp, #4]
    2c20:	7a9b      	ldrb	r3, [r3, #10]
    2c22:	04db      	lsls	r3, r3, #19
    2c24:	461a      	mov	r2, r3
    2c26:	9b03      	ldr	r3, [sp, #12]
    2c28:	4313      	orrs	r3, r2
    2c2a:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL1_SHIFT);
    2c2c:	9b01      	ldr	r3, [sp, #4]
    2c2e:	79db      	ldrb	r3, [r3, #7]
    2c30:	065b      	lsls	r3, r3, #25
    2c32:	461a      	mov	r2, r3
    2c34:	9b03      	ldr	r3, [sp, #12]
    2c36:	4313      	orrs	r3, r2
    2c38:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE1_SHIFT);
    2c3a:	9b01      	ldr	r3, [sp, #4]
    2c3c:	7a1b      	ldrb	r3, [r3, #8]
    2c3e:	035b      	lsls	r3, r3, #13
    2c40:	461a      	mov	r2, r3
    2c42:	9b03      	ldr	r3, [sp, #12]
    2c44:	4313      	orrs	r3, r2
    2c46:	9303      	str	r3, [sp, #12]
    if ( ebiInit->enable) {
    2c48:	9b01      	ldr	r3, [sp, #4]
    2c4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d003      	beq.n	2c5a <EBI_Init+0x14a>
      ctrl |= EBI_CTRL_BANK1EN;
    2c52:	9b03      	ldr	r3, [sp, #12]
    2c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2c58:	9303      	str	r3, [sp, #12]
    }
  }
  if (ebiInit->banks & EBI_BANK2) {
    2c5a:	9b01      	ldr	r3, [sp, #4]
    2c5c:	68db      	ldr	r3, [r3, #12]
    2c5e:	f003 0308 	and.w	r3, r3, #8
    2c62:	2b00      	cmp	r3, #0
    2c64:	d02f      	beq.n	2cc6 <EBI_Init+0x1b6>
    ctrl &= ~(_EBI_CTRL_BL2_MASK
    2c66:	9a03      	ldr	r2, [sp, #12]
    2c68:	4b35      	ldr	r3, [pc, #212]	; (2d40 <EBI_Init+0x230>)
    2c6a:	4013      	ands	r3, r2
    2c6c:	9303      	str	r3, [sp, #12]
              | _EBI_CTRL_MODE2_MASK
              | _EBI_CTRL_ARDY2EN_MASK
              | _EBI_CTRL_ARDYTO2DIS_MASK
              | _EBI_CTRL_NOIDLE2_MASK
              | _EBI_CTRL_BANK2EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE2_SHIFT);
    2c6e:	9b01      	ldr	r3, [sp, #4]
    2c70:	781b      	ldrb	r3, [r3, #0]
    2c72:	011b      	lsls	r3, r3, #4
    2c74:	461a      	mov	r2, r3
    2c76:	9b03      	ldr	r3, [sp, #12]
    2c78:	4313      	orrs	r3, r2
    2c7a:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY2EN_SHIFT);
    2c7c:	9b01      	ldr	r3, [sp, #4]
    2c7e:	7a5b      	ldrb	r3, [r3, #9]
    2c80:	051b      	lsls	r3, r3, #20
    2c82:	461a      	mov	r2, r3
    2c84:	9b03      	ldr	r3, [sp, #12]
    2c86:	4313      	orrs	r3, r2
    2c88:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO2DIS_SHIFT);
    2c8a:	9b01      	ldr	r3, [sp, #4]
    2c8c:	7a9b      	ldrb	r3, [r3, #10]
    2c8e:	055b      	lsls	r3, r3, #21
    2c90:	461a      	mov	r2, r3
    2c92:	9b03      	ldr	r3, [sp, #12]
    2c94:	4313      	orrs	r3, r2
    2c96:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL2_SHIFT);
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	79db      	ldrb	r3, [r3, #7]
    2c9c:	069b      	lsls	r3, r3, #26
    2c9e:	461a      	mov	r2, r3
    2ca0:	9b03      	ldr	r3, [sp, #12]
    2ca2:	4313      	orrs	r3, r2
    2ca4:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE2_SHIFT);
    2ca6:	9b01      	ldr	r3, [sp, #4]
    2ca8:	7a1b      	ldrb	r3, [r3, #8]
    2caa:	039b      	lsls	r3, r3, #14
    2cac:	461a      	mov	r2, r3
    2cae:	9b03      	ldr	r3, [sp, #12]
    2cb0:	4313      	orrs	r3, r2
    2cb2:	9303      	str	r3, [sp, #12]
    if ( ebiInit->enable) {
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d003      	beq.n	2cc6 <EBI_Init+0x1b6>
      ctrl |= EBI_CTRL_BANK2EN;
    2cbe:	9b03      	ldr	r3, [sp, #12]
    2cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2cc4:	9303      	str	r3, [sp, #12]
    }
  }
  if (ebiInit->banks & EBI_BANK3) {
    2cc6:	9b01      	ldr	r3, [sp, #4]
    2cc8:	68db      	ldr	r3, [r3, #12]
    2cca:	f003 0310 	and.w	r3, r3, #16
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d03a      	beq.n	2d48 <EBI_Init+0x238>
    ctrl &= ~(_EBI_CTRL_BL3_MASK
    2cd2:	9a03      	ldr	r2, [sp, #12]
    2cd4:	4b1b      	ldr	r3, [pc, #108]	; (2d44 <EBI_Init+0x234>)
    2cd6:	4013      	ands	r3, r2
    2cd8:	9303      	str	r3, [sp, #12]
              | _EBI_CTRL_MODE3_MASK
              | _EBI_CTRL_ARDY3EN_MASK
              | _EBI_CTRL_ARDYTO3DIS_MASK
              | _EBI_CTRL_NOIDLE3_MASK
              | _EBI_CTRL_BANK3EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE3_SHIFT);
    2cda:	9b01      	ldr	r3, [sp, #4]
    2cdc:	781b      	ldrb	r3, [r3, #0]
    2cde:	019b      	lsls	r3, r3, #6
    2ce0:	461a      	mov	r2, r3
    2ce2:	9b03      	ldr	r3, [sp, #12]
    2ce4:	4313      	orrs	r3, r2
    2ce6:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY3EN_SHIFT);
    2ce8:	9b01      	ldr	r3, [sp, #4]
    2cea:	7a5b      	ldrb	r3, [r3, #9]
    2cec:	059b      	lsls	r3, r3, #22
    2cee:	461a      	mov	r2, r3
    2cf0:	9b03      	ldr	r3, [sp, #12]
    2cf2:	4313      	orrs	r3, r2
    2cf4:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO3DIS_SHIFT);
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	7a9b      	ldrb	r3, [r3, #10]
    2cfa:	05db      	lsls	r3, r3, #23
    2cfc:	461a      	mov	r2, r3
    2cfe:	9b03      	ldr	r3, [sp, #12]
    2d00:	4313      	orrs	r3, r2
    2d02:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL3_SHIFT);
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	79db      	ldrb	r3, [r3, #7]
    2d08:	06db      	lsls	r3, r3, #27
    2d0a:	461a      	mov	r2, r3
    2d0c:	9b03      	ldr	r3, [sp, #12]
    2d0e:	4313      	orrs	r3, r2
    2d10:	9303      	str	r3, [sp, #12]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE3_SHIFT);
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	7a1b      	ldrb	r3, [r3, #8]
    2d16:	03db      	lsls	r3, r3, #15
    2d18:	461a      	mov	r2, r3
    2d1a:	9b03      	ldr	r3, [sp, #12]
    2d1c:	4313      	orrs	r3, r2
    2d1e:	9303      	str	r3, [sp, #12]
    if ( ebiInit->enable) {
    2d20:	9b01      	ldr	r3, [sp, #4]
    2d22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    2d26:	2b00      	cmp	r3, #0
    2d28:	d00e      	beq.n	2d48 <EBI_Init+0x238>
      ctrl |= EBI_CTRL_BANK3EN;
    2d2a:	9b03      	ldr	r3, [sp, #12]
    2d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2d30:	9303      	str	r3, [sp, #12]
    2d32:	e009      	b.n	2d48 <EBI_Init+0x238>
    2d34:	40008000 	.word	0x40008000
    2d38:	fefceefc 	.word	0xfefceefc
    2d3c:	fdf3ddf3 	.word	0xfdf3ddf3
    2d40:	fbcfbbcf 	.word	0xfbcfbbcf
    2d44:	f73f773f 	.word	0xf73f773f
                     ebiInit->writeStrobeCycles,
                     ebiInit->writeHoldCycles);
  EBI_AddressTimingSet(ebiInit->addrSetupCycles,
                       ebiInit->addrHoldCycles);
#else
  EBI_BankReadTimingSet(ebiInit->banks,
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	68d8      	ldr	r0, [r3, #12]
    2d4c:	9b01      	ldr	r3, [sp, #4]
    2d4e:	6a19      	ldr	r1, [r3, #32]
    2d50:	9b01      	ldr	r3, [sp, #4]
    2d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2d54:	9b01      	ldr	r3, [sp, #4]
    2d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d58:	f000 f94a 	bl	2ff0 <EBI_BankReadTimingSet>
                        ebiInit->readSetupCycles,
                        ebiInit->readStrobeCycles,
                        ebiInit->readHoldCycles);
  EBI_BankReadTimingConfig(ebiInit->banks,
    2d5c:	9b01      	ldr	r3, [sp, #4]
    2d5e:	68d8      	ldr	r0, [r3, #12]
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
    2d66:	9b01      	ldr	r3, [sp, #4]
    2d68:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    2d72:	f000 f8b9 	bl	2ee8 <EBI_BankReadTimingConfig>
                           ebiInit->readPageMode,
                           ebiInit->readPrefetch,
                           ebiInit->readHalfRE);
  EBI_BankWriteTimingSet(ebiInit->banks,
    2d76:	9b01      	ldr	r3, [sp, #4]
    2d78:	68d8      	ldr	r0, [r3, #12]
    2d7a:	9b01      	ldr	r3, [sp, #4]
    2d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2d7e:	9b01      	ldr	r3, [sp, #4]
    2d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2d82:	9b01      	ldr	r3, [sp, #4]
    2d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d86:	f000 f9e3 	bl	3150 <EBI_BankWriteTimingSet>
                         ebiInit->writeSetupCycles,
                         ebiInit->writeStrobeCycles,
                         ebiInit->writeHoldCycles);
  EBI_BankWriteTimingConfig(ebiInit->banks,
    2d8a:	9b01      	ldr	r3, [sp, #4]
    2d8c:	68d8      	ldr	r0, [r3, #12]
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    2d9a:	461a      	mov	r2, r3
    2d9c:	f000 f976 	bl	308c <EBI_BankWriteTimingConfig>
                            ebiInit->writeBufferDisable,
                            ebiInit->writeHalfWE);
  EBI_BankAddressTimingSet(ebiInit->banks,
    2da0:	9b01      	ldr	r3, [sp, #4]
    2da2:	68d8      	ldr	r0, [r3, #12]
    2da4:	9b01      	ldr	r3, [sp, #4]
    2da6:	6959      	ldr	r1, [r3, #20]
    2da8:	9b01      	ldr	r3, [sp, #4]
    2daa:	699b      	ldr	r3, [r3, #24]
    2dac:	461a      	mov	r2, r3
    2dae:	f000 fa5f 	bl	3270 <EBI_BankAddressTimingSet>
                           ebiInit->addrSetupCycles,
                           ebiInit->addrHoldCycles);
  EBI_BankAddressTimingConfig(ebiInit->banks,
    2db2:	9b01      	ldr	r3, [sp, #4]
    2db4:	68da      	ldr	r2, [r3, #12]
    2db6:	9b01      	ldr	r3, [sp, #4]
    2db8:	7f1b      	ldrb	r3, [r3, #28]
    2dba:	4619      	mov	r1, r3
    2dbc:	4610      	mov	r0, r2
    2dbe:	f000 fa15 	bl	31ec <EBI_BankAddressTimingConfig>
                              ebiInit->addrHalfALE);
#endif

  /* Activate new configuration */
  EBI->CTRL = ctrl;
    2dc2:	4a28      	ldr	r2, [pc, #160]	; (2e64 <EBI_Init+0x354>)
    2dc4:	9b03      	ldr	r3, [sp, #12]
    2dc6:	6013      	str	r3, [r2, #0]

  /* Configure Adress Latch Enable */
  switch (ebiInit->mode) {
    2dc8:	9b01      	ldr	r3, [sp, #4]
    2dca:	781b      	ldrb	r3, [r3, #0]
    2dcc:	2b03      	cmp	r3, #3
    2dce:	d815      	bhi.n	2dfc <EBI_Init+0x2ec>
    2dd0:	a201      	add	r2, pc, #4	; (adr r2, 2dd8 <EBI_Init+0x2c8>)
    2dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2dd6:	bf00      	nop
    2dd8:	00002df3 	.word	0x00002df3
    2ddc:	00002de9 	.word	0x00002de9
    2de0:	00002de9 	.word	0x00002de9
    2de4:	00002df3 	.word	0x00002df3
    case ebiModeD16A16ALE:
    case ebiModeD8A24ALE:
      /* Address Latch Enable */
      EBI_RouteBitWrite(_EBI_GENERIC_ALEPEN_SHIFT, 1);
    2de8:	2101      	movs	r1, #1
    2dea:	2005      	movs	r0, #5
    2dec:	f7ff fe80 	bl	2af0 <EBI_RouteBitWrite>
      break;
    2df0:	e004      	b.n	2dfc <EBI_Init+0x2ec>
#if defined(EBI_CTRL_MODE_D16)
    case ebiModeD16:
#endif
    case ebiModeD8A8:
      /* Make sure Address Latch is disabled */
      EBI_RouteBitWrite(_EBI_GENERIC_ALEPEN_SHIFT, 0);
    2df2:	2100      	movs	r1, #0
    2df4:	2005      	movs	r0, #5
    2df6:	f7ff fe7b 	bl	2af0 <EBI_RouteBitWrite>
      break;
    2dfa:	bf00      	nop
  }

#if !defined(_EFM32_GECKO_FAMILY)
  /* Limit pin enable */
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_ALB_MASK) | ebiInit->aLow;
    2dfc:	4919      	ldr	r1, [pc, #100]	; (2e64 <EBI_Init+0x354>)
    2dfe:	4b19      	ldr	r3, [pc, #100]	; (2e64 <EBI_Init+0x354>)
    2e00:	695b      	ldr	r3, [r3, #20]
    2e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    2e06:	9b01      	ldr	r3, [sp, #4]
    2e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2e0a:	4313      	orrs	r3, r2
    2e0c:	614b      	str	r3, [r1, #20]
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_APEN_MASK) | ebiInit->aHigh;
    2e0e:	4915      	ldr	r1, [pc, #84]	; (2e64 <EBI_Init+0x354>)
    2e10:	4b14      	ldr	r3, [pc, #80]	; (2e64 <EBI_Init+0x354>)
    2e12:	695b      	ldr	r3, [r3, #20]
    2e14:	f423 02f8 	bic.w	r2, r3, #8126464	; 0x7c0000
    2e18:	9b01      	ldr	r3, [sp, #4]
    2e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2e1c:	4313      	orrs	r3, r2
    2e1e:	614b      	str	r3, [r1, #20]
#if defined(_EBI_ROUTE_LOCATION_MASK)
  /* Location */
  EBI->ROUTE = (EBI->ROUTE & ~_EBI_ROUTE_LOCATION_MASK) | ebiInit->location;
    2e20:	4910      	ldr	r1, [pc, #64]	; (2e64 <EBI_Init+0x354>)
    2e22:	4b10      	ldr	r3, [pc, #64]	; (2e64 <EBI_Init+0x354>)
    2e24:	695b      	ldr	r3, [r3, #20]
    2e26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
    2e2a:	9b01      	ldr	r3, [sp, #4]
    2e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e2e:	4313      	orrs	r3, r2
    2e30:	614b      	str	r3, [r1, #20]
#endif

  /* Enable EBI BL pin if necessary */
  if (ctrl & (_EBI_CTRL_BL_MASK | _EBI_CTRL_BL1_MASK | _EBI_CTRL_BL2_MASK | _EBI_CTRL_BL3_MASK)) {
    2e32:	9b03      	ldr	r3, [sp, #12]
    2e34:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d005      	beq.n	2e48 <EBI_Init+0x338>
    EBI_RouteBitWrite(_EBI_GENERIC_BLPEN_SHIFT, ebiInit->blEnable);
    2e3c:	9b01      	ldr	r3, [sp, #4]
    2e3e:	79db      	ldrb	r3, [r3, #7]
    2e40:	4619      	mov	r1, r3
    2e42:	2007      	movs	r0, #7
    2e44:	f7ff fe54 	bl	2af0 <EBI_RouteBitWrite>
  }
#endif

  /* Enable EBI pins EBI_WEn and EBI_REn */
  EBI_RouteBitWrite(_EBI_GENERIC_EBIPEN_SHIFT, 1);
    2e48:	2101      	movs	r1, #1
    2e4a:	2000      	movs	r0, #0
    2e4c:	f7ff fe50 	bl	2af0 <EBI_RouteBitWrite>

  /* Enable chip select lines */
  EBI_ChipSelectEnable(ebiInit->csLines, true);
    2e50:	9b01      	ldr	r3, [sp, #4]
    2e52:	691b      	ldr	r3, [r3, #16]
    2e54:	2101      	movs	r1, #1
    2e56:	4618      	mov	r0, r3
    2e58:	f000 f810 	bl	2e7c <EBI_ChipSelectEnable>
}
    2e5c:	bf00      	nop
    2e5e:	b005      	add	sp, #20
    2e60:	f85d fb04 	ldr.w	pc, [sp], #4
    2e64:	40008000 	.word	0x40008000

00002e68 <EBI_Disable>:
 *   Disable External Bus Interface
 ******************************************************************************/
void EBI_Disable(void)
{
  /* Disable pins */
  EBI_GENERIC_ROUTE_REG = _EBI_GENERIC_RESETVALUE;
    2e68:	4b03      	ldr	r3, [pc, #12]	; (2e78 <EBI_Disable+0x10>)
    2e6a:	2200      	movs	r2, #0
    2e6c:	615a      	str	r2, [r3, #20]
  /* Disable banks */
  EBI->CTRL = _EBI_CTRL_RESETVALUE;
    2e6e:	4b02      	ldr	r3, [pc, #8]	; (2e78 <EBI_Disable+0x10>)
    2e70:	2200      	movs	r2, #0
    2e72:	601a      	str	r2, [r3, #0]
}
    2e74:	bf00      	nop
    2e76:	4770      	bx	lr
    2e78:	40008000 	.word	0x40008000

00002e7c <EBI_ChipSelectEnable>:
 *
 * @param[in] enable
 *   True to enable, false to disable
 ******************************************************************************/
void EBI_ChipSelectEnable(uint32_t cs, bool enable)
{
    2e7c:	b500      	push	{lr}
    2e7e:	b083      	sub	sp, #12
    2e80:	9001      	str	r0, [sp, #4]
    2e82:	460b      	mov	r3, r1
    2e84:	f88d 3003 	strb.w	r3, [sp, #3]
  if (cs & EBI_CS0) {
    2e88:	9b01      	ldr	r3, [sp, #4]
    2e8a:	f003 0302 	and.w	r3, r3, #2
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d005      	beq.n	2e9e <EBI_ChipSelectEnable+0x22>
    EBI_RouteBitWrite(_EBI_GENERIC_CS0PEN_SHIFT, enable);
    2e92:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2e96:	4619      	mov	r1, r3
    2e98:	2001      	movs	r0, #1
    2e9a:	f7ff fe29 	bl	2af0 <EBI_RouteBitWrite>
  }
  if (cs & EBI_CS1) {
    2e9e:	9b01      	ldr	r3, [sp, #4]
    2ea0:	f003 0304 	and.w	r3, r3, #4
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d005      	beq.n	2eb4 <EBI_ChipSelectEnable+0x38>
    EBI_RouteBitWrite(_EBI_GENERIC_CS1PEN_SHIFT, enable);
    2ea8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2eac:	4619      	mov	r1, r3
    2eae:	2002      	movs	r0, #2
    2eb0:	f7ff fe1e 	bl	2af0 <EBI_RouteBitWrite>
  }
  if (cs & EBI_CS2) {
    2eb4:	9b01      	ldr	r3, [sp, #4]
    2eb6:	f003 0308 	and.w	r3, r3, #8
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d005      	beq.n	2eca <EBI_ChipSelectEnable+0x4e>
    EBI_RouteBitWrite(_EBI_GENERIC_CS2PEN_SHIFT, enable);
    2ebe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ec2:	4619      	mov	r1, r3
    2ec4:	2003      	movs	r0, #3
    2ec6:	f7ff fe13 	bl	2af0 <EBI_RouteBitWrite>
  }
  if (cs & EBI_CS3) {
    2eca:	9b01      	ldr	r3, [sp, #4]
    2ecc:	f003 0310 	and.w	r3, r3, #16
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d005      	beq.n	2ee0 <EBI_ChipSelectEnable+0x64>
    EBI_RouteBitWrite(_EBI_GENERIC_CS3PEN_SHIFT, enable);
    2ed4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ed8:	4619      	mov	r1, r3
    2eda:	2004      	movs	r0, #4
    2edc:	f7ff fe08 	bl	2af0 <EBI_RouteBitWrite>
  }
}
    2ee0:	bf00      	nop
    2ee2:	b003      	add	sp, #12
    2ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee8 <EBI_BankReadTimingConfig>:
 *
 * @param[in] halfRE
 *   Enables or disables half cycle WE strobe in last strobe cycle
 ******************************************************************************/
void EBI_BankReadTimingConfig(uint32_t banks, bool pageMode, bool prefetch, bool halfRE)
{
    2ee8:	b500      	push	{lr}
    2eea:	b083      	sub	sp, #12
    2eec:	9001      	str	r0, [sp, #4]
    2eee:	4608      	mov	r0, r1
    2ef0:	4611      	mov	r1, r2
    2ef2:	461a      	mov	r2, r3
    2ef4:	4603      	mov	r3, r0
    2ef6:	f88d 3003 	strb.w	r3, [sp, #3]
    2efa:	460b      	mov	r3, r1
    2efc:	f88d 3002 	strb.w	r3, [sp, #2]
    2f00:	4613      	mov	r3, r2
    2f02:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  /* Configure read operation parameters */
  if ( banks & EBI_BANK0 ) {
    2f06:	9b01      	ldr	r3, [sp, #4]
    2f08:	f003 0302 	and.w	r3, r3, #2
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d014      	beq.n	2f3a <EBI_BankReadTimingConfig+0x52>
    BUS_RegBitWrite(&EBI->RDTIMING, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    2f10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f14:	461a      	mov	r2, r3
    2f16:	211e      	movs	r1, #30
    2f18:	4831      	ldr	r0, [pc, #196]	; (2fe0 <EBI_BankReadTimingConfig+0xf8>)
    2f1a:	f7ff fdd7 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    2f1e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    2f22:	461a      	mov	r2, r3
    2f24:	211d      	movs	r1, #29
    2f26:	482e      	ldr	r0, [pc, #184]	; (2fe0 <EBI_BankReadTimingConfig+0xf8>)
    2f28:	f7ff fdd0 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
    2f2c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    2f30:	461a      	mov	r2, r3
    2f32:	211c      	movs	r1, #28
    2f34:	482a      	ldr	r0, [pc, #168]	; (2fe0 <EBI_BankReadTimingConfig+0xf8>)
    2f36:	f7ff fdc9 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK1 ) {
    2f3a:	9b01      	ldr	r3, [sp, #4]
    2f3c:	f003 0304 	and.w	r3, r3, #4
    2f40:	2b00      	cmp	r3, #0
    2f42:	d014      	beq.n	2f6e <EBI_BankReadTimingConfig+0x86>
    BUS_RegBitWrite(&EBI->RDTIMING1, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    2f44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f48:	461a      	mov	r2, r3
    2f4a:	211e      	movs	r1, #30
    2f4c:	4825      	ldr	r0, [pc, #148]	; (2fe4 <EBI_BankReadTimingConfig+0xfc>)
    2f4e:	f7ff fdbd 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING1, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    2f52:	f89d 3002 	ldrb.w	r3, [sp, #2]
    2f56:	461a      	mov	r2, r3
    2f58:	211d      	movs	r1, #29
    2f5a:	4822      	ldr	r0, [pc, #136]	; (2fe4 <EBI_BankReadTimingConfig+0xfc>)
    2f5c:	f7ff fdb6 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING1, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
    2f60:	f89d 3001 	ldrb.w	r3, [sp, #1]
    2f64:	461a      	mov	r2, r3
    2f66:	211c      	movs	r1, #28
    2f68:	481e      	ldr	r0, [pc, #120]	; (2fe4 <EBI_BankReadTimingConfig+0xfc>)
    2f6a:	f7ff fdaf 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK2 ) {
    2f6e:	9b01      	ldr	r3, [sp, #4]
    2f70:	f003 0308 	and.w	r3, r3, #8
    2f74:	2b00      	cmp	r3, #0
    2f76:	d014      	beq.n	2fa2 <EBI_BankReadTimingConfig+0xba>
    BUS_RegBitWrite(&EBI->RDTIMING2, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    2f78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2f7c:	461a      	mov	r2, r3
    2f7e:	211e      	movs	r1, #30
    2f80:	4819      	ldr	r0, [pc, #100]	; (2fe8 <EBI_BankReadTimingConfig+0x100>)
    2f82:	f7ff fda3 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING2, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    2f86:	f89d 3002 	ldrb.w	r3, [sp, #2]
    2f8a:	461a      	mov	r2, r3
    2f8c:	211d      	movs	r1, #29
    2f8e:	4816      	ldr	r0, [pc, #88]	; (2fe8 <EBI_BankReadTimingConfig+0x100>)
    2f90:	f7ff fd9c 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING2, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
    2f94:	f89d 3001 	ldrb.w	r3, [sp, #1]
    2f98:	461a      	mov	r2, r3
    2f9a:	211c      	movs	r1, #28
    2f9c:	4812      	ldr	r0, [pc, #72]	; (2fe8 <EBI_BankReadTimingConfig+0x100>)
    2f9e:	f7ff fd95 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK3 ) {
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	f003 0310 	and.w	r3, r3, #16
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d014      	beq.n	2fd6 <EBI_BankReadTimingConfig+0xee>
    BUS_RegBitWrite(&EBI->RDTIMING3, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    2fac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2fb0:	461a      	mov	r2, r3
    2fb2:	211e      	movs	r1, #30
    2fb4:	480d      	ldr	r0, [pc, #52]	; (2fec <EBI_BankReadTimingConfig+0x104>)
    2fb6:	f7ff fd89 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING3, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    2fba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    2fbe:	461a      	mov	r2, r3
    2fc0:	211d      	movs	r1, #29
    2fc2:	480a      	ldr	r0, [pc, #40]	; (2fec <EBI_BankReadTimingConfig+0x104>)
    2fc4:	f7ff fd82 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->RDTIMING3, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
    2fc8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    2fcc:	461a      	mov	r2, r3
    2fce:	211c      	movs	r1, #28
    2fd0:	4806      	ldr	r0, [pc, #24]	; (2fec <EBI_BankReadTimingConfig+0x104>)
    2fd2:	f7ff fd7b 	bl	2acc <BUS_RegBitWrite>
  }
}
    2fd6:	bf00      	nop
    2fd8:	b003      	add	sp, #12
    2fda:	f85d fb04 	ldr.w	pc, [sp], #4
    2fde:	bf00      	nop
    2fe0:	40008008 	.word	0x40008008
    2fe4:	4000801c 	.word	0x4000801c
    2fe8:	4000802c 	.word	0x4000802c
    2fec:	4000803c 	.word	0x4000803c

00002ff0 <EBI_BankReadTimingSet>:
 *
 * @param[in] holdCycles
 *   The number of cycles CSn is held active after the REn is dessarted
 ******************************************************************************/
void EBI_BankReadTimingSet(uint32_t banks, int setupCycles, int strobeCycles, int holdCycles)
{
    2ff0:	b086      	sub	sp, #24
    2ff2:	9003      	str	r0, [sp, #12]
    2ff4:	9102      	str	r1, [sp, #8]
    2ff6:	9201      	str	r2, [sp, #4]
    2ff8:	9300      	str	r3, [sp, #0]
  EFM_ASSERT(strobeCycles < 64);
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  readTiming = (setupCycles << _EBI_RDTIMING_RDSETUP_SHIFT)
               | (strobeCycles << _EBI_RDTIMING_RDSTRB_SHIFT)
    2ffa:	9b01      	ldr	r3, [sp, #4]
    2ffc:	021a      	lsls	r2, r3, #8
    2ffe:	9b02      	ldr	r3, [sp, #8]
    3000:	431a      	orrs	r2, r3
               | (holdCycles << _EBI_RDTIMING_RDHOLD_SHIFT);
    3002:	9b00      	ldr	r3, [sp, #0]
    3004:	041b      	lsls	r3, r3, #16
    3006:	4313      	orrs	r3, r2
  EFM_ASSERT(setupCycles < 4);
  EFM_ASSERT(strobeCycles < 64);
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  readTiming = (setupCycles << _EBI_RDTIMING_RDSETUP_SHIFT)
    3008:	9305      	str	r3, [sp, #20]
               | (strobeCycles << _EBI_RDTIMING_RDSTRB_SHIFT)
               | (holdCycles << _EBI_RDTIMING_RDHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    300a:	9b03      	ldr	r3, [sp, #12]
    300c:	f003 0302 	and.w	r3, r3, #2
    3010:	2b00      	cmp	r3, #0
    3012:	d009      	beq.n	3028 <EBI_BankReadTimingSet+0x38>
    EBI->RDTIMING = (EBI->RDTIMING
    3014:	491c      	ldr	r1, [pc, #112]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3016:	4b1c      	ldr	r3, [pc, #112]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3018:	689b      	ldr	r3, [r3, #8]
                     & ~(_EBI_RDTIMING_RDSETUP_MASK
    301a:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    301e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                         | _EBI_RDTIMING_RDSTRB_MASK
                         | _EBI_RDTIMING_RDHOLD_MASK))
                    | readTiming;
    3022:	9a05      	ldr	r2, [sp, #20]
    3024:	4313      	orrs	r3, r2
  readTiming = (setupCycles << _EBI_RDTIMING_RDSETUP_SHIFT)
               | (strobeCycles << _EBI_RDTIMING_RDSTRB_SHIFT)
               | (holdCycles << _EBI_RDTIMING_RDHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    EBI->RDTIMING = (EBI->RDTIMING
    3026:	608b      	str	r3, [r1, #8]
                     & ~(_EBI_RDTIMING_RDSETUP_MASK
                         | _EBI_RDTIMING_RDSTRB_MASK
                         | _EBI_RDTIMING_RDHOLD_MASK))
                    | readTiming;
  }
  if (banks & EBI_BANK1) {
    3028:	9b03      	ldr	r3, [sp, #12]
    302a:	f003 0304 	and.w	r3, r3, #4
    302e:	2b00      	cmp	r3, #0
    3030:	d009      	beq.n	3046 <EBI_BankReadTimingSet+0x56>
    EBI->RDTIMING1 = (EBI->RDTIMING1
    3032:	4915      	ldr	r1, [pc, #84]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3034:	4b14      	ldr	r3, [pc, #80]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3036:	69db      	ldr	r3, [r3, #28]
                      & ~(_EBI_RDTIMING1_RDSETUP_MASK
    3038:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    303c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                          | _EBI_RDTIMING1_RDSTRB_MASK
                          | _EBI_RDTIMING1_RDHOLD_MASK))
                     | readTiming;
    3040:	9a05      	ldr	r2, [sp, #20]
    3042:	4313      	orrs	r3, r2
                         | _EBI_RDTIMING_RDSTRB_MASK
                         | _EBI_RDTIMING_RDHOLD_MASK))
                    | readTiming;
  }
  if (banks & EBI_BANK1) {
    EBI->RDTIMING1 = (EBI->RDTIMING1
    3044:	61cb      	str	r3, [r1, #28]
                      & ~(_EBI_RDTIMING1_RDSETUP_MASK
                          | _EBI_RDTIMING1_RDSTRB_MASK
                          | _EBI_RDTIMING1_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK2) {
    3046:	9b03      	ldr	r3, [sp, #12]
    3048:	f003 0308 	and.w	r3, r3, #8
    304c:	2b00      	cmp	r3, #0
    304e:	d009      	beq.n	3064 <EBI_BankReadTimingSet+0x74>
    EBI->RDTIMING2 = (EBI->RDTIMING2
    3050:	490d      	ldr	r1, [pc, #52]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3052:	4b0d      	ldr	r3, [pc, #52]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                      & ~(_EBI_RDTIMING2_RDSETUP_MASK
    3056:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    305a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                          | _EBI_RDTIMING2_RDSTRB_MASK
                          | _EBI_RDTIMING2_RDHOLD_MASK))
                     | readTiming;
    305e:	9a05      	ldr	r2, [sp, #20]
    3060:	4313      	orrs	r3, r2
                          | _EBI_RDTIMING1_RDSTRB_MASK
                          | _EBI_RDTIMING1_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK2) {
    EBI->RDTIMING2 = (EBI->RDTIMING2
    3062:	62cb      	str	r3, [r1, #44]	; 0x2c
                      & ~(_EBI_RDTIMING2_RDSETUP_MASK
                          | _EBI_RDTIMING2_RDSTRB_MASK
                          | _EBI_RDTIMING2_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK3) {
    3064:	9b03      	ldr	r3, [sp, #12]
    3066:	f003 0310 	and.w	r3, r3, #16
    306a:	2b00      	cmp	r3, #0
    306c:	d009      	beq.n	3082 <EBI_BankReadTimingSet+0x92>
    EBI->RDTIMING3 = (EBI->RDTIMING3
    306e:	4906      	ldr	r1, [pc, #24]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3070:	4b05      	ldr	r3, [pc, #20]	; (3088 <EBI_BankReadTimingSet+0x98>)
    3072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                      & ~(_EBI_RDTIMING3_RDSETUP_MASK
    3074:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    3078:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                          | _EBI_RDTIMING3_RDSTRB_MASK
                          | _EBI_RDTIMING3_RDHOLD_MASK))
                     | readTiming;
    307c:	9a05      	ldr	r2, [sp, #20]
    307e:	4313      	orrs	r3, r2
                          | _EBI_RDTIMING2_RDSTRB_MASK
                          | _EBI_RDTIMING2_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK3) {
    EBI->RDTIMING3 = (EBI->RDTIMING3
    3080:	63cb      	str	r3, [r1, #60]	; 0x3c
                      & ~(_EBI_RDTIMING3_RDSETUP_MASK
                          | _EBI_RDTIMING3_RDSTRB_MASK
                          | _EBI_RDTIMING3_RDHOLD_MASK))
                     | readTiming;
  }
}
    3082:	bf00      	nop
    3084:	b006      	add	sp, #24
    3086:	4770      	bx	lr
    3088:	40008000 	.word	0x40008000

0000308c <EBI_BankWriteTimingConfig>:
 *
 * @param[in] halfWE
 *   Enables or disables half cycle WE strobe in last strobe cycle
 ******************************************************************************/
void EBI_BankWriteTimingConfig(uint32_t banks, bool writeBufDisable, bool halfWE)
{
    308c:	b500      	push	{lr}
    308e:	b083      	sub	sp, #12
    3090:	9001      	str	r0, [sp, #4]
    3092:	460b      	mov	r3, r1
    3094:	f88d 3003 	strb.w	r3, [sp, #3]
    3098:	4613      	mov	r3, r2
    309a:	f88d 3002 	strb.w	r3, [sp, #2]
  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  /* Configure write operation parameters */
  if ( banks & EBI_BANK0 ) {
    309e:	9b01      	ldr	r3, [sp, #4]
    30a0:	f003 0302 	and.w	r3, r3, #2
    30a4:	2b00      	cmp	r3, #0
    30a6:	d00d      	beq.n	30c4 <EBI_BankWriteTimingConfig+0x38>
    BUS_RegBitWrite(&EBI->WRTIMING, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    30a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    30ac:	461a      	mov	r2, r3
    30ae:	211d      	movs	r1, #29
    30b0:	4823      	ldr	r0, [pc, #140]	; (3140 <EBI_BankWriteTimingConfig+0xb4>)
    30b2:	f7ff fd0b 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->WRTIMING, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
    30b6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    30ba:	461a      	mov	r2, r3
    30bc:	211c      	movs	r1, #28
    30be:	4820      	ldr	r0, [pc, #128]	; (3140 <EBI_BankWriteTimingConfig+0xb4>)
    30c0:	f7ff fd04 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK1 ) {
    30c4:	9b01      	ldr	r3, [sp, #4]
    30c6:	f003 0304 	and.w	r3, r3, #4
    30ca:	2b00      	cmp	r3, #0
    30cc:	d00d      	beq.n	30ea <EBI_BankWriteTimingConfig+0x5e>
    BUS_RegBitWrite(&EBI->WRTIMING1, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    30ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    30d2:	461a      	mov	r2, r3
    30d4:	211d      	movs	r1, #29
    30d6:	481b      	ldr	r0, [pc, #108]	; (3144 <EBI_BankWriteTimingConfig+0xb8>)
    30d8:	f7ff fcf8 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->WRTIMING1, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
    30dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    30e0:	461a      	mov	r2, r3
    30e2:	211c      	movs	r1, #28
    30e4:	4817      	ldr	r0, [pc, #92]	; (3144 <EBI_BankWriteTimingConfig+0xb8>)
    30e6:	f7ff fcf1 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK2 ) {
    30ea:	9b01      	ldr	r3, [sp, #4]
    30ec:	f003 0308 	and.w	r3, r3, #8
    30f0:	2b00      	cmp	r3, #0
    30f2:	d00d      	beq.n	3110 <EBI_BankWriteTimingConfig+0x84>
    BUS_RegBitWrite(&EBI->WRTIMING2, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    30f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    30f8:	461a      	mov	r2, r3
    30fa:	211d      	movs	r1, #29
    30fc:	4812      	ldr	r0, [pc, #72]	; (3148 <EBI_BankWriteTimingConfig+0xbc>)
    30fe:	f7ff fce5 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->WRTIMING2, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
    3102:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3106:	461a      	mov	r2, r3
    3108:	211c      	movs	r1, #28
    310a:	480f      	ldr	r0, [pc, #60]	; (3148 <EBI_BankWriteTimingConfig+0xbc>)
    310c:	f7ff fcde 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK3 ) {
    3110:	9b01      	ldr	r3, [sp, #4]
    3112:	f003 0310 	and.w	r3, r3, #16
    3116:	2b00      	cmp	r3, #0
    3118:	d00d      	beq.n	3136 <EBI_BankWriteTimingConfig+0xaa>
    BUS_RegBitWrite(&EBI->WRTIMING3, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    311a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    311e:	461a      	mov	r2, r3
    3120:	211d      	movs	r1, #29
    3122:	480a      	ldr	r0, [pc, #40]	; (314c <EBI_BankWriteTimingConfig+0xc0>)
    3124:	f7ff fcd2 	bl	2acc <BUS_RegBitWrite>
    BUS_RegBitWrite(&EBI->WRTIMING3, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
    3128:	f89d 3002 	ldrb.w	r3, [sp, #2]
    312c:	461a      	mov	r2, r3
    312e:	211c      	movs	r1, #28
    3130:	4806      	ldr	r0, [pc, #24]	; (314c <EBI_BankWriteTimingConfig+0xc0>)
    3132:	f7ff fccb 	bl	2acc <BUS_RegBitWrite>
  }
}
    3136:	bf00      	nop
    3138:	b003      	add	sp, #12
    313a:	f85d fb04 	ldr.w	pc, [sp], #4
    313e:	bf00      	nop
    3140:	4000800c 	.word	0x4000800c
    3144:	40008020 	.word	0x40008020
    3148:	40008030 	.word	0x40008030
    314c:	40008040 	.word	0x40008040

00003150 <EBI_BankWriteTimingSet>:
 *
 * @param[in] holdCycles
 *   Number of cycles CSn is held active after the WEn is deasserted
 ******************************************************************************/
void EBI_BankWriteTimingSet(uint32_t banks, int setupCycles, int strobeCycles, int holdCycles)
{
    3150:	b086      	sub	sp, #24
    3152:	9003      	str	r0, [sp, #12]
    3154:	9102      	str	r1, [sp, #8]
    3156:	9201      	str	r2, [sp, #4]
    3158:	9300      	str	r3, [sp, #0]
  EFM_ASSERT(strobeCycles < 64);
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	021a      	lsls	r2, r3, #8
    315e:	9b02      	ldr	r3, [sp, #8]
    3160:	431a      	orrs	r2, r3
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);
    3162:	9b00      	ldr	r3, [sp, #0]
    3164:	041b      	lsls	r3, r3, #16
    3166:	4313      	orrs	r3, r2
  EFM_ASSERT(setupCycles < 4);
  EFM_ASSERT(strobeCycles < 64);
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
    3168:	9305      	str	r3, [sp, #20]
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    316a:	9b03      	ldr	r3, [sp, #12]
    316c:	f003 0302 	and.w	r3, r3, #2
    3170:	2b00      	cmp	r3, #0
    3172:	d009      	beq.n	3188 <EBI_BankWriteTimingSet+0x38>
    EBI->WRTIMING = (EBI->WRTIMING
    3174:	491c      	ldr	r1, [pc, #112]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    3176:	4b1c      	ldr	r3, [pc, #112]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    3178:	68db      	ldr	r3, [r3, #12]
                     & ~(_EBI_WRTIMING_WRSETUP_MASK
    317a:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    317e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                         | _EBI_WRTIMING_WRSTRB_MASK
                         | _EBI_WRTIMING_WRHOLD_MASK))
                    | writeTiming;
    3182:	9a05      	ldr	r2, [sp, #20]
    3184:	4313      	orrs	r3, r2
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    EBI->WRTIMING = (EBI->WRTIMING
    3186:	60cb      	str	r3, [r1, #12]
                     & ~(_EBI_WRTIMING_WRSETUP_MASK
                         | _EBI_WRTIMING_WRSTRB_MASK
                         | _EBI_WRTIMING_WRHOLD_MASK))
                    | writeTiming;
  }
  if (banks & EBI_BANK1) {
    3188:	9b03      	ldr	r3, [sp, #12]
    318a:	f003 0304 	and.w	r3, r3, #4
    318e:	2b00      	cmp	r3, #0
    3190:	d009      	beq.n	31a6 <EBI_BankWriteTimingSet+0x56>
    EBI->WRTIMING1 = (EBI->WRTIMING1
    3192:	4915      	ldr	r1, [pc, #84]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    3194:	4b14      	ldr	r3, [pc, #80]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    3196:	6a1b      	ldr	r3, [r3, #32]
                      & ~(_EBI_WRTIMING1_WRSETUP_MASK
    3198:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    319c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                          | _EBI_WRTIMING1_WRSTRB_MASK
                          | _EBI_WRTIMING1_WRHOLD_MASK))
                     | writeTiming;
    31a0:	9a05      	ldr	r2, [sp, #20]
    31a2:	4313      	orrs	r3, r2
                         | _EBI_WRTIMING_WRSTRB_MASK
                         | _EBI_WRTIMING_WRHOLD_MASK))
                    | writeTiming;
  }
  if (banks & EBI_BANK1) {
    EBI->WRTIMING1 = (EBI->WRTIMING1
    31a4:	620b      	str	r3, [r1, #32]
                      & ~(_EBI_WRTIMING1_WRSETUP_MASK
                          | _EBI_WRTIMING1_WRSTRB_MASK
                          | _EBI_WRTIMING1_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK2) {
    31a6:	9b03      	ldr	r3, [sp, #12]
    31a8:	f003 0308 	and.w	r3, r3, #8
    31ac:	2b00      	cmp	r3, #0
    31ae:	d009      	beq.n	31c4 <EBI_BankWriteTimingSet+0x74>
    EBI->WRTIMING2 = (EBI->WRTIMING2
    31b0:	490d      	ldr	r1, [pc, #52]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    31b2:	4b0d      	ldr	r3, [pc, #52]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    31b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                      & ~(_EBI_WRTIMING2_WRSETUP_MASK
    31b6:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    31ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                          | _EBI_WRTIMING2_WRSTRB_MASK
                          | _EBI_WRTIMING2_WRHOLD_MASK))
                     | writeTiming;
    31be:	9a05      	ldr	r2, [sp, #20]
    31c0:	4313      	orrs	r3, r2
                          | _EBI_WRTIMING1_WRSTRB_MASK
                          | _EBI_WRTIMING1_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK2) {
    EBI->WRTIMING2 = (EBI->WRTIMING2
    31c2:	630b      	str	r3, [r1, #48]	; 0x30
                      & ~(_EBI_WRTIMING2_WRSETUP_MASK
                          | _EBI_WRTIMING2_WRSTRB_MASK
                          | _EBI_WRTIMING2_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK3) {
    31c4:	9b03      	ldr	r3, [sp, #12]
    31c6:	f003 0310 	and.w	r3, r3, #16
    31ca:	2b00      	cmp	r3, #0
    31cc:	d009      	beq.n	31e2 <EBI_BankWriteTimingSet+0x92>
    EBI->WRTIMING3 = (EBI->WRTIMING3
    31ce:	4906      	ldr	r1, [pc, #24]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    31d0:	4b05      	ldr	r3, [pc, #20]	; (31e8 <EBI_BankWriteTimingSet+0x98>)
    31d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      & ~(_EBI_WRTIMING3_WRSETUP_MASK
    31d4:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
    31d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                          | _EBI_WRTIMING3_WRSTRB_MASK
                          | _EBI_WRTIMING3_WRHOLD_MASK))
                     | writeTiming;
    31dc:	9a05      	ldr	r2, [sp, #20]
    31de:	4313      	orrs	r3, r2
                          | _EBI_WRTIMING2_WRSTRB_MASK
                          | _EBI_WRTIMING2_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK3) {
    EBI->WRTIMING3 = (EBI->WRTIMING3
    31e0:	640b      	str	r3, [r1, #64]	; 0x40
                      & ~(_EBI_WRTIMING3_WRSETUP_MASK
                          | _EBI_WRTIMING3_WRSTRB_MASK
                          | _EBI_WRTIMING3_WRHOLD_MASK))
                     | writeTiming;
  }
}
    31e2:	bf00      	nop
    31e4:	b006      	add	sp, #24
    31e6:	4770      	bx	lr
    31e8:	40008000 	.word	0x40008000

000031ec <EBI_BankAddressTimingConfig>:
 *
 * @param[in] halfALE
 *   Enables or disables half cycle ALE strobe in last strobe cycle
 ******************************************************************************/
void EBI_BankAddressTimingConfig(uint32_t banks, bool halfALE)
{
    31ec:	b500      	push	{lr}
    31ee:	b083      	sub	sp, #12
    31f0:	9001      	str	r0, [sp, #4]
    31f2:	460b      	mov	r3, r1
    31f4:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  if ( banks & EBI_BANK0 ) {
    31f8:	9b01      	ldr	r3, [sp, #4]
    31fa:	f003 0302 	and.w	r3, r3, #2
    31fe:	2b00      	cmp	r3, #0
    3200:	d006      	beq.n	3210 <EBI_BankAddressTimingConfig+0x24>
    BUS_RegBitWrite(&EBI->ADDRTIMING, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
    3202:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3206:	461a      	mov	r2, r3
    3208:	211c      	movs	r1, #28
    320a:	4815      	ldr	r0, [pc, #84]	; (3260 <EBI_BankAddressTimingConfig+0x74>)
    320c:	f7ff fc5e 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK1 ) {
    3210:	9b01      	ldr	r3, [sp, #4]
    3212:	f003 0304 	and.w	r3, r3, #4
    3216:	2b00      	cmp	r3, #0
    3218:	d006      	beq.n	3228 <EBI_BankAddressTimingConfig+0x3c>
    BUS_RegBitWrite(&EBI->ADDRTIMING1, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
    321a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    321e:	461a      	mov	r2, r3
    3220:	211c      	movs	r1, #28
    3222:	4810      	ldr	r0, [pc, #64]	; (3264 <EBI_BankAddressTimingConfig+0x78>)
    3224:	f7ff fc52 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK2 ) {
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	f003 0308 	and.w	r3, r3, #8
    322e:	2b00      	cmp	r3, #0
    3230:	d006      	beq.n	3240 <EBI_BankAddressTimingConfig+0x54>
    BUS_RegBitWrite(&EBI->ADDRTIMING2, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
    3232:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3236:	461a      	mov	r2, r3
    3238:	211c      	movs	r1, #28
    323a:	480b      	ldr	r0, [pc, #44]	; (3268 <EBI_BankAddressTimingConfig+0x7c>)
    323c:	f7ff fc46 	bl	2acc <BUS_RegBitWrite>
  }
  if ( banks & EBI_BANK3 ) {
    3240:	9b01      	ldr	r3, [sp, #4]
    3242:	f003 0310 	and.w	r3, r3, #16
    3246:	2b00      	cmp	r3, #0
    3248:	d006      	beq.n	3258 <EBI_BankAddressTimingConfig+0x6c>
    BUS_RegBitWrite(&EBI->ADDRTIMING3, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
    324a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    324e:	461a      	mov	r2, r3
    3250:	211c      	movs	r1, #28
    3252:	4806      	ldr	r0, [pc, #24]	; (326c <EBI_BankAddressTimingConfig+0x80>)
    3254:	f7ff fc3a 	bl	2acc <BUS_RegBitWrite>
  }
}
    3258:	bf00      	nop
    325a:	b003      	add	sp, #12
    325c:	f85d fb04 	ldr.w	pc, [sp], #4
    3260:	40008004 	.word	0x40008004
    3264:	40008018 	.word	0x40008018
    3268:	40008028 	.word	0x40008028
    326c:	40008038 	.word	0x40008038

00003270 <EBI_BankAddressTimingSet>:
 * @param[in] holdCycles
 *   Sets the number of cycles the address is driven onto the ADDRDAT bus before
 *   ALE is asserted. If set 0, 1 cycle is inserted by HW
 ******************************************************************************/
void EBI_BankAddressTimingSet(uint32_t banks, int setupCycles, int holdCycles)
{
    3270:	b086      	sub	sp, #24
    3272:	9003      	str	r0, [sp, #12]
    3274:	9102      	str	r1, [sp, #8]
    3276:	9201      	str	r2, [sp, #4]
  EFM_ASSERT(setupCycles < 4);
  EFM_ASSERT(holdCycles < 4);

  /* Configure address latch timing values */
  addressLatchTiming = (setupCycles << _EBI_ADDRTIMING_ADDRSETUP_SHIFT)
                       | (holdCycles << _EBI_ADDRTIMING_ADDRHOLD_SHIFT);
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	021a      	lsls	r2, r3, #8
    327c:	9b02      	ldr	r3, [sp, #8]
    327e:	4313      	orrs	r3, r2
  /* Check that timing values are within limits */
  EFM_ASSERT(setupCycles < 4);
  EFM_ASSERT(holdCycles < 4);

  /* Configure address latch timing values */
  addressLatchTiming = (setupCycles << _EBI_ADDRTIMING_ADDRSETUP_SHIFT)
    3280:	9305      	str	r3, [sp, #20]
                       | (holdCycles << _EBI_ADDRTIMING_ADDRHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	f003 0302 	and.w	r3, r3, #2
    3288:	2b00      	cmp	r3, #0
    328a:	d009      	beq.n	32a0 <EBI_BankAddressTimingSet+0x30>
    EBI->ADDRTIMING = (EBI->ADDRTIMING
    328c:	491c      	ldr	r1, [pc, #112]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    328e:	4b1c      	ldr	r3, [pc, #112]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    3290:	685b      	ldr	r3, [r3, #4]
                       & ~(_EBI_ADDRTIMING_ADDRSETUP_MASK
    3292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3296:	f023 0303 	bic.w	r3, r3, #3
                           | _EBI_ADDRTIMING_ADDRHOLD_MASK))
                      | addressLatchTiming;
    329a:	9a05      	ldr	r2, [sp, #20]
    329c:	4313      	orrs	r3, r2
  /* Configure address latch timing values */
  addressLatchTiming = (setupCycles << _EBI_ADDRTIMING_ADDRSETUP_SHIFT)
                       | (holdCycles << _EBI_ADDRTIMING_ADDRHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    EBI->ADDRTIMING = (EBI->ADDRTIMING
    329e:	604b      	str	r3, [r1, #4]
                       & ~(_EBI_ADDRTIMING_ADDRSETUP_MASK
                           | _EBI_ADDRTIMING_ADDRHOLD_MASK))
                      | addressLatchTiming;
  }
  if (banks & EBI_BANK1) {
    32a0:	9b03      	ldr	r3, [sp, #12]
    32a2:	f003 0304 	and.w	r3, r3, #4
    32a6:	2b00      	cmp	r3, #0
    32a8:	d009      	beq.n	32be <EBI_BankAddressTimingSet+0x4e>
    EBI->ADDRTIMING1 = (EBI->ADDRTIMING1
    32aa:	4915      	ldr	r1, [pc, #84]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    32ac:	4b14      	ldr	r3, [pc, #80]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    32ae:	699b      	ldr	r3, [r3, #24]
                        & ~(_EBI_ADDRTIMING1_ADDRSETUP_MASK
    32b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    32b4:	f023 0303 	bic.w	r3, r3, #3
                            | _EBI_ADDRTIMING1_ADDRHOLD_MASK))
                       | addressLatchTiming;
    32b8:	9a05      	ldr	r2, [sp, #20]
    32ba:	4313      	orrs	r3, r2
                       & ~(_EBI_ADDRTIMING_ADDRSETUP_MASK
                           | _EBI_ADDRTIMING_ADDRHOLD_MASK))
                      | addressLatchTiming;
  }
  if (banks & EBI_BANK1) {
    EBI->ADDRTIMING1 = (EBI->ADDRTIMING1
    32bc:	618b      	str	r3, [r1, #24]
                        & ~(_EBI_ADDRTIMING1_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING1_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK2) {
    32be:	9b03      	ldr	r3, [sp, #12]
    32c0:	f003 0308 	and.w	r3, r3, #8
    32c4:	2b00      	cmp	r3, #0
    32c6:	d009      	beq.n	32dc <EBI_BankAddressTimingSet+0x6c>
    EBI->ADDRTIMING2 = (EBI->ADDRTIMING2
    32c8:	490d      	ldr	r1, [pc, #52]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    32ca:	4b0d      	ldr	r3, [pc, #52]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    32cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        & ~(_EBI_ADDRTIMING2_ADDRSETUP_MASK
    32ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    32d2:	f023 0303 	bic.w	r3, r3, #3
                            | _EBI_ADDRTIMING2_ADDRHOLD_MASK))
                       | addressLatchTiming;
    32d6:	9a05      	ldr	r2, [sp, #20]
    32d8:	4313      	orrs	r3, r2
                        & ~(_EBI_ADDRTIMING1_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING1_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK2) {
    EBI->ADDRTIMING2 = (EBI->ADDRTIMING2
    32da:	628b      	str	r3, [r1, #40]	; 0x28
                        & ~(_EBI_ADDRTIMING2_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING2_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK3) {
    32dc:	9b03      	ldr	r3, [sp, #12]
    32de:	f003 0310 	and.w	r3, r3, #16
    32e2:	2b00      	cmp	r3, #0
    32e4:	d009      	beq.n	32fa <EBI_BankAddressTimingSet+0x8a>
    EBI->ADDRTIMING3 = (EBI->ADDRTIMING3
    32e6:	4906      	ldr	r1, [pc, #24]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    32e8:	4b05      	ldr	r3, [pc, #20]	; (3300 <EBI_BankAddressTimingSet+0x90>)
    32ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                        & ~(_EBI_ADDRTIMING3_ADDRSETUP_MASK
    32ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    32f0:	f023 0303 	bic.w	r3, r3, #3
                            | _EBI_ADDRTIMING3_ADDRHOLD_MASK))
                       | addressLatchTiming;
    32f4:	9a05      	ldr	r2, [sp, #20]
    32f6:	4313      	orrs	r3, r2
                        & ~(_EBI_ADDRTIMING2_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING2_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK3) {
    EBI->ADDRTIMING3 = (EBI->ADDRTIMING3
    32f8:	638b      	str	r3, [r1, #56]	; 0x38
                        & ~(_EBI_ADDRTIMING3_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING3_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
}
    32fa:	bf00      	nop
    32fc:	b006      	add	sp, #24
    32fe:	4770      	bx	lr
    3300:	40008000 	.word	0x40008000

00003304 <EBI_BankPolaritySet>:
 *
 * @param[in] polarity
 *   Active high, or active low
 ******************************************************************************/
void EBI_BankPolaritySet(uint32_t banks, EBI_Line_TypeDef line, EBI_Polarity_TypeDef polarity)
{
    3304:	b500      	push	{lr}
    3306:	b085      	sub	sp, #20
    3308:	9001      	str	r0, [sp, #4]
    330a:	460b      	mov	r3, r1
    330c:	f88d 3003 	strb.w	r3, [sp, #3]
    3310:	4613      	mov	r3, r2
    3312:	f88d 3002 	strb.w	r3, [sp, #2]
  uint32_t bankSet = 0;
    3316:	2300      	movs	r3, #0
    3318:	9303      	str	r3, [sp, #12]
  volatile uint32_t *polRegister = 0;
    331a:	2300      	movs	r3, #0
    331c:	9302      	str	r3, [sp, #8]

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    331e:	e09f      	b.n	3460 <EBI_BankPolaritySet+0x15c>
    if (banks & EBI_BANK0) {
    3320:	9b01      	ldr	r3, [sp, #4]
    3322:	f003 0302 	and.w	r3, r3, #2
    3326:	2b00      	cmp	r3, #0
    3328:	d003      	beq.n	3332 <EBI_BankPolaritySet+0x2e>
      polRegister = &EBI->POLARITY;
    332a:	4b51      	ldr	r3, [pc, #324]	; (3470 <EBI_BankPolaritySet+0x16c>)
    332c:	9302      	str	r3, [sp, #8]
      bankSet = EBI_BANK0;
    332e:	2302      	movs	r3, #2
    3330:	9303      	str	r3, [sp, #12]
    }
    if (banks & EBI_BANK1) {
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	f003 0304 	and.w	r3, r3, #4
    3338:	2b00      	cmp	r3, #0
    333a:	d003      	beq.n	3344 <EBI_BankPolaritySet+0x40>
      polRegister = &EBI->POLARITY1;
    333c:	4b4d      	ldr	r3, [pc, #308]	; (3474 <EBI_BankPolaritySet+0x170>)
    333e:	9302      	str	r3, [sp, #8]
      bankSet = EBI_BANK1;
    3340:	2304      	movs	r3, #4
    3342:	9303      	str	r3, [sp, #12]
    }
    if (banks & EBI_BANK2) {
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	f003 0308 	and.w	r3, r3, #8
    334a:	2b00      	cmp	r3, #0
    334c:	d003      	beq.n	3356 <EBI_BankPolaritySet+0x52>
      polRegister = &EBI->POLARITY2;
    334e:	4b4a      	ldr	r3, [pc, #296]	; (3478 <EBI_BankPolaritySet+0x174>)
    3350:	9302      	str	r3, [sp, #8]
      bankSet = EBI_BANK2;
    3352:	2308      	movs	r3, #8
    3354:	9303      	str	r3, [sp, #12]
    }
    if (banks & EBI_BANK3) {
    3356:	9b01      	ldr	r3, [sp, #4]
    3358:	f003 0310 	and.w	r3, r3, #16
    335c:	2b00      	cmp	r3, #0
    335e:	d003      	beq.n	3368 <EBI_BankPolaritySet+0x64>
      polRegister = &EBI->POLARITY3;
    3360:	4b46      	ldr	r3, [pc, #280]	; (347c <EBI_BankPolaritySet+0x178>)
    3362:	9302      	str	r3, [sp, #8]
      bankSet = EBI_BANK3;
    3364:	2310      	movs	r3, #16
    3366:	9303      	str	r3, [sp, #12]
    }

    /* What line to configure */
    switch (line) {
    3368:	f89d 3003 	ldrb.w	r3, [sp, #3]
    336c:	2b0a      	cmp	r3, #10
    336e:	d871      	bhi.n	3454 <EBI_BankPolaritySet+0x150>
    3370:	a201      	add	r2, pc, #4	; (adr r2, 3378 <EBI_BankPolaritySet+0x74>)
    3372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3376:	bf00      	nop
    3378:	000033a5 	.word	0x000033a5
    337c:	000033b5 	.word	0x000033b5
    3380:	000033c5 	.word	0x000033c5
    3384:	000033d5 	.word	0x000033d5
    3388:	000033e5 	.word	0x000033e5
    338c:	000033f5 	.word	0x000033f5
    3390:	00003405 	.word	0x00003405
    3394:	00003415 	.word	0x00003415
    3398:	00003425 	.word	0x00003425
    339c:	00003435 	.word	0x00003435
    33a0:	00003445 	.word	0x00003445
      case ebiLineARDY:
        BUS_RegBitWrite(polRegister, _EBI_POLARITY_ARDYPOL_SHIFT, polarity);
    33a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    33a8:	461a      	mov	r2, r3
    33aa:	2104      	movs	r1, #4
    33ac:	9802      	ldr	r0, [sp, #8]
    33ae:	f7ff fb8d 	bl	2acc <BUS_RegBitWrite>
        break;
    33b2:	e050      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineALE:
        BUS_RegBitWrite(polRegister, _EBI_POLARITY_ALEPOL_SHIFT, polarity);
    33b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    33b8:	461a      	mov	r2, r3
    33ba:	2103      	movs	r1, #3
    33bc:	9802      	ldr	r0, [sp, #8]
    33be:	f7ff fb85 	bl	2acc <BUS_RegBitWrite>
        break;
    33c2:	e048      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineWE:
        BUS_RegBitWrite(polRegister, _EBI_POLARITY_WEPOL_SHIFT, polarity);
    33c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    33c8:	461a      	mov	r2, r3
    33ca:	2102      	movs	r1, #2
    33cc:	9802      	ldr	r0, [sp, #8]
    33ce:	f7ff fb7d 	bl	2acc <BUS_RegBitWrite>
        break;
    33d2:	e040      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineRE:
        BUS_RegBitWrite(polRegister, _EBI_POLARITY_REPOL_SHIFT, polarity);
    33d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    33d8:	461a      	mov	r2, r3
    33da:	2101      	movs	r1, #1
    33dc:	9802      	ldr	r0, [sp, #8]
    33de:	f7ff fb75 	bl	2acc <BUS_RegBitWrite>
        break;
    33e2:	e038      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineCS:
        BUS_RegBitWrite(polRegister, _EBI_POLARITY_CSPOL_SHIFT, polarity);
    33e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    33e8:	461a      	mov	r2, r3
    33ea:	2100      	movs	r1, #0
    33ec:	9802      	ldr	r0, [sp, #8]
    33ee:	f7ff fb6d 	bl	2acc <BUS_RegBitWrite>
        break;
    33f2:	e030      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineBL:
        BUS_RegBitWrite(polRegister, _EBI_POLARITY_BLPOL_SHIFT, polarity);
    33f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    33f8:	461a      	mov	r2, r3
    33fa:	2105      	movs	r1, #5
    33fc:	9802      	ldr	r0, [sp, #8]
    33fe:	f7ff fb65 	bl	2acc <BUS_RegBitWrite>
        break;
    3402:	e028      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineTFTVSync:
        BUS_RegBitWrite(&(EBI->TFTPOLARITY), _EBI_TFTPOLARITY_VSYNCPOL_SHIFT, polarity);
    3404:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3408:	461a      	mov	r2, r3
    340a:	2104      	movs	r1, #4
    340c:	481c      	ldr	r0, [pc, #112]	; (3480 <EBI_BankPolaritySet+0x17c>)
    340e:	f7ff fb5d 	bl	2acc <BUS_RegBitWrite>
        break;
    3412:	e020      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineTFTHSync:
        BUS_RegBitWrite(&(EBI->TFTPOLARITY), _EBI_TFTPOLARITY_HSYNCPOL_SHIFT, polarity);
    3414:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3418:	461a      	mov	r2, r3
    341a:	2103      	movs	r1, #3
    341c:	4818      	ldr	r0, [pc, #96]	; (3480 <EBI_BankPolaritySet+0x17c>)
    341e:	f7ff fb55 	bl	2acc <BUS_RegBitWrite>
        break;
    3422:	e018      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineTFTDataEn:
        BUS_RegBitWrite(&(EBI->TFTPOLARITY), _EBI_TFTPOLARITY_DATAENPOL_SHIFT, polarity);
    3424:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3428:	461a      	mov	r2, r3
    342a:	2102      	movs	r1, #2
    342c:	4814      	ldr	r0, [pc, #80]	; (3480 <EBI_BankPolaritySet+0x17c>)
    342e:	f7ff fb4d 	bl	2acc <BUS_RegBitWrite>
        break;
    3432:	e010      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineTFTDClk:
        BUS_RegBitWrite(&(EBI->TFTPOLARITY), _EBI_TFTPOLARITY_DCLKPOL_SHIFT, polarity);
    3434:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3438:	461a      	mov	r2, r3
    343a:	2101      	movs	r1, #1
    343c:	4810      	ldr	r0, [pc, #64]	; (3480 <EBI_BankPolaritySet+0x17c>)
    343e:	f7ff fb45 	bl	2acc <BUS_RegBitWrite>
        break;
    3442:	e008      	b.n	3456 <EBI_BankPolaritySet+0x152>
      case ebiLineTFTCS:
        BUS_RegBitWrite(&(EBI->TFTPOLARITY), _EBI_TFTPOLARITY_CSPOL_SHIFT, polarity);
    3444:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3448:	461a      	mov	r2, r3
    344a:	2100      	movs	r1, #0
    344c:	480c      	ldr	r0, [pc, #48]	; (3480 <EBI_BankPolaritySet+0x17c>)
    344e:	f7ff fb3d 	bl	2acc <BUS_RegBitWrite>
        break;
    3452:	e000      	b.n	3456 <EBI_BankPolaritySet+0x152>
      default:
        EFM_ASSERT(0);
        break;
    3454:	bf00      	nop
    }
    banks = banks & ~bankSet;
    3456:	9b03      	ldr	r3, [sp, #12]
    3458:	43db      	mvns	r3, r3
    345a:	9a01      	ldr	r2, [sp, #4]
    345c:	4013      	ands	r3, r2
    345e:	9301      	str	r3, [sp, #4]
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    3460:	9b01      	ldr	r3, [sp, #4]
    3462:	2b00      	cmp	r3, #0
    3464:	f47f af5c 	bne.w	3320 <EBI_BankPolaritySet+0x1c>
        EFM_ASSERT(0);
        break;
    }
    banks = banks & ~bankSet;
  }
}
    3468:	bf00      	nop
    346a:	b005      	add	sp, #20
    346c:	f85d fb04 	ldr.w	pc, [sp], #4
    3470:	40008010 	.word	0x40008010
    3474:	40008024 	.word	0x40008024
    3478:	40008034 	.word	0x40008034
    347c:	40008044 	.word	0x40008044
    3480:	4000807c 	.word	0x4000807c

00003484 <GPIO_PinOutClear>:
 *
 * @param[in] pin
 *   The pin to set.
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
    3484:	b082      	sub	sp, #8
    3486:	4603      	mov	r3, r0
    3488:	9100      	str	r1, [sp, #0]
    348a:	f88d 3007 	strb.w	r3, [sp, #7]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
    348e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3492:	2b00      	cmp	r3, #0
    3494:	d012      	beq.n	34bc <GPIO_PinOutClear+0x38>
    3496:	f89d 3007 	ldrb.w	r3, [sp, #7]
    349a:	2b01      	cmp	r3, #1
    349c:	d00e      	beq.n	34bc <GPIO_PinOutClear+0x38>
    349e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34a2:	2b02      	cmp	r3, #2
    34a4:	d00a      	beq.n	34bc <GPIO_PinOutClear+0x38>
    34a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34aa:	2b03      	cmp	r3, #3
    34ac:	d006      	beq.n	34bc <GPIO_PinOutClear+0x38>
    34ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34b2:	2b04      	cmp	r3, #4
    34b4:	d002      	beq.n	34bc <GPIO_PinOutClear+0x38>
    34b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34ba:	2b05      	cmp	r3, #5
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    34bc:	4908      	ldr	r1, [pc, #32]	; (34e0 <GPIO_PinOutClear+0x5c>)
    34be:	f89d 2007 	ldrb.w	r2, [sp, #7]
    34c2:	2001      	movs	r0, #1
    34c4:	9b00      	ldr	r3, [sp, #0]
    34c6:	fa00 f303 	lsl.w	r3, r0, r3
    34ca:	4618      	mov	r0, r3
    34cc:	4613      	mov	r3, r2
    34ce:	00db      	lsls	r3, r3, #3
    34d0:	4413      	add	r3, r2
    34d2:	009b      	lsls	r3, r3, #2
    34d4:	440b      	add	r3, r1
    34d6:	3314      	adds	r3, #20
    34d8:	6018      	str	r0, [r3, #0]
#else
  BUS_RegMaskedClear(&GPIO->P[port].DOUT, 1 << pin);
#endif
}
    34da:	bf00      	nop
    34dc:	b002      	add	sp, #8
    34de:	4770      	bx	lr
    34e0:	40006000 	.word	0x40006000

000034e4 <GPIO_PinOutSet>:
 *
 * @param[in] pin
 *   The pin to set.
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
    34e4:	b082      	sub	sp, #8
    34e6:	4603      	mov	r3, r0
    34e8:	9100      	str	r1, [sp, #0]
    34ea:	f88d 3007 	strb.w	r3, [sp, #7]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
    34ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d012      	beq.n	351c <GPIO_PinOutSet+0x38>
    34f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34fa:	2b01      	cmp	r3, #1
    34fc:	d00e      	beq.n	351c <GPIO_PinOutSet+0x38>
    34fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3502:	2b02      	cmp	r3, #2
    3504:	d00a      	beq.n	351c <GPIO_PinOutSet+0x38>
    3506:	f89d 3007 	ldrb.w	r3, [sp, #7]
    350a:	2b03      	cmp	r3, #3
    350c:	d006      	beq.n	351c <GPIO_PinOutSet+0x38>
    350e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3512:	2b04      	cmp	r3, #4
    3514:	d002      	beq.n	351c <GPIO_PinOutSet+0x38>
    3516:	f89d 3007 	ldrb.w	r3, [sp, #7]
    351a:	2b05      	cmp	r3, #5
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    351c:	4908      	ldr	r1, [pc, #32]	; (3540 <GPIO_PinOutSet+0x5c>)
    351e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3522:	2001      	movs	r0, #1
    3524:	9b00      	ldr	r3, [sp, #0]
    3526:	fa00 f303 	lsl.w	r3, r0, r3
    352a:	4618      	mov	r0, r3
    352c:	4613      	mov	r3, r2
    352e:	00db      	lsls	r3, r3, #3
    3530:	4413      	add	r3, r2
    3532:	009b      	lsls	r3, r3, #2
    3534:	440b      	add	r3, r1
    3536:	3310      	adds	r3, #16
    3538:	6018      	str	r0, [r3, #0]
#else
  BUS_RegMaskedSet(&GPIO->P[port].DOUT, 1 << pin);
#endif
}
    353a:	bf00      	nop
    353c:	b002      	add	sp, #8
    353e:	4770      	bx	lr
    3540:	40006000 	.word	0x40006000

00003544 <GPIO_PinModeSet>:
 ******************************************************************************/
void GPIO_PinModeSet(GPIO_Port_TypeDef port,
                     unsigned int pin,
                     GPIO_Mode_TypeDef mode,
                     unsigned int out)
{
    3544:	b510      	push	{r4, lr}
    3546:	b084      	sub	sp, #16
    3548:	9102      	str	r1, [sp, #8]
    354a:	9301      	str	r3, [sp, #4]
    354c:	4603      	mov	r3, r0
    354e:	f88d 300f 	strb.w	r3, [sp, #15]
    3552:	4613      	mov	r3, r2
    3554:	f88d 300e 	strb.w	r3, [sp, #14]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
    3558:	f89d 300f 	ldrb.w	r3, [sp, #15]
    355c:	2b00      	cmp	r3, #0
    355e:	d012      	beq.n	3586 <GPIO_PinModeSet+0x42>
    3560:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3564:	2b01      	cmp	r3, #1
    3566:	d00e      	beq.n	3586 <GPIO_PinModeSet+0x42>
    3568:	f89d 300f 	ldrb.w	r3, [sp, #15]
    356c:	2b02      	cmp	r3, #2
    356e:	d00a      	beq.n	3586 <GPIO_PinModeSet+0x42>
    3570:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3574:	2b03      	cmp	r3, #3
    3576:	d006      	beq.n	3586 <GPIO_PinModeSet+0x42>
    3578:	f89d 300f 	ldrb.w	r3, [sp, #15]
    357c:	2b04      	cmp	r3, #4
    357e:	d002      	beq.n	3586 <GPIO_PinModeSet+0x42>
    3580:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3584:	2b05      	cmp	r3, #5

  /* If disabling pin, do not modify DOUT in order to reduce chance for */
  /* glitch/spike (may not be sufficient precaution in all use cases) */
  if (mode != gpioModeDisabled) {
    3586:	f89d 300e 	ldrb.w	r3, [sp, #14]
    358a:	2b00      	cmp	r3, #0
    358c:	d00f      	beq.n	35ae <GPIO_PinModeSet+0x6a>
    if (out) {
    358e:	9b01      	ldr	r3, [sp, #4]
    3590:	2b00      	cmp	r3, #0
    3592:	d006      	beq.n	35a2 <GPIO_PinModeSet+0x5e>
      GPIO_PinOutSet(port, pin);
    3594:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3598:	9902      	ldr	r1, [sp, #8]
    359a:	4618      	mov	r0, r3
    359c:	f7ff ffa2 	bl	34e4 <GPIO_PinOutSet>
    35a0:	e005      	b.n	35ae <GPIO_PinModeSet+0x6a>
    } else {
      GPIO_PinOutClear(port, pin);
    35a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    35a6:	9902      	ldr	r1, [sp, #8]
    35a8:	4618      	mov	r0, r3
    35aa:	f7ff ff6b 	bl	3484 <GPIO_PinOutClear>
    }
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    35ae:	9b02      	ldr	r3, [sp, #8]
    35b0:	2b07      	cmp	r3, #7
    35b2:	d822      	bhi.n	35fa <GPIO_PinModeSet+0xb6>
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
    35b4:	4c30      	ldr	r4, [pc, #192]	; (3678 <GPIO_PinModeSet+0x134>)
    35b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    35ba:	482f      	ldr	r0, [pc, #188]	; (3678 <GPIO_PinModeSet+0x134>)
    35bc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    35c0:	460b      	mov	r3, r1
    35c2:	00db      	lsls	r3, r3, #3
    35c4:	440b      	add	r3, r1
    35c6:	009b      	lsls	r3, r3, #2
    35c8:	4403      	add	r3, r0
    35ca:	3304      	adds	r3, #4
    35cc:	6819      	ldr	r1, [r3, #0]
    35ce:	9b02      	ldr	r3, [sp, #8]
    35d0:	009b      	lsls	r3, r3, #2
    35d2:	200f      	movs	r0, #15
    35d4:	fa00 f303 	lsl.w	r3, r0, r3
    35d8:	43db      	mvns	r3, r3
    35da:	400b      	ands	r3, r1
                          | (mode << (pin * 4));
    35dc:	f89d 000e 	ldrb.w	r0, [sp, #14]
    35e0:	9902      	ldr	r1, [sp, #8]
    35e2:	0089      	lsls	r1, r1, #2
    35e4:	fa00 f101 	lsl.w	r1, r0, r1
    35e8:	4319      	orrs	r1, r3
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
    35ea:	4613      	mov	r3, r2
    35ec:	00db      	lsls	r3, r3, #3
    35ee:	4413      	add	r3, r2
    35f0:	009b      	lsls	r3, r3, #2
    35f2:	4423      	add	r3, r4
    35f4:	3304      	adds	r3, #4
    35f6:	6019      	str	r1, [r3, #0]
    35f8:	e027      	b.n	364a <GPIO_PinModeSet+0x106>
                          | (mode << (pin * 4));
  } else {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
    35fa:	4c1f      	ldr	r4, [pc, #124]	; (3678 <GPIO_PinModeSet+0x134>)
    35fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    3600:	481d      	ldr	r0, [pc, #116]	; (3678 <GPIO_PinModeSet+0x134>)
    3602:	f89d 100f 	ldrb.w	r1, [sp, #15]
    3606:	460b      	mov	r3, r1
    3608:	00db      	lsls	r3, r3, #3
    360a:	440b      	add	r3, r1
    360c:	009b      	lsls	r3, r3, #2
    360e:	4403      	add	r3, r0
    3610:	3308      	adds	r3, #8
    3612:	6819      	ldr	r1, [r3, #0]
    3614:	9b02      	ldr	r3, [sp, #8]
    3616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    361a:	3b08      	subs	r3, #8
    361c:	009b      	lsls	r3, r3, #2
    361e:	200f      	movs	r0, #15
    3620:	fa00 f303 	lsl.w	r3, r0, r3
    3624:	43db      	mvns	r3, r3
    3626:	4019      	ands	r1, r3
                          | (mode << ((pin - 8) * 4));
    3628:	f89d 000e 	ldrb.w	r0, [sp, #14]
    362c:	9b02      	ldr	r3, [sp, #8]
    362e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3632:	3b08      	subs	r3, #8
    3634:	009b      	lsls	r3, r3, #2
    3636:	fa00 f303 	lsl.w	r3, r0, r3
    363a:	4319      	orrs	r1, r3
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
                          | (mode << (pin * 4));
  } else {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
    363c:	4613      	mov	r3, r2
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	009b      	lsls	r3, r3, #2
    3644:	4423      	add	r3, r4
    3646:	3308      	adds	r3, #8
    3648:	6019      	str	r1, [r3, #0]
                          | (mode << ((pin - 8) * 4));
  }

  if (mode == gpioModeDisabled) {
    364a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    364e:	2b00      	cmp	r3, #0
    3650:	d10f      	bne.n	3672 <GPIO_PinModeSet+0x12e>
    if (out) {
    3652:	9b01      	ldr	r3, [sp, #4]
    3654:	2b00      	cmp	r3, #0
    3656:	d006      	beq.n	3666 <GPIO_PinModeSet+0x122>
      GPIO_PinOutSet(port, pin);
    3658:	f89d 300f 	ldrb.w	r3, [sp, #15]
    365c:	9902      	ldr	r1, [sp, #8]
    365e:	4618      	mov	r0, r3
    3660:	f7ff ff40 	bl	34e4 <GPIO_PinOutSet>
    } else {
      GPIO_PinOutClear(port, pin);
    }
  }
}
    3664:	e005      	b.n	3672 <GPIO_PinModeSet+0x12e>

  if (mode == gpioModeDisabled) {
    if (out) {
      GPIO_PinOutSet(port, pin);
    } else {
      GPIO_PinOutClear(port, pin);
    3666:	f89d 300f 	ldrb.w	r3, [sp, #15]
    366a:	9902      	ldr	r1, [sp, #8]
    366c:	4618      	mov	r0, r3
    366e:	f7ff ff09 	bl	3484 <GPIO_PinOutClear>
    }
  }
}
    3672:	bf00      	nop
    3674:	b004      	add	sp, #16
    3676:	bd10      	pop	{r4, pc}
    3678:	40006000 	.word	0x40006000

0000367c <SYSTEM_ChipRevisionGet>:
 *
 * @param[out] rev
 *   Location to place chip revision info.
 ******************************************************************************/
void SYSTEM_ChipRevisionGet(SYSTEM_ChipRevision_TypeDef *rev)
{
    367c:	b084      	sub	sp, #16
    367e:	9001      	str	r0, [sp, #4]
  uint8_t tmp;

  EFM_ASSERT(rev);

  /* CHIP FAMILY bit [5:2] */
  tmp  = (((ROMTABLE->PID1 & _ROMTABLE_PID1_FAMILYMSB_MASK) >> _ROMTABLE_PID1_FAMILYMSB_SHIFT) << 2);
    3680:	4b1c      	ldr	r3, [pc, #112]	; (36f4 <SYSTEM_ChipRevisionGet+0x78>)
    3682:	695b      	ldr	r3, [r3, #20]
    3684:	b2db      	uxtb	r3, r3
    3686:	f003 030f 	and.w	r3, r3, #15
    368a:	b2db      	uxtb	r3, r3
    368c:	009b      	lsls	r3, r3, #2
    368e:	f88d 300f 	strb.w	r3, [sp, #15]
  /* CHIP FAMILY bit [1:0] */
  tmp |=  ((ROMTABLE->PID0 & _ROMTABLE_PID0_FAMILYLSB_MASK) >> _ROMTABLE_PID0_FAMILYLSB_SHIFT);
    3692:	4b18      	ldr	r3, [pc, #96]	; (36f4 <SYSTEM_ChipRevisionGet+0x78>)
    3694:	691b      	ldr	r3, [r3, #16]
    3696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    369a:	099b      	lsrs	r3, r3, #6
    369c:	b2da      	uxtb	r2, r3
    369e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    36a2:	4313      	orrs	r3, r2
    36a4:	f88d 300f 	strb.w	r3, [sp, #15]
  rev->family = tmp;
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    36ae:	709a      	strb	r2, [r3, #2]

  /* CHIP MAJOR bit [3:0] */
  rev->major = (ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT;
    36b0:	4b10      	ldr	r3, [pc, #64]	; (36f4 <SYSTEM_ChipRevisionGet+0x78>)
    36b2:	691b      	ldr	r3, [r3, #16]
    36b4:	b2db      	uxtb	r3, r3
    36b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    36ba:	b2da      	uxtb	r2, r3
    36bc:	9b01      	ldr	r3, [sp, #4]
    36be:	705a      	strb	r2, [r3, #1]

  /* CHIP MINOR bit [7:4] */
  tmp  = (((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4);
    36c0:	4b0c      	ldr	r3, [pc, #48]	; (36f4 <SYSTEM_ChipRevisionGet+0x78>)
    36c2:	699b      	ldr	r3, [r3, #24]
    36c4:	b2db      	uxtb	r3, r3
    36c6:	f023 030f 	bic.w	r3, r3, #15
    36ca:	f88d 300f 	strb.w	r3, [sp, #15]
  /* CHIP MINOR bit [3:0] */
  tmp |=  ((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);
    36ce:	4b09      	ldr	r3, [pc, #36]	; (36f4 <SYSTEM_ChipRevisionGet+0x78>)
    36d0:	69db      	ldr	r3, [r3, #28]
    36d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    36d6:	091b      	lsrs	r3, r3, #4
    36d8:	b2da      	uxtb	r2, r3
    36da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    36de:	4313      	orrs	r3, r2
    36e0:	f88d 300f 	strb.w	r3, [sp, #15]
  rev->minor = tmp;
    36e4:	9b01      	ldr	r3, [sp, #4]
    36e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    36ea:	701a      	strb	r2, [r3, #0]
}
    36ec:	bf00      	nop
    36ee:	b004      	add	sp, #16
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop
    36f4:	e00fffd0 	.word	0xe00fffd0

000036f8 <USART_BaudrateAsyncSet>:
 ******************************************************************************/
void USART_BaudrateAsyncSet(USART_TypeDef *usart,
                            uint32_t refFreq,
                            uint32_t baudrate,
                            USART_OVS_TypeDef ovs)
{
    36f8:	b500      	push	{lr}
    36fa:	b087      	sub	sp, #28
    36fc:	9003      	str	r0, [sp, #12]
    36fe:	9102      	str	r1, [sp, #8]
    3700:	9201      	str	r2, [sp, #4]
    3702:	f88d 3003 	strb.w	r3, [sp, #3]
   * and calculate 1/64 of CLKDIV first. This allows for fHFPERCLK
   * up to 1GHz without overflowing a 32 bit value!
   */

  /* HFPERCLK used to clock all USART/UART peripheral modules */
  if (!refFreq) {
    3706:	9b02      	ldr	r3, [sp, #8]
    3708:	2b00      	cmp	r3, #0
    370a:	d103      	bne.n	3714 <USART_BaudrateAsyncSet+0x1c>
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    370c:	4825      	ldr	r0, [pc, #148]	; (37a4 <USART_BaudrateAsyncSet+0xac>)
    370e:	f7ff f833 	bl	2778 <CMU_ClockFreqGet>
    3712:	9002      	str	r0, [sp, #8]
  }

  /* Map oversampling */
  switch (ovs) {
    3714:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3718:	2b20      	cmp	r3, #32
    371a:	d00c      	beq.n	3736 <USART_BaudrateAsyncSet+0x3e>
    371c:	2b20      	cmp	r3, #32
    371e:	dc02      	bgt.n	3726 <USART_BaudrateAsyncSet+0x2e>
    3720:	2b00      	cmp	r3, #0
    3722:	d005      	beq.n	3730 <USART_BaudrateAsyncSet+0x38>
      break;

    default:
      /* Invalid input */
      EFM_ASSERT(0);
      return;
    3724:	e03b      	b.n	379e <USART_BaudrateAsyncSet+0xa6>
  if (!refFreq) {
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
  }

  /* Map oversampling */
  switch (ovs) {
    3726:	2b40      	cmp	r3, #64	; 0x40
    3728:	d008      	beq.n	373c <USART_BaudrateAsyncSet+0x44>
    372a:	2b60      	cmp	r3, #96	; 0x60
    372c:	d009      	beq.n	3742 <USART_BaudrateAsyncSet+0x4a>
      break;

    default:
      /* Invalid input */
      EFM_ASSERT(0);
      return;
    372e:	e036      	b.n	379e <USART_BaudrateAsyncSet+0xa6>

  /* Map oversampling */
  switch (ovs) {
    case usartOVS16:
      EFM_ASSERT(baudrate <= (refFreq / 16));
      oversample = 16;
    3730:	2310      	movs	r3, #16
    3732:	9305      	str	r3, [sp, #20]
      break;
    3734:	e008      	b.n	3748 <USART_BaudrateAsyncSet+0x50>

    case usartOVS8:
      EFM_ASSERT(baudrate <= (refFreq / 8));
      oversample = 8;
    3736:	2308      	movs	r3, #8
    3738:	9305      	str	r3, [sp, #20]
      break;
    373a:	e005      	b.n	3748 <USART_BaudrateAsyncSet+0x50>

    case usartOVS6:
      EFM_ASSERT(baudrate <= (refFreq / 6));
      oversample = 6;
    373c:	2306      	movs	r3, #6
    373e:	9305      	str	r3, [sp, #20]
      break;
    3740:	e002      	b.n	3748 <USART_BaudrateAsyncSet+0x50>

    case usartOVS4:
      EFM_ASSERT(baudrate <= (refFreq / 4));
      oversample = 4;
    3742:	2304      	movs	r3, #4
    3744:	9305      	str	r3, [sp, #20]
      break;
    3746:	bf00      	nop
  /* Calculate and set CLKDIV with fractional bits.
   * The added (oversample*baudrate)/2 in the first line is to round the
   * divisor to the nearest fractional divisor. */
#if defined(_SILICON_LABS_32B_SERIES_0) && !defined(_EFM32_HAPPY_FAMILY)
  /* Devices with 2 fractional bits. CLKDIV[7:6] */
  clkdiv  = 4 * refFreq + (oversample * baudrate) / 2;
    3748:	9b02      	ldr	r3, [sp, #8]
    374a:	009a      	lsls	r2, r3, #2
    374c:	9b05      	ldr	r3, [sp, #20]
    374e:	9901      	ldr	r1, [sp, #4]
    3750:	fb01 f303 	mul.w	r3, r1, r3
    3754:	085b      	lsrs	r3, r3, #1
    3756:	4413      	add	r3, r2
    3758:	9304      	str	r3, [sp, #16]
  clkdiv /= (oversample * baudrate);
    375a:	9b05      	ldr	r3, [sp, #20]
    375c:	9a01      	ldr	r2, [sp, #4]
    375e:	fb02 f303 	mul.w	r3, r2, r3
    3762:	9a04      	ldr	r2, [sp, #16]
    3764:	fbb2 f3f3 	udiv	r3, r2, r3
    3768:	9304      	str	r3, [sp, #16]
  clkdiv -= 4;
    376a:	9b04      	ldr	r3, [sp, #16]
    376c:	3b04      	subs	r3, #4
    376e:	9304      	str	r3, [sp, #16]
  clkdiv *= 64;
    3770:	9b04      	ldr	r3, [sp, #16]
    3772:	019b      	lsls	r3, r3, #6
    3774:	9304      	str	r3, [sp, #16]

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(clkdiv <= CLKDIV_MASK);

  /* Make sure we don't write to reserved bits */
  clkdiv &= CLKDIV_MASK;
    3776:	9a04      	ldr	r2, [sp, #16]
    3778:	4b0b      	ldr	r3, [pc, #44]	; (37a8 <USART_BaudrateAsyncSet+0xb0>)
    377a:	4013      	ands	r3, r2
    377c:	9304      	str	r3, [sp, #16]

  usart->CTRL  &= ~_USART_CTRL_OVS_MASK;
    377e:	9b03      	ldr	r3, [sp, #12]
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    3786:	9b03      	ldr	r3, [sp, #12]
    3788:	601a      	str	r2, [r3, #0]
  usart->CTRL  |= ovs;
    378a:	9b03      	ldr	r3, [sp, #12]
    378c:	681a      	ldr	r2, [r3, #0]
    378e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3792:	431a      	orrs	r2, r3
    3794:	9b03      	ldr	r3, [sp, #12]
    3796:	601a      	str	r2, [r3, #0]
  usart->CLKDIV = clkdiv;
    3798:	9b03      	ldr	r3, [sp, #12]
    379a:	9a04      	ldr	r2, [sp, #16]
    379c:	615a      	str	r2, [r3, #20]
}
    379e:	b007      	add	sp, #28
    37a0:	f85d fb04 	ldr.w	pc, [sp], #4
    37a4:	00048140 	.word	0x00048140
    37a8:	001fffc0 	.word	0x001fffc0

000037ac <USART_BaudrateSyncSet>:
 *
 * @param[in] baudrate
 *   Baudrate to try to achieve for USART.
 ******************************************************************************/
void USART_BaudrateSyncSet(USART_TypeDef *usart, uint32_t refFreq, uint32_t baudrate)
{
    37ac:	b500      	push	{lr}
    37ae:	b087      	sub	sp, #28
    37b0:	9003      	str	r0, [sp, #12]
    37b2:	9102      	str	r1, [sp, #8]
    37b4:	9201      	str	r2, [sp, #4]
   *
   * CLKDIV = 256 * (fHFPERCLK/(2 * br) - 1)
   */

  /* HFPERCLK used to clock all USART/UART peripheral modules */
  if (!refFreq) {
    37b6:	9b02      	ldr	r3, [sp, #8]
    37b8:	2b00      	cmp	r3, #0
    37ba:	d103      	bne.n	37c4 <USART_BaudrateSyncSet+0x18>
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    37bc:	480a      	ldr	r0, [pc, #40]	; (37e8 <USART_BaudrateSyncSet+0x3c>)
    37be:	f7fe ffdb 	bl	2778 <CMU_ClockFreqGet>
    37c2:	9002      	str	r0, [sp, #8]
  }

  clkdiv = (refFreq - 1) / (2 * baudrate);
    37c4:	9b02      	ldr	r3, [sp, #8]
    37c6:	1e5a      	subs	r2, r3, #1
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	005b      	lsls	r3, r3, #1
    37cc:	fbb2 f3f3 	udiv	r3, r2, r3
    37d0:	9305      	str	r3, [sp, #20]
  clkdiv = clkdiv << 8;
    37d2:	9b05      	ldr	r3, [sp, #20]
    37d4:	021b      	lsls	r3, r3, #8
    37d6:	9305      	str	r3, [sp, #20]

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(!(clkdiv & ~CLKDIV_MASK));

  usart->CLKDIV = clkdiv;
    37d8:	9b03      	ldr	r3, [sp, #12]
    37da:	9a05      	ldr	r2, [sp, #20]
    37dc:	615a      	str	r2, [r3, #20]
}
    37de:	bf00      	nop
    37e0:	b007      	add	sp, #28
    37e2:	f85d fb04 	ldr.w	pc, [sp], #4
    37e6:	bf00      	nop
    37e8:	00048140 	.word	0x00048140

000037ec <USART_Enable>:
 *
 * @param[in] enable
 *   Select status for receiver/transmitter.
 ******************************************************************************/
void USART_Enable(USART_TypeDef *usart, USART_Enable_TypeDef enable)
{
    37ec:	b084      	sub	sp, #16
    37ee:	9001      	str	r0, [sp, #4]
    37f0:	460b      	mov	r3, r1
    37f2:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t tmp;

  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart)
    37f6:	9b01      	ldr	r3, [sp, #4]
    37f8:	4a12      	ldr	r2, [pc, #72]	; (3844 <USART_Enable+0x58>)
    37fa:	4293      	cmp	r3, r2
    37fc:	d00e      	beq.n	381c <USART_Enable+0x30>
    37fe:	9b01      	ldr	r3, [sp, #4]
    3800:	4a11      	ldr	r2, [pc, #68]	; (3848 <USART_Enable+0x5c>)
    3802:	4293      	cmp	r3, r2
    3804:	d00a      	beq.n	381c <USART_Enable+0x30>
    3806:	9b01      	ldr	r3, [sp, #4]
    3808:	4a10      	ldr	r2, [pc, #64]	; (384c <USART_Enable+0x60>)
    380a:	4293      	cmp	r3, r2
    380c:	d006      	beq.n	381c <USART_Enable+0x30>
    380e:	9b01      	ldr	r3, [sp, #4]
    3810:	4a0f      	ldr	r2, [pc, #60]	; (3850 <USART_Enable+0x64>)
    3812:	4293      	cmp	r3, r2
    3814:	d002      	beq.n	381c <USART_Enable+0x30>
    3816:	9b01      	ldr	r3, [sp, #4]
    3818:	4a0e      	ldr	r2, [pc, #56]	; (3854 <USART_Enable+0x68>)
    381a:	4293      	cmp	r3, r2
    381c:	bf00      	nop
             || USARTRF_REF_VALID(usart)
             || UART_REF_VALID(usart) );

  /* Disable as specified */
  tmp        = ~((uint32_t) (enable));
    381e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3822:	43db      	mvns	r3, r3
    3824:	9303      	str	r3, [sp, #12]
  tmp       &= _USART_CMD_RXEN_MASK | _USART_CMD_TXEN_MASK;
    3826:	9b03      	ldr	r3, [sp, #12]
    3828:	f003 0305 	and.w	r3, r3, #5
    382c:	9303      	str	r3, [sp, #12]
  usart->CMD = tmp << 1;
    382e:	9b03      	ldr	r3, [sp, #12]
    3830:	005a      	lsls	r2, r3, #1
    3832:	9b01      	ldr	r3, [sp, #4]
    3834:	60da      	str	r2, [r3, #12]

  /* Enable as specified */
  usart->CMD = (uint32_t) (enable);
    3836:	f89d 2003 	ldrb.w	r2, [sp, #3]
    383a:	9b01      	ldr	r3, [sp, #4]
    383c:	60da      	str	r2, [r3, #12]
}
    383e:	bf00      	nop
    3840:	b004      	add	sp, #16
    3842:	4770      	bx	lr
    3844:	4000c000 	.word	0x4000c000
    3848:	4000c400 	.word	0x4000c400
    384c:	4000c800 	.word	0x4000c800
    3850:	4000e000 	.word	0x4000e000
    3854:	4000e400 	.word	0x4000e400

00003858 <USART_InitAsync>:
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitAsync(USART_TypeDef *usart, const USART_InitAsync_TypeDef *init)
{
    3858:	b500      	push	{lr}
    385a:	b083      	sub	sp, #12
    385c:	9001      	str	r0, [sp, #4]
    385e:	9100      	str	r1, [sp, #0]
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart)
    3860:	9b01      	ldr	r3, [sp, #4]
    3862:	4a24      	ldr	r2, [pc, #144]	; (38f4 <USART_InitAsync+0x9c>)
    3864:	4293      	cmp	r3, r2
    3866:	d00e      	beq.n	3886 <USART_InitAsync+0x2e>
    3868:	9b01      	ldr	r3, [sp, #4]
    386a:	4a23      	ldr	r2, [pc, #140]	; (38f8 <USART_InitAsync+0xa0>)
    386c:	4293      	cmp	r3, r2
    386e:	d00a      	beq.n	3886 <USART_InitAsync+0x2e>
    3870:	9b01      	ldr	r3, [sp, #4]
    3872:	4a22      	ldr	r2, [pc, #136]	; (38fc <USART_InitAsync+0xa4>)
    3874:	4293      	cmp	r3, r2
    3876:	d006      	beq.n	3886 <USART_InitAsync+0x2e>
    3878:	9b01      	ldr	r3, [sp, #4]
    387a:	4a21      	ldr	r2, [pc, #132]	; (3900 <USART_InitAsync+0xa8>)
    387c:	4293      	cmp	r3, r2
    387e:	d002      	beq.n	3886 <USART_InitAsync+0x2e>
    3880:	9b01      	ldr	r3, [sp, #4]
    3882:	4a20      	ldr	r2, [pc, #128]	; (3904 <USART_InitAsync+0xac>)
    3884:	4293      	cmp	r3, r2
    3886:	bf00      	nop
             || USARTRF_REF_VALID(usart)
             || UART_REF_VALID(usart) );

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);
    3888:	9801      	ldr	r0, [sp, #4]
    388a:	f000 f8a1 	bl	39d0 <USART_Reset>

#if defined(USART_INPUT_RXPRS) && defined(USART_CTRL_MVDIS)
  /* Disable majority vote if specified. */
  if (init->mvdis) {
    388e:	9b00      	ldr	r3, [sp, #0]
    3890:	7c9b      	ldrb	r3, [r3, #18]
    3892:	2b00      	cmp	r3, #0
    3894:	d005      	beq.n	38a2 <USART_InitAsync+0x4a>
    usart->CTRL |= USART_CTRL_MVDIS;
    3896:	9b01      	ldr	r3, [sp, #4]
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    389e:	9b01      	ldr	r3, [sp, #4]
    38a0:	601a      	str	r2, [r3, #0]
  }

  /* Configure PRS input mode. */
  if (init->prsRxEnable) {
    38a2:	9b00      	ldr	r3, [sp, #0]
    38a4:	7cdb      	ldrb	r3, [r3, #19]
    38a6:	2b00      	cmp	r3, #0
    38a8:	d007      	beq.n	38ba <USART_InitAsync+0x62>
    usart->INPUT = (uint32_t) init->prsRxCh | USART_INPUT_RXPRS;
    38aa:	9b00      	ldr	r3, [sp, #0]
    38ac:	7d1b      	ldrb	r3, [r3, #20]
    38ae:	f043 0310 	orr.w	r3, r3, #16
    38b2:	b2db      	uxtb	r3, r3
    38b4:	461a      	mov	r2, r3
    38b6:	9b01      	ldr	r3, [sp, #4]
    38b8:	659a      	str	r2, [r3, #88]	; 0x58
  }
#endif

  /* Configure databits, stopbits and parity */
  usart->FRAME = (uint32_t)init->databits
    38ba:	9b00      	ldr	r3, [sp, #0]
    38bc:	7b5b      	ldrb	r3, [r3, #13]
    38be:	461a      	mov	r2, r3
                 | (uint32_t)init->stopbits
    38c0:	9b00      	ldr	r3, [sp, #0]
    38c2:	8a1b      	ldrh	r3, [r3, #16]
    38c4:	4313      	orrs	r3, r2
                 | (uint32_t)init->parity;
    38c6:	9a00      	ldr	r2, [sp, #0]
    38c8:	89d2      	ldrh	r2, [r2, #14]
    38ca:	431a      	orrs	r2, r3
    usart->INPUT = (uint32_t) init->prsRxCh | USART_INPUT_RXPRS;
  }
#endif

  /* Configure databits, stopbits and parity */
  usart->FRAME = (uint32_t)init->databits
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	605a      	str	r2, [r3, #4]
                 | (uint32_t)init->stopbits
                 | (uint32_t)init->parity;

  /* Configure baudrate */
  USART_BaudrateAsyncSet(usart, init->refFreq, init->baudrate, init->oversampling);
    38d0:	9b00      	ldr	r3, [sp, #0]
    38d2:	6859      	ldr	r1, [r3, #4]
    38d4:	9b00      	ldr	r3, [sp, #0]
    38d6:	689a      	ldr	r2, [r3, #8]
    38d8:	9b00      	ldr	r3, [sp, #0]
    38da:	7b1b      	ldrb	r3, [r3, #12]
    38dc:	9801      	ldr	r0, [sp, #4]
    38de:	f7ff ff0b 	bl	36f8 <USART_BaudrateAsyncSet>
  if (init->autoCsEnable) {
    usart->CTRL |= USART_CTRL_AUTOCS;
  }
#endif
  /* Finally enable (as specified) */
  usart->CMD = (uint32_t)init->enable;
    38e2:	9b00      	ldr	r3, [sp, #0]
    38e4:	781b      	ldrb	r3, [r3, #0]
    38e6:	461a      	mov	r2, r3
    38e8:	9b01      	ldr	r3, [sp, #4]
    38ea:	60da      	str	r2, [r3, #12]
}
    38ec:	bf00      	nop
    38ee:	b003      	add	sp, #12
    38f0:	f85d fb04 	ldr.w	pc, [sp], #4
    38f4:	4000c000 	.word	0x4000c000
    38f8:	4000c400 	.word	0x4000c400
    38fc:	4000c800 	.word	0x4000c800
    3900:	4000e000 	.word	0x4000e000
    3904:	4000e400 	.word	0x4000e400

00003908 <USART_InitSync>:
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitSync(USART_TypeDef *usart, const USART_InitSync_TypeDef *init)
{
    3908:	b500      	push	{lr}
    390a:	b083      	sub	sp, #12
    390c:	9001      	str	r0, [sp, #4]
    390e:	9100      	str	r1, [sp, #0]
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart) || USARTRF_REF_VALID(usart) );
    3910:	9b01      	ldr	r3, [sp, #4]
    3912:	4a2c      	ldr	r2, [pc, #176]	; (39c4 <USART_InitSync+0xbc>)
    3914:	4293      	cmp	r3, r2
    3916:	d006      	beq.n	3926 <USART_InitSync+0x1e>
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	4a2b      	ldr	r2, [pc, #172]	; (39c8 <USART_InitSync+0xc0>)
    391c:	4293      	cmp	r3, r2
    391e:	d002      	beq.n	3926 <USART_InitSync+0x1e>
    3920:	9b01      	ldr	r3, [sp, #4]
    3922:	4a2a      	ldr	r2, [pc, #168]	; (39cc <USART_InitSync+0xc4>)
    3924:	4293      	cmp	r3, r2
    3926:	bf00      	nop

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);
    3928:	9801      	ldr	r0, [sp, #4]
    392a:	f000 f851 	bl	39d0 <USART_Reset>

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
    392e:	9b01      	ldr	r3, [sp, #4]
    3930:	681a      	ldr	r2, [r3, #0]
                 | (uint32_t)init->clockMode
    3932:	9b00      	ldr	r3, [sp, #0]
    3934:	8a1b      	ldrh	r3, [r3, #16]
    3936:	f043 0301 	orr.w	r3, r3, #1
    393a:	b29b      	uxth	r3, r3
    393c:	4619      	mov	r1, r3
                 | (init->msbf ? USART_CTRL_MSBF : 0);
    393e:	9b00      	ldr	r3, [sp, #0]
    3940:	7b9b      	ldrb	r3, [r3, #14]
    3942:	2b00      	cmp	r3, #0
    3944:	d002      	beq.n	394c <USART_InitSync+0x44>
    3946:	f44f 6380 	mov.w	r3, #1024	; 0x400
    394a:	e000      	b.n	394e <USART_InitSync+0x46>
    394c:	2300      	movs	r3, #0
    394e:	430b      	orrs	r3, r1

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
    3950:	431a      	orrs	r2, r3
    3952:	9b01      	ldr	r3, [sp, #4]
    3954:	601a      	str	r2, [r3, #0]
                 | (uint32_t)init->clockMode
                 | (init->msbf ? USART_CTRL_MSBF : 0);

#if defined(_USART_CTRL_AUTOTX_MASK)
  usart->CTRL |= init->autoTx ? USART_CTRL_AUTOTX : 0;
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	681a      	ldr	r2, [r3, #0]
    395a:	9b00      	ldr	r3, [sp, #0]
    395c:	7d1b      	ldrb	r3, [r3, #20]
    395e:	2b00      	cmp	r3, #0
    3960:	d002      	beq.n	3968 <USART_InitSync+0x60>
    3962:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3966:	e000      	b.n	396a <USART_InitSync+0x62>
    3968:	2300      	movs	r3, #0
    396a:	431a      	orrs	r2, r3
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	601a      	str	r2, [r3, #0]
#endif

#if defined(_USART_INPUT_RXPRS_MASK)
  /* Configure PRS input mode. */
  if (init->prsRxEnable) {
    3970:	9b00      	ldr	r3, [sp, #0]
    3972:	7c9b      	ldrb	r3, [r3, #18]
    3974:	2b00      	cmp	r3, #0
    3976:	d007      	beq.n	3988 <USART_InitSync+0x80>
    usart->INPUT = (uint32_t)init->prsRxCh | USART_INPUT_RXPRS;
    3978:	9b00      	ldr	r3, [sp, #0]
    397a:	7cdb      	ldrb	r3, [r3, #19]
    397c:	f043 0310 	orr.w	r3, r3, #16
    3980:	b2db      	uxtb	r3, r3
    3982:	461a      	mov	r2, r3
    3984:	9b01      	ldr	r3, [sp, #4]
    3986:	659a      	str	r2, [r3, #88]	; 0x58
  }
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = (uint32_t)init->databits
    3988:	9b00      	ldr	r3, [sp, #0]
    398a:	7b1b      	ldrb	r3, [r3, #12]
                 | USART_FRAME_STOPBITS_DEFAULT
                 | USART_FRAME_PARITY_DEFAULT;
    398c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    usart->INPUT = (uint32_t)init->prsRxCh | USART_INPUT_RXPRS;
  }
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = (uint32_t)init->databits
    3990:	9b01      	ldr	r3, [sp, #4]
    3992:	605a      	str	r2, [r3, #4]
                 | USART_FRAME_STOPBITS_DEFAULT
                 | USART_FRAME_PARITY_DEFAULT;

  /* Configure baudrate */
  USART_BaudrateSyncSet(usart, init->refFreq, init->baudrate);
    3994:	9b00      	ldr	r3, [sp, #0]
    3996:	6859      	ldr	r1, [r3, #4]
    3998:	9b00      	ldr	r3, [sp, #0]
    399a:	689b      	ldr	r3, [r3, #8]
    399c:	461a      	mov	r2, r3
    399e:	9801      	ldr	r0, [sp, #4]
    39a0:	f7ff ff04 	bl	37ac <USART_BaudrateSyncSet>

  /* Finally enable (as specified) */
  if (init->master) {
    39a4:	9b00      	ldr	r3, [sp, #0]
    39a6:	7b5b      	ldrb	r3, [r3, #13]
    39a8:	2b00      	cmp	r3, #0
    39aa:	d002      	beq.n	39b2 <USART_InitSync+0xaa>
    usart->CMD = USART_CMD_MASTEREN;
    39ac:	9b01      	ldr	r3, [sp, #4]
    39ae:	2210      	movs	r2, #16
    39b0:	60da      	str	r2, [r3, #12]
  if (init->autoCsEnable) {
    usart->CTRL |= USART_CTRL_AUTOCS;
  }
#endif

  usart->CMD = (uint32_t)init->enable;
    39b2:	9b00      	ldr	r3, [sp, #0]
    39b4:	781b      	ldrb	r3, [r3, #0]
    39b6:	461a      	mov	r2, r3
    39b8:	9b01      	ldr	r3, [sp, #4]
    39ba:	60da      	str	r2, [r3, #12]
}
    39bc:	bf00      	nop
    39be:	b003      	add	sp, #12
    39c0:	f85d fb04 	ldr.w	pc, [sp], #4
    39c4:	4000c000 	.word	0x4000c000
    39c8:	4000c400 	.word	0x4000c400
    39cc:	4000c800 	.word	0x4000c800

000039d0 <USART_Reset>:
 *
 * @param[in] usart
 *   Pointer to USART/UART peripheral register block.
 ******************************************************************************/
void USART_Reset(USART_TypeDef *usart)
{
    39d0:	b082      	sub	sp, #8
    39d2:	9001      	str	r0, [sp, #4]
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart)
    39d4:	9b01      	ldr	r3, [sp, #4]
    39d6:	4a23      	ldr	r2, [pc, #140]	; (3a64 <USART_Reset+0x94>)
    39d8:	4293      	cmp	r3, r2
    39da:	d00e      	beq.n	39fa <USART_Reset+0x2a>
    39dc:	9b01      	ldr	r3, [sp, #4]
    39de:	4a22      	ldr	r2, [pc, #136]	; (3a68 <USART_Reset+0x98>)
    39e0:	4293      	cmp	r3, r2
    39e2:	d00a      	beq.n	39fa <USART_Reset+0x2a>
    39e4:	9b01      	ldr	r3, [sp, #4]
    39e6:	4a21      	ldr	r2, [pc, #132]	; (3a6c <USART_Reset+0x9c>)
    39e8:	4293      	cmp	r3, r2
    39ea:	d006      	beq.n	39fa <USART_Reset+0x2a>
    39ec:	9b01      	ldr	r3, [sp, #4]
    39ee:	4a20      	ldr	r2, [pc, #128]	; (3a70 <USART_Reset+0xa0>)
    39f0:	4293      	cmp	r3, r2
    39f2:	d002      	beq.n	39fa <USART_Reset+0x2a>
    39f4:	9b01      	ldr	r3, [sp, #4]
    39f6:	4a1f      	ldr	r2, [pc, #124]	; (3a74 <USART_Reset+0xa4>)
    39f8:	4293      	cmp	r3, r2
    39fa:	bf00      	nop
             || USARTRF_REF_VALID(usart)
             || UART_REF_VALID(usart) );

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	f640 62aa 	movw	r2, #3754	; 0xeaa
    3a02:	60da      	str	r2, [r3, #12]
               | USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX
               | USART_CMD_CLEARRX;
  usart->CTRL      = _USART_CTRL_RESETVALUE;
    3a04:	9b01      	ldr	r3, [sp, #4]
    3a06:	2200      	movs	r2, #0
    3a08:	601a      	str	r2, [r3, #0]
  usart->FRAME     = _USART_FRAME_RESETVALUE;
    3a0a:	9b01      	ldr	r3, [sp, #4]
    3a0c:	f241 0205 	movw	r2, #4101	; 0x1005
    3a10:	605a      	str	r2, [r3, #4]
  usart->TRIGCTRL  = _USART_TRIGCTRL_RESETVALUE;
    3a12:	9b01      	ldr	r3, [sp, #4]
    3a14:	2200      	movs	r2, #0
    3a16:	609a      	str	r2, [r3, #8]
  usart->CLKDIV    = _USART_CLKDIV_RESETVALUE;
    3a18:	9b01      	ldr	r3, [sp, #4]
    3a1a:	2200      	movs	r2, #0
    3a1c:	615a      	str	r2, [r3, #20]
  usart->IEN       = _USART_IEN_RESETVALUE;
    3a1e:	9b01      	ldr	r3, [sp, #4]
    3a20:	2200      	movs	r2, #0
    3a22:	64da      	str	r2, [r3, #76]	; 0x4c
  usart->IFC       = _USART_IFC_MASK;
    3a24:	9b01      	ldr	r3, [sp, #4]
    3a26:	f641 72f9 	movw	r2, #8185	; 0x1ff9
    3a2a:	649a      	str	r2, [r3, #72]	; 0x48
#if defined(_USART_ROUTEPEN_MASK) || defined(_UART_ROUTEPEN_MASK)
  usart->ROUTEPEN  = _USART_ROUTEPEN_RESETVALUE;
  usart->ROUTELOC0 = _USART_ROUTELOC0_RESETVALUE;
  usart->ROUTELOC1 = _USART_ROUTELOC1_RESETVALUE;
#else
  usart->ROUTE     = _USART_ROUTE_RESETVALUE;
    3a2c:	9b01      	ldr	r3, [sp, #4]
    3a2e:	2200      	movs	r2, #0
    3a30:	655a      	str	r2, [r3, #84]	; 0x54
#endif

  if (USART_IRDA_VALID(usart)) {
    3a32:	9b01      	ldr	r3, [sp, #4]
    3a34:	4a0b      	ldr	r2, [pc, #44]	; (3a64 <USART_Reset+0x94>)
    3a36:	4293      	cmp	r3, r2
    3a38:	d102      	bne.n	3a40 <USART_Reset+0x70>
    usart->IRCTRL = _USART_IRCTRL_RESETVALUE;
    3a3a:	9b01      	ldr	r3, [sp, #4]
    3a3c:	2200      	movs	r2, #0
    3a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if defined(_USART_INPUT_RESETVALUE)
  usart->INPUT = _USART_INPUT_RESETVALUE;
    3a40:	9b01      	ldr	r3, [sp, #4]
    3a42:	2200      	movs	r2, #0
    3a44:	659a      	str	r2, [r3, #88]	; 0x58
#endif

#if defined(_USART_I2SCTRL_RESETVALUE)
  if (USART_I2S_VALID(usart)) {
    3a46:	9b01      	ldr	r3, [sp, #4]
    3a48:	4a07      	ldr	r2, [pc, #28]	; (3a68 <USART_Reset+0x98>)
    3a4a:	4293      	cmp	r3, r2
    3a4c:	d003      	beq.n	3a56 <USART_Reset+0x86>
    3a4e:	9b01      	ldr	r3, [sp, #4]
    3a50:	4a06      	ldr	r2, [pc, #24]	; (3a6c <USART_Reset+0x9c>)
    3a52:	4293      	cmp	r3, r2
    3a54:	d102      	bne.n	3a5c <USART_Reset+0x8c>
    usart->I2SCTRL = _USART_I2SCTRL_RESETVALUE;
    3a56:	9b01      	ldr	r3, [sp, #4]
    3a58:	2200      	movs	r2, #0
    3a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  }
#endif
}
    3a5c:	bf00      	nop
    3a5e:	b002      	add	sp, #8
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	4000c000 	.word	0x4000c000
    3a68:	4000c400 	.word	0x4000c400
    3a6c:	4000c800 	.word	0x4000c800
    3a70:	4000e000 	.word	0x4000e000
    3a74:	4000e400 	.word	0x4000e400

00003a78 <USART_Rx>:
 *
 * @return
 *   Data received.
 ******************************************************************************/
uint8_t USART_Rx(USART_TypeDef *usart)
{
    3a78:	b082      	sub	sp, #8
    3a7a:	9001      	str	r0, [sp, #4]
  while (!(usart->STATUS & USART_STATUS_RXDATAV))
    3a7c:	bf00      	nop
    3a7e:	9b01      	ldr	r3, [sp, #4]
    3a80:	691b      	ldr	r3, [r3, #16]
    3a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3a86:	2b00      	cmp	r3, #0
    3a88:	d0f9      	beq.n	3a7e <USART_Rx+0x6>
    ;

  return (uint8_t)usart->RXDATA;
    3a8a:	9b01      	ldr	r3, [sp, #4]
    3a8c:	69db      	ldr	r3, [r3, #28]
    3a8e:	b2db      	uxtb	r3, r3
}
    3a90:	4618      	mov	r0, r3
    3a92:	b002      	add	sp, #8
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop

00003a98 <USART_Tx>:
 *
 * @param[in] data
 *   Data to transmit. See details above for further info.
 ******************************************************************************/
void USART_Tx(USART_TypeDef *usart, uint8_t data)
{
    3a98:	b082      	sub	sp, #8
    3a9a:	9001      	str	r0, [sp, #4]
    3a9c:	460b      	mov	r3, r1
    3a9e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check that transmit buffer is empty */
  while (!(usart->STATUS & USART_STATUS_TXBL))
    3aa2:	bf00      	nop
    3aa4:	9b01      	ldr	r3, [sp, #4]
    3aa6:	691b      	ldr	r3, [r3, #16]
    3aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3aac:	2b00      	cmp	r3, #0
    3aae:	d0f9      	beq.n	3aa4 <USART_Tx+0xc>
    ;
  usart->TXDATA = (uint32_t)data;
    3ab0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3ab4:	9b01      	ldr	r3, [sp, #4]
    3ab6:	635a      	str	r2, [r3, #52]	; 0x34
}
    3ab8:	bf00      	nop
    3aba:	b002      	add	sp, #8
    3abc:	4770      	bx	lr
    3abe:	bf00      	nop

00003ac0 <__aeabi_drsub>:
    3ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3ac4:	e002      	b.n	3acc <__adddf3>
    3ac6:	bf00      	nop

00003ac8 <__aeabi_dsub>:
    3ac8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003acc <__adddf3>:
    3acc:	b530      	push	{r4, r5, lr}
    3ace:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3ad2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3ad6:	ea94 0f05 	teq	r4, r5
    3ada:	bf08      	it	eq
    3adc:	ea90 0f02 	teqeq	r0, r2
    3ae0:	bf1f      	itttt	ne
    3ae2:	ea54 0c00 	orrsne.w	ip, r4, r0
    3ae6:	ea55 0c02 	orrsne.w	ip, r5, r2
    3aea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3aee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3af2:	f000 80e2 	beq.w	3cba <__adddf3+0x1ee>
    3af6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3afa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3afe:	bfb8      	it	lt
    3b00:	426d      	neglt	r5, r5
    3b02:	dd0c      	ble.n	3b1e <__adddf3+0x52>
    3b04:	442c      	add	r4, r5
    3b06:	ea80 0202 	eor.w	r2, r0, r2
    3b0a:	ea81 0303 	eor.w	r3, r1, r3
    3b0e:	ea82 0000 	eor.w	r0, r2, r0
    3b12:	ea83 0101 	eor.w	r1, r3, r1
    3b16:	ea80 0202 	eor.w	r2, r0, r2
    3b1a:	ea81 0303 	eor.w	r3, r1, r3
    3b1e:	2d36      	cmp	r5, #54	; 0x36
    3b20:	bf88      	it	hi
    3b22:	bd30      	pophi	{r4, r5, pc}
    3b24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3b28:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3b2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3b30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3b34:	d002      	beq.n	3b3c <__adddf3+0x70>
    3b36:	4240      	negs	r0, r0
    3b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3b3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3b40:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    3b48:	d002      	beq.n	3b50 <__adddf3+0x84>
    3b4a:	4252      	negs	r2, r2
    3b4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3b50:	ea94 0f05 	teq	r4, r5
    3b54:	f000 80a7 	beq.w	3ca6 <__adddf3+0x1da>
    3b58:	f1a4 0401 	sub.w	r4, r4, #1
    3b5c:	f1d5 0e20 	rsbs	lr, r5, #32
    3b60:	db0d      	blt.n	3b7e <__adddf3+0xb2>
    3b62:	fa02 fc0e 	lsl.w	ip, r2, lr
    3b66:	fa22 f205 	lsr.w	r2, r2, r5
    3b6a:	1880      	adds	r0, r0, r2
    3b6c:	f141 0100 	adc.w	r1, r1, #0
    3b70:	fa03 f20e 	lsl.w	r2, r3, lr
    3b74:	1880      	adds	r0, r0, r2
    3b76:	fa43 f305 	asr.w	r3, r3, r5
    3b7a:	4159      	adcs	r1, r3
    3b7c:	e00e      	b.n	3b9c <__adddf3+0xd0>
    3b7e:	f1a5 0520 	sub.w	r5, r5, #32
    3b82:	f10e 0e20 	add.w	lr, lr, #32
    3b86:	2a01      	cmp	r2, #1
    3b88:	fa03 fc0e 	lsl.w	ip, r3, lr
    3b8c:	bf28      	it	cs
    3b8e:	f04c 0c02 	orrcs.w	ip, ip, #2
    3b92:	fa43 f305 	asr.w	r3, r3, r5
    3b96:	18c0      	adds	r0, r0, r3
    3b98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3b9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3ba0:	d507      	bpl.n	3bb2 <__adddf3+0xe6>
    3ba2:	f04f 0e00 	mov.w	lr, #0
    3ba6:	f1dc 0c00 	rsbs	ip, ip, #0
    3baa:	eb7e 0000 	sbcs.w	r0, lr, r0
    3bae:	eb6e 0101 	sbc.w	r1, lr, r1
    3bb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3bb6:	d31b      	bcc.n	3bf0 <__adddf3+0x124>
    3bb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3bbc:	d30c      	bcc.n	3bd8 <__adddf3+0x10c>
    3bbe:	0849      	lsrs	r1, r1, #1
    3bc0:	ea5f 0030 	movs.w	r0, r0, rrx
    3bc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3bc8:	f104 0401 	add.w	r4, r4, #1
    3bcc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3bd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3bd4:	f080 809a 	bcs.w	3d0c <__adddf3+0x240>
    3bd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3bdc:	bf08      	it	eq
    3bde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3be2:	f150 0000 	adcs.w	r0, r0, #0
    3be6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3bea:	ea41 0105 	orr.w	r1, r1, r5
    3bee:	bd30      	pop	{r4, r5, pc}
    3bf0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3bf4:	4140      	adcs	r0, r0
    3bf6:	eb41 0101 	adc.w	r1, r1, r1
    3bfa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3bfe:	f1a4 0401 	sub.w	r4, r4, #1
    3c02:	d1e9      	bne.n	3bd8 <__adddf3+0x10c>
    3c04:	f091 0f00 	teq	r1, #0
    3c08:	bf04      	itt	eq
    3c0a:	4601      	moveq	r1, r0
    3c0c:	2000      	moveq	r0, #0
    3c0e:	fab1 f381 	clz	r3, r1
    3c12:	bf08      	it	eq
    3c14:	3320      	addeq	r3, #32
    3c16:	f1a3 030b 	sub.w	r3, r3, #11
    3c1a:	f1b3 0220 	subs.w	r2, r3, #32
    3c1e:	da0c      	bge.n	3c3a <__adddf3+0x16e>
    3c20:	320c      	adds	r2, #12
    3c22:	dd08      	ble.n	3c36 <__adddf3+0x16a>
    3c24:	f102 0c14 	add.w	ip, r2, #20
    3c28:	f1c2 020c 	rsb	r2, r2, #12
    3c2c:	fa01 f00c 	lsl.w	r0, r1, ip
    3c30:	fa21 f102 	lsr.w	r1, r1, r2
    3c34:	e00c      	b.n	3c50 <__adddf3+0x184>
    3c36:	f102 0214 	add.w	r2, r2, #20
    3c3a:	bfd8      	it	le
    3c3c:	f1c2 0c20 	rsble	ip, r2, #32
    3c40:	fa01 f102 	lsl.w	r1, r1, r2
    3c44:	fa20 fc0c 	lsr.w	ip, r0, ip
    3c48:	bfdc      	itt	le
    3c4a:	ea41 010c 	orrle.w	r1, r1, ip
    3c4e:	4090      	lslle	r0, r2
    3c50:	1ae4      	subs	r4, r4, r3
    3c52:	bfa2      	ittt	ge
    3c54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    3c58:	4329      	orrge	r1, r5
    3c5a:	bd30      	popge	{r4, r5, pc}
    3c5c:	ea6f 0404 	mvn.w	r4, r4
    3c60:	3c1f      	subs	r4, #31
    3c62:	da1c      	bge.n	3c9e <__adddf3+0x1d2>
    3c64:	340c      	adds	r4, #12
    3c66:	dc0e      	bgt.n	3c86 <__adddf3+0x1ba>
    3c68:	f104 0414 	add.w	r4, r4, #20
    3c6c:	f1c4 0220 	rsb	r2, r4, #32
    3c70:	fa20 f004 	lsr.w	r0, r0, r4
    3c74:	fa01 f302 	lsl.w	r3, r1, r2
    3c78:	ea40 0003 	orr.w	r0, r0, r3
    3c7c:	fa21 f304 	lsr.w	r3, r1, r4
    3c80:	ea45 0103 	orr.w	r1, r5, r3
    3c84:	bd30      	pop	{r4, r5, pc}
    3c86:	f1c4 040c 	rsb	r4, r4, #12
    3c8a:	f1c4 0220 	rsb	r2, r4, #32
    3c8e:	fa20 f002 	lsr.w	r0, r0, r2
    3c92:	fa01 f304 	lsl.w	r3, r1, r4
    3c96:	ea40 0003 	orr.w	r0, r0, r3
    3c9a:	4629      	mov	r1, r5
    3c9c:	bd30      	pop	{r4, r5, pc}
    3c9e:	fa21 f004 	lsr.w	r0, r1, r4
    3ca2:	4629      	mov	r1, r5
    3ca4:	bd30      	pop	{r4, r5, pc}
    3ca6:	f094 0f00 	teq	r4, #0
    3caa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3cae:	bf06      	itte	eq
    3cb0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3cb4:	3401      	addeq	r4, #1
    3cb6:	3d01      	subne	r5, #1
    3cb8:	e74e      	b.n	3b58 <__adddf3+0x8c>
    3cba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3cbe:	bf18      	it	ne
    3cc0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3cc4:	d029      	beq.n	3d1a <__adddf3+0x24e>
    3cc6:	ea94 0f05 	teq	r4, r5
    3cca:	bf08      	it	eq
    3ccc:	ea90 0f02 	teqeq	r0, r2
    3cd0:	d005      	beq.n	3cde <__adddf3+0x212>
    3cd2:	ea54 0c00 	orrs.w	ip, r4, r0
    3cd6:	bf04      	itt	eq
    3cd8:	4619      	moveq	r1, r3
    3cda:	4610      	moveq	r0, r2
    3cdc:	bd30      	pop	{r4, r5, pc}
    3cde:	ea91 0f03 	teq	r1, r3
    3ce2:	bf1e      	ittt	ne
    3ce4:	2100      	movne	r1, #0
    3ce6:	2000      	movne	r0, #0
    3ce8:	bd30      	popne	{r4, r5, pc}
    3cea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3cee:	d105      	bne.n	3cfc <__adddf3+0x230>
    3cf0:	0040      	lsls	r0, r0, #1
    3cf2:	4149      	adcs	r1, r1
    3cf4:	bf28      	it	cs
    3cf6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3cfa:	bd30      	pop	{r4, r5, pc}
    3cfc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3d00:	bf3c      	itt	cc
    3d02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3d06:	bd30      	popcc	{r4, r5, pc}
    3d08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3d0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3d10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3d14:	f04f 0000 	mov.w	r0, #0
    3d18:	bd30      	pop	{r4, r5, pc}
    3d1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3d1e:	bf1a      	itte	ne
    3d20:	4619      	movne	r1, r3
    3d22:	4610      	movne	r0, r2
    3d24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3d28:	bf1c      	itt	ne
    3d2a:	460b      	movne	r3, r1
    3d2c:	4602      	movne	r2, r0
    3d2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3d32:	bf06      	itte	eq
    3d34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3d38:	ea91 0f03 	teqeq	r1, r3
    3d3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3d40:	bd30      	pop	{r4, r5, pc}
    3d42:	bf00      	nop

00003d44 <__aeabi_ui2d>:
    3d44:	f090 0f00 	teq	r0, #0
    3d48:	bf04      	itt	eq
    3d4a:	2100      	moveq	r1, #0
    3d4c:	4770      	bxeq	lr
    3d4e:	b530      	push	{r4, r5, lr}
    3d50:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3d54:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3d58:	f04f 0500 	mov.w	r5, #0
    3d5c:	f04f 0100 	mov.w	r1, #0
    3d60:	e750      	b.n	3c04 <__adddf3+0x138>
    3d62:	bf00      	nop

00003d64 <__aeabi_i2d>:
    3d64:	f090 0f00 	teq	r0, #0
    3d68:	bf04      	itt	eq
    3d6a:	2100      	moveq	r1, #0
    3d6c:	4770      	bxeq	lr
    3d6e:	b530      	push	{r4, r5, lr}
    3d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3d78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3d7c:	bf48      	it	mi
    3d7e:	4240      	negmi	r0, r0
    3d80:	f04f 0100 	mov.w	r1, #0
    3d84:	e73e      	b.n	3c04 <__adddf3+0x138>
    3d86:	bf00      	nop

00003d88 <__aeabi_f2d>:
    3d88:	0042      	lsls	r2, r0, #1
    3d8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3d8e:	ea4f 0131 	mov.w	r1, r1, rrx
    3d92:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3d96:	bf1f      	itttt	ne
    3d98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3d9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3da0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3da4:	4770      	bxne	lr
    3da6:	f092 0f00 	teq	r2, #0
    3daa:	bf14      	ite	ne
    3dac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3db0:	4770      	bxeq	lr
    3db2:	b530      	push	{r4, r5, lr}
    3db4:	f44f 7460 	mov.w	r4, #896	; 0x380
    3db8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3dc0:	e720      	b.n	3c04 <__adddf3+0x138>
    3dc2:	bf00      	nop

00003dc4 <__aeabi_ul2d>:
    3dc4:	ea50 0201 	orrs.w	r2, r0, r1
    3dc8:	bf08      	it	eq
    3dca:	4770      	bxeq	lr
    3dcc:	b530      	push	{r4, r5, lr}
    3dce:	f04f 0500 	mov.w	r5, #0
    3dd2:	e00a      	b.n	3dea <__aeabi_l2d+0x16>

00003dd4 <__aeabi_l2d>:
    3dd4:	ea50 0201 	orrs.w	r2, r0, r1
    3dd8:	bf08      	it	eq
    3dda:	4770      	bxeq	lr
    3ddc:	b530      	push	{r4, r5, lr}
    3dde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3de2:	d502      	bpl.n	3dea <__aeabi_l2d+0x16>
    3de4:	4240      	negs	r0, r0
    3de6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3dea:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3dee:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3df2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3df6:	f43f aedc 	beq.w	3bb2 <__adddf3+0xe6>
    3dfa:	f04f 0203 	mov.w	r2, #3
    3dfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3e02:	bf18      	it	ne
    3e04:	3203      	addne	r2, #3
    3e06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3e0a:	bf18      	it	ne
    3e0c:	3203      	addne	r2, #3
    3e0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3e12:	f1c2 0320 	rsb	r3, r2, #32
    3e16:	fa00 fc03 	lsl.w	ip, r0, r3
    3e1a:	fa20 f002 	lsr.w	r0, r0, r2
    3e1e:	fa01 fe03 	lsl.w	lr, r1, r3
    3e22:	ea40 000e 	orr.w	r0, r0, lr
    3e26:	fa21 f102 	lsr.w	r1, r1, r2
    3e2a:	4414      	add	r4, r2
    3e2c:	e6c1      	b.n	3bb2 <__adddf3+0xe6>
    3e2e:	bf00      	nop

00003e30 <__aeabi_dmul>:
    3e30:	b570      	push	{r4, r5, r6, lr}
    3e32:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3e36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3e3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3e3e:	bf1d      	ittte	ne
    3e40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3e44:	ea94 0f0c 	teqne	r4, ip
    3e48:	ea95 0f0c 	teqne	r5, ip
    3e4c:	f000 f8de 	bleq	400c <__aeabi_dmul+0x1dc>
    3e50:	442c      	add	r4, r5
    3e52:	ea81 0603 	eor.w	r6, r1, r3
    3e56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    3e5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    3e5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    3e62:	bf18      	it	ne
    3e64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    3e68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3e70:	d038      	beq.n	3ee4 <__aeabi_dmul+0xb4>
    3e72:	fba0 ce02 	umull	ip, lr, r0, r2
    3e76:	f04f 0500 	mov.w	r5, #0
    3e7a:	fbe1 e502 	umlal	lr, r5, r1, r2
    3e7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3e82:	fbe0 e503 	umlal	lr, r5, r0, r3
    3e86:	f04f 0600 	mov.w	r6, #0
    3e8a:	fbe1 5603 	umlal	r5, r6, r1, r3
    3e8e:	f09c 0f00 	teq	ip, #0
    3e92:	bf18      	it	ne
    3e94:	f04e 0e01 	orrne.w	lr, lr, #1
    3e98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3e9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3ea0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3ea4:	d204      	bcs.n	3eb0 <__aeabi_dmul+0x80>
    3ea6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3eaa:	416d      	adcs	r5, r5
    3eac:	eb46 0606 	adc.w	r6, r6, r6
    3eb0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3eb4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3eb8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3ebc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3ec0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3ec4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3ec8:	bf88      	it	hi
    3eca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3ece:	d81e      	bhi.n	3f0e <__aeabi_dmul+0xde>
    3ed0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3ed4:	bf08      	it	eq
    3ed6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3eda:	f150 0000 	adcs.w	r0, r0, #0
    3ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3ee2:	bd70      	pop	{r4, r5, r6, pc}
    3ee4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3ee8:	ea46 0101 	orr.w	r1, r6, r1
    3eec:	ea40 0002 	orr.w	r0, r0, r2
    3ef0:	ea81 0103 	eor.w	r1, r1, r3
    3ef4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3ef8:	bfc2      	ittt	gt
    3efa:	ebd4 050c 	rsbsgt	r5, r4, ip
    3efe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3f02:	bd70      	popgt	{r4, r5, r6, pc}
    3f04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3f08:	f04f 0e00 	mov.w	lr, #0
    3f0c:	3c01      	subs	r4, #1
    3f0e:	f300 80ab 	bgt.w	4068 <__aeabi_dmul+0x238>
    3f12:	f114 0f36 	cmn.w	r4, #54	; 0x36
    3f16:	bfde      	ittt	le
    3f18:	2000      	movle	r0, #0
    3f1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    3f1e:	bd70      	pople	{r4, r5, r6, pc}
    3f20:	f1c4 0400 	rsb	r4, r4, #0
    3f24:	3c20      	subs	r4, #32
    3f26:	da35      	bge.n	3f94 <__aeabi_dmul+0x164>
    3f28:	340c      	adds	r4, #12
    3f2a:	dc1b      	bgt.n	3f64 <__aeabi_dmul+0x134>
    3f2c:	f104 0414 	add.w	r4, r4, #20
    3f30:	f1c4 0520 	rsb	r5, r4, #32
    3f34:	fa00 f305 	lsl.w	r3, r0, r5
    3f38:	fa20 f004 	lsr.w	r0, r0, r4
    3f3c:	fa01 f205 	lsl.w	r2, r1, r5
    3f40:	ea40 0002 	orr.w	r0, r0, r2
    3f44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    3f48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3f4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3f50:	fa21 f604 	lsr.w	r6, r1, r4
    3f54:	eb42 0106 	adc.w	r1, r2, r6
    3f58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3f5c:	bf08      	it	eq
    3f5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3f62:	bd70      	pop	{r4, r5, r6, pc}
    3f64:	f1c4 040c 	rsb	r4, r4, #12
    3f68:	f1c4 0520 	rsb	r5, r4, #32
    3f6c:	fa00 f304 	lsl.w	r3, r0, r4
    3f70:	fa20 f005 	lsr.w	r0, r0, r5
    3f74:	fa01 f204 	lsl.w	r2, r1, r4
    3f78:	ea40 0002 	orr.w	r0, r0, r2
    3f7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3f80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3f84:	f141 0100 	adc.w	r1, r1, #0
    3f88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3f8c:	bf08      	it	eq
    3f8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3f92:	bd70      	pop	{r4, r5, r6, pc}
    3f94:	f1c4 0520 	rsb	r5, r4, #32
    3f98:	fa00 f205 	lsl.w	r2, r0, r5
    3f9c:	ea4e 0e02 	orr.w	lr, lr, r2
    3fa0:	fa20 f304 	lsr.w	r3, r0, r4
    3fa4:	fa01 f205 	lsl.w	r2, r1, r5
    3fa8:	ea43 0302 	orr.w	r3, r3, r2
    3fac:	fa21 f004 	lsr.w	r0, r1, r4
    3fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3fb4:	fa21 f204 	lsr.w	r2, r1, r4
    3fb8:	ea20 0002 	bic.w	r0, r0, r2
    3fbc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    3fc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3fc4:	bf08      	it	eq
    3fc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3fca:	bd70      	pop	{r4, r5, r6, pc}
    3fcc:	f094 0f00 	teq	r4, #0
    3fd0:	d10f      	bne.n	3ff2 <__aeabi_dmul+0x1c2>
    3fd2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    3fd6:	0040      	lsls	r0, r0, #1
    3fd8:	eb41 0101 	adc.w	r1, r1, r1
    3fdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3fe0:	bf08      	it	eq
    3fe2:	3c01      	subeq	r4, #1
    3fe4:	d0f7      	beq.n	3fd6 <__aeabi_dmul+0x1a6>
    3fe6:	ea41 0106 	orr.w	r1, r1, r6
    3fea:	f095 0f00 	teq	r5, #0
    3fee:	bf18      	it	ne
    3ff0:	4770      	bxne	lr
    3ff2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    3ff6:	0052      	lsls	r2, r2, #1
    3ff8:	eb43 0303 	adc.w	r3, r3, r3
    3ffc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4000:	bf08      	it	eq
    4002:	3d01      	subeq	r5, #1
    4004:	d0f7      	beq.n	3ff6 <__aeabi_dmul+0x1c6>
    4006:	ea43 0306 	orr.w	r3, r3, r6
    400a:	4770      	bx	lr
    400c:	ea94 0f0c 	teq	r4, ip
    4010:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4014:	bf18      	it	ne
    4016:	ea95 0f0c 	teqne	r5, ip
    401a:	d00c      	beq.n	4036 <__aeabi_dmul+0x206>
    401c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4020:	bf18      	it	ne
    4022:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4026:	d1d1      	bne.n	3fcc <__aeabi_dmul+0x19c>
    4028:	ea81 0103 	eor.w	r1, r1, r3
    402c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4030:	f04f 0000 	mov.w	r0, #0
    4034:	bd70      	pop	{r4, r5, r6, pc}
    4036:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    403a:	bf06      	itte	eq
    403c:	4610      	moveq	r0, r2
    403e:	4619      	moveq	r1, r3
    4040:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4044:	d019      	beq.n	407a <__aeabi_dmul+0x24a>
    4046:	ea94 0f0c 	teq	r4, ip
    404a:	d102      	bne.n	4052 <__aeabi_dmul+0x222>
    404c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4050:	d113      	bne.n	407a <__aeabi_dmul+0x24a>
    4052:	ea95 0f0c 	teq	r5, ip
    4056:	d105      	bne.n	4064 <__aeabi_dmul+0x234>
    4058:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    405c:	bf1c      	itt	ne
    405e:	4610      	movne	r0, r2
    4060:	4619      	movne	r1, r3
    4062:	d10a      	bne.n	407a <__aeabi_dmul+0x24a>
    4064:	ea81 0103 	eor.w	r1, r1, r3
    4068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    406c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4070:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4074:	f04f 0000 	mov.w	r0, #0
    4078:	bd70      	pop	{r4, r5, r6, pc}
    407a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    407e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4082:	bd70      	pop	{r4, r5, r6, pc}

00004084 <__aeabi_ddiv>:
    4084:	b570      	push	{r4, r5, r6, lr}
    4086:	f04f 0cff 	mov.w	ip, #255	; 0xff
    408a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    408e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4092:	bf1d      	ittte	ne
    4094:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4098:	ea94 0f0c 	teqne	r4, ip
    409c:	ea95 0f0c 	teqne	r5, ip
    40a0:	f000 f8a7 	bleq	41f2 <__aeabi_ddiv+0x16e>
    40a4:	eba4 0405 	sub.w	r4, r4, r5
    40a8:	ea81 0e03 	eor.w	lr, r1, r3
    40ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    40b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    40b4:	f000 8088 	beq.w	41c8 <__aeabi_ddiv+0x144>
    40b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    40bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    40c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    40c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    40c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    40cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    40d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    40d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    40d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    40dc:	429d      	cmp	r5, r3
    40de:	bf08      	it	eq
    40e0:	4296      	cmpeq	r6, r2
    40e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    40e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    40ea:	d202      	bcs.n	40f2 <__aeabi_ddiv+0x6e>
    40ec:	085b      	lsrs	r3, r3, #1
    40ee:	ea4f 0232 	mov.w	r2, r2, rrx
    40f2:	1ab6      	subs	r6, r6, r2
    40f4:	eb65 0503 	sbc.w	r5, r5, r3
    40f8:	085b      	lsrs	r3, r3, #1
    40fa:	ea4f 0232 	mov.w	r2, r2, rrx
    40fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4102:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    4106:	ebb6 0e02 	subs.w	lr, r6, r2
    410a:	eb75 0e03 	sbcs.w	lr, r5, r3
    410e:	bf22      	ittt	cs
    4110:	1ab6      	subcs	r6, r6, r2
    4112:	4675      	movcs	r5, lr
    4114:	ea40 000c 	orrcs.w	r0, r0, ip
    4118:	085b      	lsrs	r3, r3, #1
    411a:	ea4f 0232 	mov.w	r2, r2, rrx
    411e:	ebb6 0e02 	subs.w	lr, r6, r2
    4122:	eb75 0e03 	sbcs.w	lr, r5, r3
    4126:	bf22      	ittt	cs
    4128:	1ab6      	subcs	r6, r6, r2
    412a:	4675      	movcs	r5, lr
    412c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4130:	085b      	lsrs	r3, r3, #1
    4132:	ea4f 0232 	mov.w	r2, r2, rrx
    4136:	ebb6 0e02 	subs.w	lr, r6, r2
    413a:	eb75 0e03 	sbcs.w	lr, r5, r3
    413e:	bf22      	ittt	cs
    4140:	1ab6      	subcs	r6, r6, r2
    4142:	4675      	movcs	r5, lr
    4144:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4148:	085b      	lsrs	r3, r3, #1
    414a:	ea4f 0232 	mov.w	r2, r2, rrx
    414e:	ebb6 0e02 	subs.w	lr, r6, r2
    4152:	eb75 0e03 	sbcs.w	lr, r5, r3
    4156:	bf22      	ittt	cs
    4158:	1ab6      	subcs	r6, r6, r2
    415a:	4675      	movcs	r5, lr
    415c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4160:	ea55 0e06 	orrs.w	lr, r5, r6
    4164:	d018      	beq.n	4198 <__aeabi_ddiv+0x114>
    4166:	ea4f 1505 	mov.w	r5, r5, lsl #4
    416a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    416e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4172:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4176:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    417a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    417e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4182:	d1c0      	bne.n	4106 <__aeabi_ddiv+0x82>
    4184:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4188:	d10b      	bne.n	41a2 <__aeabi_ddiv+0x11e>
    418a:	ea41 0100 	orr.w	r1, r1, r0
    418e:	f04f 0000 	mov.w	r0, #0
    4192:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    4196:	e7b6      	b.n	4106 <__aeabi_ddiv+0x82>
    4198:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    419c:	bf04      	itt	eq
    419e:	4301      	orreq	r1, r0
    41a0:	2000      	moveq	r0, #0
    41a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    41a6:	bf88      	it	hi
    41a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    41ac:	f63f aeaf 	bhi.w	3f0e <__aeabi_dmul+0xde>
    41b0:	ebb5 0c03 	subs.w	ip, r5, r3
    41b4:	bf04      	itt	eq
    41b6:	ebb6 0c02 	subseq.w	ip, r6, r2
    41ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    41be:	f150 0000 	adcs.w	r0, r0, #0
    41c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    41c6:	bd70      	pop	{r4, r5, r6, pc}
    41c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    41cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    41d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    41d4:	bfc2      	ittt	gt
    41d6:	ebd4 050c 	rsbsgt	r5, r4, ip
    41da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    41de:	bd70      	popgt	{r4, r5, r6, pc}
    41e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    41e4:	f04f 0e00 	mov.w	lr, #0
    41e8:	3c01      	subs	r4, #1
    41ea:	e690      	b.n	3f0e <__aeabi_dmul+0xde>
    41ec:	ea45 0e06 	orr.w	lr, r5, r6
    41f0:	e68d      	b.n	3f0e <__aeabi_dmul+0xde>
    41f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    41f6:	ea94 0f0c 	teq	r4, ip
    41fa:	bf08      	it	eq
    41fc:	ea95 0f0c 	teqeq	r5, ip
    4200:	f43f af3b 	beq.w	407a <__aeabi_dmul+0x24a>
    4204:	ea94 0f0c 	teq	r4, ip
    4208:	d10a      	bne.n	4220 <__aeabi_ddiv+0x19c>
    420a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    420e:	f47f af34 	bne.w	407a <__aeabi_dmul+0x24a>
    4212:	ea95 0f0c 	teq	r5, ip
    4216:	f47f af25 	bne.w	4064 <__aeabi_dmul+0x234>
    421a:	4610      	mov	r0, r2
    421c:	4619      	mov	r1, r3
    421e:	e72c      	b.n	407a <__aeabi_dmul+0x24a>
    4220:	ea95 0f0c 	teq	r5, ip
    4224:	d106      	bne.n	4234 <__aeabi_ddiv+0x1b0>
    4226:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    422a:	f43f aefd 	beq.w	4028 <__aeabi_dmul+0x1f8>
    422e:	4610      	mov	r0, r2
    4230:	4619      	mov	r1, r3
    4232:	e722      	b.n	407a <__aeabi_dmul+0x24a>
    4234:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4238:	bf18      	it	ne
    423a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    423e:	f47f aec5 	bne.w	3fcc <__aeabi_dmul+0x19c>
    4242:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4246:	f47f af0d 	bne.w	4064 <__aeabi_dmul+0x234>
    424a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    424e:	f47f aeeb 	bne.w	4028 <__aeabi_dmul+0x1f8>
    4252:	e712      	b.n	407a <__aeabi_dmul+0x24a>

00004254 <__aeabi_d2uiz>:
    4254:	004a      	lsls	r2, r1, #1
    4256:	d211      	bcs.n	427c <__aeabi_d2uiz+0x28>
    4258:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    425c:	d211      	bcs.n	4282 <__aeabi_d2uiz+0x2e>
    425e:	d50d      	bpl.n	427c <__aeabi_d2uiz+0x28>
    4260:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    4264:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    4268:	d40e      	bmi.n	4288 <__aeabi_d2uiz+0x34>
    426a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    426e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4272:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    4276:	fa23 f002 	lsr.w	r0, r3, r2
    427a:	4770      	bx	lr
    427c:	f04f 0000 	mov.w	r0, #0
    4280:	4770      	bx	lr
    4282:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    4286:	d102      	bne.n	428e <__aeabi_d2uiz+0x3a>
    4288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    428c:	4770      	bx	lr
    428e:	f04f 0000 	mov.w	r0, #0
    4292:	4770      	bx	lr

00004294 <__aeabi_d2f>:
    4294:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4298:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    429c:	bf24      	itt	cs
    429e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    42a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    42a6:	d90d      	bls.n	42c4 <__aeabi_d2f+0x30>
    42a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    42ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    42b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    42b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    42b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    42bc:	bf08      	it	eq
    42be:	f020 0001 	biceq.w	r0, r0, #1
    42c2:	4770      	bx	lr
    42c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    42c8:	d121      	bne.n	430e <__aeabi_d2f+0x7a>
    42ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    42ce:	bfbc      	itt	lt
    42d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    42d4:	4770      	bxlt	lr
    42d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    42da:	ea4f 5252 	mov.w	r2, r2, lsr #21
    42de:	f1c2 0218 	rsb	r2, r2, #24
    42e2:	f1c2 0c20 	rsb	ip, r2, #32
    42e6:	fa10 f30c 	lsls.w	r3, r0, ip
    42ea:	fa20 f002 	lsr.w	r0, r0, r2
    42ee:	bf18      	it	ne
    42f0:	f040 0001 	orrne.w	r0, r0, #1
    42f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    42f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    42fc:	fa03 fc0c 	lsl.w	ip, r3, ip
    4300:	ea40 000c 	orr.w	r0, r0, ip
    4304:	fa23 f302 	lsr.w	r3, r3, r2
    4308:	ea4f 0343 	mov.w	r3, r3, lsl #1
    430c:	e7cc      	b.n	42a8 <__aeabi_d2f+0x14>
    430e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4312:	d107      	bne.n	4324 <__aeabi_d2f+0x90>
    4314:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4318:	bf1e      	ittt	ne
    431a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    431e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4322:	4770      	bxne	lr
    4324:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4328:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    432c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4330:	4770      	bx	lr
    4332:	bf00      	nop

00004334 <__aeabi_frsub>:
    4334:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4338:	e002      	b.n	4340 <__addsf3>
    433a:	bf00      	nop

0000433c <__aeabi_fsub>:
    433c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004340 <__addsf3>:
    4340:	0042      	lsls	r2, r0, #1
    4342:	bf1f      	itttt	ne
    4344:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4348:	ea92 0f03 	teqne	r2, r3
    434c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4350:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4354:	d06a      	beq.n	442c <__addsf3+0xec>
    4356:	ea4f 6212 	mov.w	r2, r2, lsr #24
    435a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    435e:	bfc1      	itttt	gt
    4360:	18d2      	addgt	r2, r2, r3
    4362:	4041      	eorgt	r1, r0
    4364:	4048      	eorgt	r0, r1
    4366:	4041      	eorgt	r1, r0
    4368:	bfb8      	it	lt
    436a:	425b      	neglt	r3, r3
    436c:	2b19      	cmp	r3, #25
    436e:	bf88      	it	hi
    4370:	4770      	bxhi	lr
    4372:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    437a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    437e:	bf18      	it	ne
    4380:	4240      	negne	r0, r0
    4382:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4386:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    438a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    438e:	bf18      	it	ne
    4390:	4249      	negne	r1, r1
    4392:	ea92 0f03 	teq	r2, r3
    4396:	d03f      	beq.n	4418 <__addsf3+0xd8>
    4398:	f1a2 0201 	sub.w	r2, r2, #1
    439c:	fa41 fc03 	asr.w	ip, r1, r3
    43a0:	eb10 000c 	adds.w	r0, r0, ip
    43a4:	f1c3 0320 	rsb	r3, r3, #32
    43a8:	fa01 f103 	lsl.w	r1, r1, r3
    43ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    43b0:	d502      	bpl.n	43b8 <__addsf3+0x78>
    43b2:	4249      	negs	r1, r1
    43b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    43b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    43bc:	d313      	bcc.n	43e6 <__addsf3+0xa6>
    43be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    43c2:	d306      	bcc.n	43d2 <__addsf3+0x92>
    43c4:	0840      	lsrs	r0, r0, #1
    43c6:	ea4f 0131 	mov.w	r1, r1, rrx
    43ca:	f102 0201 	add.w	r2, r2, #1
    43ce:	2afe      	cmp	r2, #254	; 0xfe
    43d0:	d251      	bcs.n	4476 <__addsf3+0x136>
    43d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    43d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    43da:	bf08      	it	eq
    43dc:	f020 0001 	biceq.w	r0, r0, #1
    43e0:	ea40 0003 	orr.w	r0, r0, r3
    43e4:	4770      	bx	lr
    43e6:	0049      	lsls	r1, r1, #1
    43e8:	eb40 0000 	adc.w	r0, r0, r0
    43ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    43f0:	f1a2 0201 	sub.w	r2, r2, #1
    43f4:	d1ed      	bne.n	43d2 <__addsf3+0x92>
    43f6:	fab0 fc80 	clz	ip, r0
    43fa:	f1ac 0c08 	sub.w	ip, ip, #8
    43fe:	ebb2 020c 	subs.w	r2, r2, ip
    4402:	fa00 f00c 	lsl.w	r0, r0, ip
    4406:	bfaa      	itet	ge
    4408:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    440c:	4252      	neglt	r2, r2
    440e:	4318      	orrge	r0, r3
    4410:	bfbc      	itt	lt
    4412:	40d0      	lsrlt	r0, r2
    4414:	4318      	orrlt	r0, r3
    4416:	4770      	bx	lr
    4418:	f092 0f00 	teq	r2, #0
    441c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4420:	bf06      	itte	eq
    4422:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4426:	3201      	addeq	r2, #1
    4428:	3b01      	subne	r3, #1
    442a:	e7b5      	b.n	4398 <__addsf3+0x58>
    442c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4430:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4434:	bf18      	it	ne
    4436:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    443a:	d021      	beq.n	4480 <__addsf3+0x140>
    443c:	ea92 0f03 	teq	r2, r3
    4440:	d004      	beq.n	444c <__addsf3+0x10c>
    4442:	f092 0f00 	teq	r2, #0
    4446:	bf08      	it	eq
    4448:	4608      	moveq	r0, r1
    444a:	4770      	bx	lr
    444c:	ea90 0f01 	teq	r0, r1
    4450:	bf1c      	itt	ne
    4452:	2000      	movne	r0, #0
    4454:	4770      	bxne	lr
    4456:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    445a:	d104      	bne.n	4466 <__addsf3+0x126>
    445c:	0040      	lsls	r0, r0, #1
    445e:	bf28      	it	cs
    4460:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4464:	4770      	bx	lr
    4466:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    446a:	bf3c      	itt	cc
    446c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4470:	4770      	bxcc	lr
    4472:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4476:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    447a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    447e:	4770      	bx	lr
    4480:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4484:	bf16      	itet	ne
    4486:	4608      	movne	r0, r1
    4488:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    448c:	4601      	movne	r1, r0
    448e:	0242      	lsls	r2, r0, #9
    4490:	bf06      	itte	eq
    4492:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4496:	ea90 0f01 	teqeq	r0, r1
    449a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    449e:	4770      	bx	lr

000044a0 <__aeabi_ui2f>:
    44a0:	f04f 0300 	mov.w	r3, #0
    44a4:	e004      	b.n	44b0 <__aeabi_i2f+0x8>
    44a6:	bf00      	nop

000044a8 <__aeabi_i2f>:
    44a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    44ac:	bf48      	it	mi
    44ae:	4240      	negmi	r0, r0
    44b0:	ea5f 0c00 	movs.w	ip, r0
    44b4:	bf08      	it	eq
    44b6:	4770      	bxeq	lr
    44b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    44bc:	4601      	mov	r1, r0
    44be:	f04f 0000 	mov.w	r0, #0
    44c2:	e01c      	b.n	44fe <__aeabi_l2f+0x2a>

000044c4 <__aeabi_ul2f>:
    44c4:	ea50 0201 	orrs.w	r2, r0, r1
    44c8:	bf08      	it	eq
    44ca:	4770      	bxeq	lr
    44cc:	f04f 0300 	mov.w	r3, #0
    44d0:	e00a      	b.n	44e8 <__aeabi_l2f+0x14>
    44d2:	bf00      	nop

000044d4 <__aeabi_l2f>:
    44d4:	ea50 0201 	orrs.w	r2, r0, r1
    44d8:	bf08      	it	eq
    44da:	4770      	bxeq	lr
    44dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    44e0:	d502      	bpl.n	44e8 <__aeabi_l2f+0x14>
    44e2:	4240      	negs	r0, r0
    44e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    44e8:	ea5f 0c01 	movs.w	ip, r1
    44ec:	bf02      	ittt	eq
    44ee:	4684      	moveq	ip, r0
    44f0:	4601      	moveq	r1, r0
    44f2:	2000      	moveq	r0, #0
    44f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    44f8:	bf08      	it	eq
    44fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    44fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4502:	fabc f28c 	clz	r2, ip
    4506:	3a08      	subs	r2, #8
    4508:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    450c:	db10      	blt.n	4530 <__aeabi_l2f+0x5c>
    450e:	fa01 fc02 	lsl.w	ip, r1, r2
    4512:	4463      	add	r3, ip
    4514:	fa00 fc02 	lsl.w	ip, r0, r2
    4518:	f1c2 0220 	rsb	r2, r2, #32
    451c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4520:	fa20 f202 	lsr.w	r2, r0, r2
    4524:	eb43 0002 	adc.w	r0, r3, r2
    4528:	bf08      	it	eq
    452a:	f020 0001 	biceq.w	r0, r0, #1
    452e:	4770      	bx	lr
    4530:	f102 0220 	add.w	r2, r2, #32
    4534:	fa01 fc02 	lsl.w	ip, r1, r2
    4538:	f1c2 0220 	rsb	r2, r2, #32
    453c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4540:	fa21 f202 	lsr.w	r2, r1, r2
    4544:	eb43 0002 	adc.w	r0, r3, r2
    4548:	bf08      	it	eq
    454a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    454e:	4770      	bx	lr

00004550 <__gesf2>:
    4550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4554:	e006      	b.n	4564 <__cmpsf2+0x4>
    4556:	bf00      	nop

00004558 <__lesf2>:
    4558:	f04f 0c01 	mov.w	ip, #1
    455c:	e002      	b.n	4564 <__cmpsf2+0x4>
    455e:	bf00      	nop

00004560 <__cmpsf2>:
    4560:	f04f 0c01 	mov.w	ip, #1
    4564:	f84d cd04 	str.w	ip, [sp, #-4]!
    4568:	ea4f 0240 	mov.w	r2, r0, lsl #1
    456c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4570:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4574:	bf18      	it	ne
    4576:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    457a:	d011      	beq.n	45a0 <__cmpsf2+0x40>
    457c:	b001      	add	sp, #4
    457e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    4582:	bf18      	it	ne
    4584:	ea90 0f01 	teqne	r0, r1
    4588:	bf58      	it	pl
    458a:	ebb2 0003 	subspl.w	r0, r2, r3
    458e:	bf88      	it	hi
    4590:	17c8      	asrhi	r0, r1, #31
    4592:	bf38      	it	cc
    4594:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    4598:	bf18      	it	ne
    459a:	f040 0001 	orrne.w	r0, r0, #1
    459e:	4770      	bx	lr
    45a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    45a4:	d102      	bne.n	45ac <__cmpsf2+0x4c>
    45a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    45aa:	d105      	bne.n	45b8 <__cmpsf2+0x58>
    45ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    45b0:	d1e4      	bne.n	457c <__cmpsf2+0x1c>
    45b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    45b6:	d0e1      	beq.n	457c <__cmpsf2+0x1c>
    45b8:	f85d 0b04 	ldr.w	r0, [sp], #4
    45bc:	4770      	bx	lr
    45be:	bf00      	nop

000045c0 <__aeabi_cfrcmple>:
    45c0:	4684      	mov	ip, r0
    45c2:	4608      	mov	r0, r1
    45c4:	4661      	mov	r1, ip
    45c6:	e7ff      	b.n	45c8 <__aeabi_cfcmpeq>

000045c8 <__aeabi_cfcmpeq>:
    45c8:	b50f      	push	{r0, r1, r2, r3, lr}
    45ca:	f7ff ffc9 	bl	4560 <__cmpsf2>
    45ce:	2800      	cmp	r0, #0
    45d0:	bf48      	it	mi
    45d2:	f110 0f00 	cmnmi.w	r0, #0
    45d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000045d8 <__aeabi_fcmpeq>:
    45d8:	f84d ed08 	str.w	lr, [sp, #-8]!
    45dc:	f7ff fff4 	bl	45c8 <__aeabi_cfcmpeq>
    45e0:	bf0c      	ite	eq
    45e2:	2001      	moveq	r0, #1
    45e4:	2000      	movne	r0, #0
    45e6:	f85d fb08 	ldr.w	pc, [sp], #8
    45ea:	bf00      	nop

000045ec <__aeabi_fcmplt>:
    45ec:	f84d ed08 	str.w	lr, [sp, #-8]!
    45f0:	f7ff ffea 	bl	45c8 <__aeabi_cfcmpeq>
    45f4:	bf34      	ite	cc
    45f6:	2001      	movcc	r0, #1
    45f8:	2000      	movcs	r0, #0
    45fa:	f85d fb08 	ldr.w	pc, [sp], #8
    45fe:	bf00      	nop

00004600 <__aeabi_fcmple>:
    4600:	f84d ed08 	str.w	lr, [sp, #-8]!
    4604:	f7ff ffe0 	bl	45c8 <__aeabi_cfcmpeq>
    4608:	bf94      	ite	ls
    460a:	2001      	movls	r0, #1
    460c:	2000      	movhi	r0, #0
    460e:	f85d fb08 	ldr.w	pc, [sp], #8
    4612:	bf00      	nop

00004614 <__aeabi_fcmpge>:
    4614:	f84d ed08 	str.w	lr, [sp, #-8]!
    4618:	f7ff ffd2 	bl	45c0 <__aeabi_cfrcmple>
    461c:	bf94      	ite	ls
    461e:	2001      	movls	r0, #1
    4620:	2000      	movhi	r0, #0
    4622:	f85d fb08 	ldr.w	pc, [sp], #8
    4626:	bf00      	nop

00004628 <__aeabi_fcmpgt>:
    4628:	f84d ed08 	str.w	lr, [sp, #-8]!
    462c:	f7ff ffc8 	bl	45c0 <__aeabi_cfrcmple>
    4630:	bf34      	ite	cc
    4632:	2001      	movcc	r0, #1
    4634:	2000      	movcs	r0, #0
    4636:	f85d fb08 	ldr.w	pc, [sp], #8
    463a:	bf00      	nop

0000463c <__aeabi_f2iz>:
    463c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    4640:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    4644:	d30f      	bcc.n	4666 <__aeabi_f2iz+0x2a>
    4646:	f04f 039e 	mov.w	r3, #158	; 0x9e
    464a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    464e:	d90d      	bls.n	466c <__aeabi_f2iz+0x30>
    4650:	ea4f 2300 	mov.w	r3, r0, lsl #8
    4654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4658:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    465c:	fa23 f002 	lsr.w	r0, r3, r2
    4660:	bf18      	it	ne
    4662:	4240      	negne	r0, r0
    4664:	4770      	bx	lr
    4666:	f04f 0000 	mov.w	r0, #0
    466a:	4770      	bx	lr
    466c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    4670:	d101      	bne.n	4676 <__aeabi_f2iz+0x3a>
    4672:	0242      	lsls	r2, r0, #9
    4674:	d105      	bne.n	4682 <__aeabi_f2iz+0x46>
    4676:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    467a:	bf08      	it	eq
    467c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    4680:	4770      	bx	lr
    4682:	f04f 0000 	mov.w	r0, #0
    4686:	4770      	bx	lr

00004688 <exit>:
    4688:	b508      	push	{r3, lr}
    468a:	4b07      	ldr	r3, [pc, #28]	; (46a8 <exit+0x20>)
    468c:	4604      	mov	r4, r0
    468e:	b113      	cbz	r3, 4696 <exit+0xe>
    4690:	2100      	movs	r1, #0
    4692:	f3af 8000 	nop.w
    4696:	4b05      	ldr	r3, [pc, #20]	; (46ac <exit+0x24>)
    4698:	6818      	ldr	r0, [r3, #0]
    469a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    469c:	b103      	cbz	r3, 46a0 <exit+0x18>
    469e:	4798      	blx	r3
    46a0:	4620      	mov	r0, r4
    46a2:	f000 fc8d 	bl	4fc0 <_exit>
    46a6:	bf00      	nop
    46a8:	00000000 	.word	0x00000000
    46ac:	00005038 	.word	0x00005038

000046b0 <__libc_init_array>:
    46b0:	4b0e      	ldr	r3, [pc, #56]	; (46ec <__libc_init_array+0x3c>)
    46b2:	b570      	push	{r4, r5, r6, lr}
    46b4:	461e      	mov	r6, r3
    46b6:	4c0e      	ldr	r4, [pc, #56]	; (46f0 <__libc_init_array+0x40>)
    46b8:	2500      	movs	r5, #0
    46ba:	1ae4      	subs	r4, r4, r3
    46bc:	10a4      	asrs	r4, r4, #2
    46be:	42a5      	cmp	r5, r4
    46c0:	d004      	beq.n	46cc <__libc_init_array+0x1c>
    46c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    46c6:	4798      	blx	r3
    46c8:	3501      	adds	r5, #1
    46ca:	e7f8      	b.n	46be <__libc_init_array+0xe>
    46cc:	f000 fc7a 	bl	4fc4 <_init>
    46d0:	4b08      	ldr	r3, [pc, #32]	; (46f4 <__libc_init_array+0x44>)
    46d2:	4c09      	ldr	r4, [pc, #36]	; (46f8 <__libc_init_array+0x48>)
    46d4:	461e      	mov	r6, r3
    46d6:	1ae4      	subs	r4, r4, r3
    46d8:	10a4      	asrs	r4, r4, #2
    46da:	2500      	movs	r5, #0
    46dc:	42a5      	cmp	r5, r4
    46de:	d004      	beq.n	46ea <__libc_init_array+0x3a>
    46e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    46e4:	4798      	blx	r3
    46e6:	3501      	adds	r5, #1
    46e8:	e7f8      	b.n	46dc <__libc_init_array+0x2c>
    46ea:	bd70      	pop	{r4, r5, r6, pc}
    46ec:	20000648 	.word	0x20000648
    46f0:	20000648 	.word	0x20000648
    46f4:	20000648 	.word	0x20000648
    46f8:	2000064c 	.word	0x2000064c

000046fc <free>:
    46fc:	4b02      	ldr	r3, [pc, #8]	; (4708 <free+0xc>)
    46fe:	4601      	mov	r1, r0
    4700:	6818      	ldr	r0, [r3, #0]
    4702:	f000 b80b 	b.w	471c <_free_r>
    4706:	bf00      	nop
    4708:	20000644 	.word	0x20000644

0000470c <memset>:
    470c:	4603      	mov	r3, r0
    470e:	4402      	add	r2, r0
    4710:	4293      	cmp	r3, r2
    4712:	d002      	beq.n	471a <memset+0xe>
    4714:	f803 1b01 	strb.w	r1, [r3], #1
    4718:	e7fa      	b.n	4710 <memset+0x4>
    471a:	4770      	bx	lr

0000471c <_free_r>:
    471c:	b538      	push	{r3, r4, r5, lr}
    471e:	4605      	mov	r5, r0
    4720:	2900      	cmp	r1, #0
    4722:	d044      	beq.n	47ae <_free_r+0x92>
    4724:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4728:	1f0c      	subs	r4, r1, #4
    472a:	2b00      	cmp	r3, #0
    472c:	bfb8      	it	lt
    472e:	18e4      	addlt	r4, r4, r3
    4730:	f000 f8e8 	bl	4904 <__malloc_lock>
    4734:	4a1e      	ldr	r2, [pc, #120]	; (47b0 <_free_r+0x94>)
    4736:	6813      	ldr	r3, [r2, #0]
    4738:	4611      	mov	r1, r2
    473a:	b913      	cbnz	r3, 4742 <_free_r+0x26>
    473c:	6063      	str	r3, [r4, #4]
    473e:	6014      	str	r4, [r2, #0]
    4740:	e030      	b.n	47a4 <_free_r+0x88>
    4742:	42a3      	cmp	r3, r4
    4744:	d90d      	bls.n	4762 <_free_r+0x46>
    4746:	6822      	ldr	r2, [r4, #0]
    4748:	18a0      	adds	r0, r4, r2
    474a:	4283      	cmp	r3, r0
    474c:	bf01      	itttt	eq
    474e:	6818      	ldreq	r0, [r3, #0]
    4750:	685b      	ldreq	r3, [r3, #4]
    4752:	1812      	addeq	r2, r2, r0
    4754:	6022      	streq	r2, [r4, #0]
    4756:	6063      	str	r3, [r4, #4]
    4758:	600c      	str	r4, [r1, #0]
    475a:	e023      	b.n	47a4 <_free_r+0x88>
    475c:	42a2      	cmp	r2, r4
    475e:	d803      	bhi.n	4768 <_free_r+0x4c>
    4760:	4613      	mov	r3, r2
    4762:	685a      	ldr	r2, [r3, #4]
    4764:	2a00      	cmp	r2, #0
    4766:	d1f9      	bne.n	475c <_free_r+0x40>
    4768:	6818      	ldr	r0, [r3, #0]
    476a:	1819      	adds	r1, r3, r0
    476c:	42a1      	cmp	r1, r4
    476e:	d10b      	bne.n	4788 <_free_r+0x6c>
    4770:	6821      	ldr	r1, [r4, #0]
    4772:	4401      	add	r1, r0
    4774:	1858      	adds	r0, r3, r1
    4776:	4282      	cmp	r2, r0
    4778:	6019      	str	r1, [r3, #0]
    477a:	d113      	bne.n	47a4 <_free_r+0x88>
    477c:	6810      	ldr	r0, [r2, #0]
    477e:	6852      	ldr	r2, [r2, #4]
    4780:	4401      	add	r1, r0
    4782:	6019      	str	r1, [r3, #0]
    4784:	605a      	str	r2, [r3, #4]
    4786:	e00d      	b.n	47a4 <_free_r+0x88>
    4788:	d902      	bls.n	4790 <_free_r+0x74>
    478a:	230c      	movs	r3, #12
    478c:	602b      	str	r3, [r5, #0]
    478e:	e009      	b.n	47a4 <_free_r+0x88>
    4790:	6821      	ldr	r1, [r4, #0]
    4792:	1860      	adds	r0, r4, r1
    4794:	4282      	cmp	r2, r0
    4796:	bf01      	itttt	eq
    4798:	6810      	ldreq	r0, [r2, #0]
    479a:	6852      	ldreq	r2, [r2, #4]
    479c:	1809      	addeq	r1, r1, r0
    479e:	6021      	streq	r1, [r4, #0]
    47a0:	6062      	str	r2, [r4, #4]
    47a2:	605c      	str	r4, [r3, #4]
    47a4:	4628      	mov	r0, r5
    47a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    47aa:	f000 b8ac 	b.w	4906 <__malloc_unlock>
    47ae:	bd38      	pop	{r3, r4, r5, pc}
    47b0:	20000798 	.word	0x20000798

000047b4 <_malloc_r>:
    47b4:	b570      	push	{r4, r5, r6, lr}
    47b6:	1ccd      	adds	r5, r1, #3
    47b8:	f025 0503 	bic.w	r5, r5, #3
    47bc:	3508      	adds	r5, #8
    47be:	2d0c      	cmp	r5, #12
    47c0:	bf38      	it	cc
    47c2:	250c      	movcc	r5, #12
    47c4:	2d00      	cmp	r5, #0
    47c6:	4606      	mov	r6, r0
    47c8:	db01      	blt.n	47ce <_malloc_r+0x1a>
    47ca:	42a9      	cmp	r1, r5
    47cc:	d902      	bls.n	47d4 <_malloc_r+0x20>
    47ce:	230c      	movs	r3, #12
    47d0:	6033      	str	r3, [r6, #0]
    47d2:	e046      	b.n	4862 <_malloc_r+0xae>
    47d4:	f000 f896 	bl	4904 <__malloc_lock>
    47d8:	4b23      	ldr	r3, [pc, #140]	; (4868 <_malloc_r+0xb4>)
    47da:	681c      	ldr	r4, [r3, #0]
    47dc:	461a      	mov	r2, r3
    47de:	4621      	mov	r1, r4
    47e0:	b1a1      	cbz	r1, 480c <_malloc_r+0x58>
    47e2:	680b      	ldr	r3, [r1, #0]
    47e4:	1b5b      	subs	r3, r3, r5
    47e6:	d40e      	bmi.n	4806 <_malloc_r+0x52>
    47e8:	2b0b      	cmp	r3, #11
    47ea:	d903      	bls.n	47f4 <_malloc_r+0x40>
    47ec:	600b      	str	r3, [r1, #0]
    47ee:	18cc      	adds	r4, r1, r3
    47f0:	50cd      	str	r5, [r1, r3]
    47f2:	e01e      	b.n	4832 <_malloc_r+0x7e>
    47f4:	428c      	cmp	r4, r1
    47f6:	bf0b      	itete	eq
    47f8:	6863      	ldreq	r3, [r4, #4]
    47fa:	684b      	ldrne	r3, [r1, #4]
    47fc:	6013      	streq	r3, [r2, #0]
    47fe:	6063      	strne	r3, [r4, #4]
    4800:	bf18      	it	ne
    4802:	460c      	movne	r4, r1
    4804:	e015      	b.n	4832 <_malloc_r+0x7e>
    4806:	460c      	mov	r4, r1
    4808:	6849      	ldr	r1, [r1, #4]
    480a:	e7e9      	b.n	47e0 <_malloc_r+0x2c>
    480c:	4c17      	ldr	r4, [pc, #92]	; (486c <_malloc_r+0xb8>)
    480e:	6823      	ldr	r3, [r4, #0]
    4810:	b91b      	cbnz	r3, 481a <_malloc_r+0x66>
    4812:	4630      	mov	r0, r6
    4814:	f000 f82c 	bl	4870 <_sbrk_r>
    4818:	6020      	str	r0, [r4, #0]
    481a:	4629      	mov	r1, r5
    481c:	4630      	mov	r0, r6
    481e:	f000 f827 	bl	4870 <_sbrk_r>
    4822:	1c43      	adds	r3, r0, #1
    4824:	d018      	beq.n	4858 <_malloc_r+0xa4>
    4826:	1cc4      	adds	r4, r0, #3
    4828:	f024 0403 	bic.w	r4, r4, #3
    482c:	42a0      	cmp	r0, r4
    482e:	d10d      	bne.n	484c <_malloc_r+0x98>
    4830:	6025      	str	r5, [r4, #0]
    4832:	4630      	mov	r0, r6
    4834:	f000 f867 	bl	4906 <__malloc_unlock>
    4838:	f104 000b 	add.w	r0, r4, #11
    483c:	1d23      	adds	r3, r4, #4
    483e:	f020 0007 	bic.w	r0, r0, #7
    4842:	1ac3      	subs	r3, r0, r3
    4844:	d00e      	beq.n	4864 <_malloc_r+0xb0>
    4846:	425a      	negs	r2, r3
    4848:	50e2      	str	r2, [r4, r3]
    484a:	bd70      	pop	{r4, r5, r6, pc}
    484c:	1a21      	subs	r1, r4, r0
    484e:	4630      	mov	r0, r6
    4850:	f000 f80e 	bl	4870 <_sbrk_r>
    4854:	3001      	adds	r0, #1
    4856:	d1eb      	bne.n	4830 <_malloc_r+0x7c>
    4858:	230c      	movs	r3, #12
    485a:	6033      	str	r3, [r6, #0]
    485c:	4630      	mov	r0, r6
    485e:	f000 f852 	bl	4906 <__malloc_unlock>
    4862:	2000      	movs	r0, #0
    4864:	bd70      	pop	{r4, r5, r6, pc}
    4866:	bf00      	nop
    4868:	20000798 	.word	0x20000798
    486c:	20000794 	.word	0x20000794

00004870 <_sbrk_r>:
    4870:	b538      	push	{r3, r4, r5, lr}
    4872:	4c06      	ldr	r4, [pc, #24]	; (488c <_sbrk_r+0x1c>)
    4874:	2300      	movs	r3, #0
    4876:	4605      	mov	r5, r0
    4878:	4608      	mov	r0, r1
    487a:	6023      	str	r3, [r4, #0]
    487c:	f000 fb92 	bl	4fa4 <_sbrk>
    4880:	1c43      	adds	r3, r0, #1
    4882:	d102      	bne.n	488a <_sbrk_r+0x1a>
    4884:	6823      	ldr	r3, [r4, #0]
    4886:	b103      	cbz	r3, 488a <_sbrk_r+0x1a>
    4888:	602b      	str	r3, [r5, #0]
    488a:	bd38      	pop	{r3, r4, r5, pc}
    488c:	200013d8 	.word	0x200013d8

00004890 <_vsniprintf_r>:
    4890:	b530      	push	{r4, r5, lr}
    4892:	1e14      	subs	r4, r2, #0
    4894:	4605      	mov	r5, r0
    4896:	b09b      	sub	sp, #108	; 0x6c
    4898:	4618      	mov	r0, r3
    489a:	da04      	bge.n	48a6 <_vsniprintf_r+0x16>
    489c:	238b      	movs	r3, #139	; 0x8b
    489e:	602b      	str	r3, [r5, #0]
    48a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    48a4:	e01d      	b.n	48e2 <_vsniprintf_r+0x52>
    48a6:	f44f 7302 	mov.w	r3, #520	; 0x208
    48aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    48ae:	bf0c      	ite	eq
    48b0:	4623      	moveq	r3, r4
    48b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    48b6:	9302      	str	r3, [sp, #8]
    48b8:	9305      	str	r3, [sp, #20]
    48ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    48be:	9100      	str	r1, [sp, #0]
    48c0:	9104      	str	r1, [sp, #16]
    48c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    48c6:	4602      	mov	r2, r0
    48c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    48ca:	4669      	mov	r1, sp
    48cc:	4628      	mov	r0, r5
    48ce:	f000 f875 	bl	49bc <_svfiprintf_r>
    48d2:	1c43      	adds	r3, r0, #1
    48d4:	bfbc      	itt	lt
    48d6:	238b      	movlt	r3, #139	; 0x8b
    48d8:	602b      	strlt	r3, [r5, #0]
    48da:	b114      	cbz	r4, 48e2 <_vsniprintf_r+0x52>
    48dc:	9b00      	ldr	r3, [sp, #0]
    48de:	2200      	movs	r2, #0
    48e0:	701a      	strb	r2, [r3, #0]
    48e2:	b01b      	add	sp, #108	; 0x6c
    48e4:	bd30      	pop	{r4, r5, pc}
	...

000048e8 <vsniprintf>:
    48e8:	b507      	push	{r0, r1, r2, lr}
    48ea:	9300      	str	r3, [sp, #0]
    48ec:	4613      	mov	r3, r2
    48ee:	460a      	mov	r2, r1
    48f0:	4601      	mov	r1, r0
    48f2:	4803      	ldr	r0, [pc, #12]	; (4900 <vsniprintf+0x18>)
    48f4:	6800      	ldr	r0, [r0, #0]
    48f6:	f7ff ffcb 	bl	4890 <_vsniprintf_r>
    48fa:	b003      	add	sp, #12
    48fc:	f85d fb04 	ldr.w	pc, [sp], #4
    4900:	20000644 	.word	0x20000644

00004904 <__malloc_lock>:
    4904:	4770      	bx	lr

00004906 <__malloc_unlock>:
    4906:	4770      	bx	lr

00004908 <__ssputs_r>:
    4908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    490c:	688e      	ldr	r6, [r1, #8]
    490e:	4682      	mov	sl, r0
    4910:	429e      	cmp	r6, r3
    4912:	460c      	mov	r4, r1
    4914:	4691      	mov	r9, r2
    4916:	4698      	mov	r8, r3
    4918:	d83e      	bhi.n	4998 <__ssputs_r+0x90>
    491a:	898a      	ldrh	r2, [r1, #12]
    491c:	f412 6f90 	tst.w	r2, #1152	; 0x480
    4920:	d03a      	beq.n	4998 <__ssputs_r+0x90>
    4922:	6825      	ldr	r5, [r4, #0]
    4924:	6909      	ldr	r1, [r1, #16]
    4926:	2302      	movs	r3, #2
    4928:	1a6f      	subs	r7, r5, r1
    492a:	6965      	ldr	r5, [r4, #20]
    492c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4930:	fb95 f5f3 	sdiv	r5, r5, r3
    4934:	1c7b      	adds	r3, r7, #1
    4936:	4443      	add	r3, r8
    4938:	429d      	cmp	r5, r3
    493a:	bf38      	it	cc
    493c:	461d      	movcc	r5, r3
    493e:	0553      	lsls	r3, r2, #21
    4940:	d50f      	bpl.n	4962 <__ssputs_r+0x5a>
    4942:	4629      	mov	r1, r5
    4944:	f7ff ff36 	bl	47b4 <_malloc_r>
    4948:	4606      	mov	r6, r0
    494a:	b198      	cbz	r0, 4974 <__ssputs_r+0x6c>
    494c:	463a      	mov	r2, r7
    494e:	6921      	ldr	r1, [r4, #16]
    4950:	f000 fad2 	bl	4ef8 <memcpy>
    4954:	89a3      	ldrh	r3, [r4, #12]
    4956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    495e:	81a3      	strh	r3, [r4, #12]
    4960:	e013      	b.n	498a <__ssputs_r+0x82>
    4962:	462a      	mov	r2, r5
    4964:	f000 faee 	bl	4f44 <_realloc_r>
    4968:	4606      	mov	r6, r0
    496a:	b970      	cbnz	r0, 498a <__ssputs_r+0x82>
    496c:	6921      	ldr	r1, [r4, #16]
    496e:	4650      	mov	r0, sl
    4970:	f7ff fed4 	bl	471c <_free_r>
    4974:	230c      	movs	r3, #12
    4976:	f8ca 3000 	str.w	r3, [sl]
    497a:	89a3      	ldrh	r3, [r4, #12]
    497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4984:	81a3      	strh	r3, [r4, #12]
    4986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    498a:	6126      	str	r6, [r4, #16]
    498c:	443e      	add	r6, r7
    498e:	6026      	str	r6, [r4, #0]
    4990:	4646      	mov	r6, r8
    4992:	6165      	str	r5, [r4, #20]
    4994:	1bed      	subs	r5, r5, r7
    4996:	60a5      	str	r5, [r4, #8]
    4998:	4546      	cmp	r6, r8
    499a:	bf28      	it	cs
    499c:	4646      	movcs	r6, r8
    499e:	4649      	mov	r1, r9
    49a0:	4632      	mov	r2, r6
    49a2:	6820      	ldr	r0, [r4, #0]
    49a4:	f000 fab3 	bl	4f0e <memmove>
    49a8:	68a3      	ldr	r3, [r4, #8]
    49aa:	2000      	movs	r0, #0
    49ac:	1b9b      	subs	r3, r3, r6
    49ae:	60a3      	str	r3, [r4, #8]
    49b0:	6823      	ldr	r3, [r4, #0]
    49b2:	441e      	add	r6, r3
    49b4:	6026      	str	r6, [r4, #0]
    49b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000049bc <_svfiprintf_r>:
    49bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49c0:	b09d      	sub	sp, #116	; 0x74
    49c2:	9303      	str	r3, [sp, #12]
    49c4:	898b      	ldrh	r3, [r1, #12]
    49c6:	4680      	mov	r8, r0
    49c8:	061c      	lsls	r4, r3, #24
    49ca:	460d      	mov	r5, r1
    49cc:	4616      	mov	r6, r2
    49ce:	d50d      	bpl.n	49ec <_svfiprintf_r+0x30>
    49d0:	690b      	ldr	r3, [r1, #16]
    49d2:	b95b      	cbnz	r3, 49ec <_svfiprintf_r+0x30>
    49d4:	2140      	movs	r1, #64	; 0x40
    49d6:	f7ff feed 	bl	47b4 <_malloc_r>
    49da:	6028      	str	r0, [r5, #0]
    49dc:	6128      	str	r0, [r5, #16]
    49de:	b918      	cbnz	r0, 49e8 <_svfiprintf_r+0x2c>
    49e0:	230c      	movs	r3, #12
    49e2:	f8c8 3000 	str.w	r3, [r8]
    49e6:	e0cd      	b.n	4b84 <_svfiprintf_r+0x1c8>
    49e8:	2340      	movs	r3, #64	; 0x40
    49ea:	616b      	str	r3, [r5, #20]
    49ec:	2300      	movs	r3, #0
    49ee:	9309      	str	r3, [sp, #36]	; 0x24
    49f0:	2320      	movs	r3, #32
    49f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    49f6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4b94 <_svfiprintf_r+0x1d8>
    49fa:	2330      	movs	r3, #48	; 0x30
    49fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    4a00:	4637      	mov	r7, r6
    4a02:	463c      	mov	r4, r7
    4a04:	f814 3b01 	ldrb.w	r3, [r4], #1
    4a08:	b91b      	cbnz	r3, 4a12 <_svfiprintf_r+0x56>
    4a0a:	ebb7 0906 	subs.w	r9, r7, r6
    4a0e:	d010      	beq.n	4a32 <_svfiprintf_r+0x76>
    4a10:	e003      	b.n	4a1a <_svfiprintf_r+0x5e>
    4a12:	2b25      	cmp	r3, #37	; 0x25
    4a14:	d0f9      	beq.n	4a0a <_svfiprintf_r+0x4e>
    4a16:	4627      	mov	r7, r4
    4a18:	e7f3      	b.n	4a02 <_svfiprintf_r+0x46>
    4a1a:	464b      	mov	r3, r9
    4a1c:	4632      	mov	r2, r6
    4a1e:	4629      	mov	r1, r5
    4a20:	4640      	mov	r0, r8
    4a22:	f7ff ff71 	bl	4908 <__ssputs_r>
    4a26:	3001      	adds	r0, #1
    4a28:	f000 80a7 	beq.w	4b7a <_svfiprintf_r+0x1be>
    4a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a2e:	444b      	add	r3, r9
    4a30:	9309      	str	r3, [sp, #36]	; 0x24
    4a32:	783b      	ldrb	r3, [r7, #0]
    4a34:	2b00      	cmp	r3, #0
    4a36:	f000 80a0 	beq.w	4b7a <_svfiprintf_r+0x1be>
    4a3a:	2300      	movs	r3, #0
    4a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a40:	9304      	str	r3, [sp, #16]
    4a42:	9307      	str	r3, [sp, #28]
    4a44:	9205      	str	r2, [sp, #20]
    4a46:	9306      	str	r3, [sp, #24]
    4a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    4a4c:	931a      	str	r3, [sp, #104]	; 0x68
    4a4e:	2601      	movs	r6, #1
    4a50:	2205      	movs	r2, #5
    4a52:	7821      	ldrb	r1, [r4, #0]
    4a54:	484e      	ldr	r0, [pc, #312]	; (4b90 <_svfiprintf_r+0x1d4>)
    4a56:	f000 fa41 	bl	4edc <memchr>
    4a5a:	1c67      	adds	r7, r4, #1
    4a5c:	9b04      	ldr	r3, [sp, #16]
    4a5e:	b138      	cbz	r0, 4a70 <_svfiprintf_r+0xb4>
    4a60:	4a4b      	ldr	r2, [pc, #300]	; (4b90 <_svfiprintf_r+0x1d4>)
    4a62:	463c      	mov	r4, r7
    4a64:	1a80      	subs	r0, r0, r2
    4a66:	fa06 f000 	lsl.w	r0, r6, r0
    4a6a:	4318      	orrs	r0, r3
    4a6c:	9004      	str	r0, [sp, #16]
    4a6e:	e7ef      	b.n	4a50 <_svfiprintf_r+0x94>
    4a70:	06d9      	lsls	r1, r3, #27
    4a72:	bf44      	itt	mi
    4a74:	2220      	movmi	r2, #32
    4a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    4a7a:	071a      	lsls	r2, r3, #28
    4a7c:	bf44      	itt	mi
    4a7e:	222b      	movmi	r2, #43	; 0x2b
    4a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    4a84:	7822      	ldrb	r2, [r4, #0]
    4a86:	2a2a      	cmp	r2, #42	; 0x2a
    4a88:	d003      	beq.n	4a92 <_svfiprintf_r+0xd6>
    4a8a:	9a07      	ldr	r2, [sp, #28]
    4a8c:	2100      	movs	r1, #0
    4a8e:	200a      	movs	r0, #10
    4a90:	e00b      	b.n	4aaa <_svfiprintf_r+0xee>
    4a92:	9a03      	ldr	r2, [sp, #12]
    4a94:	1d11      	adds	r1, r2, #4
    4a96:	6812      	ldr	r2, [r2, #0]
    4a98:	9103      	str	r1, [sp, #12]
    4a9a:	2a00      	cmp	r2, #0
    4a9c:	da10      	bge.n	4ac0 <_svfiprintf_r+0x104>
    4a9e:	4252      	negs	r2, r2
    4aa0:	f043 0002 	orr.w	r0, r3, #2
    4aa4:	9207      	str	r2, [sp, #28]
    4aa6:	9004      	str	r0, [sp, #16]
    4aa8:	e00b      	b.n	4ac2 <_svfiprintf_r+0x106>
    4aaa:	4627      	mov	r7, r4
    4aac:	783b      	ldrb	r3, [r7, #0]
    4aae:	3401      	adds	r4, #1
    4ab0:	3b30      	subs	r3, #48	; 0x30
    4ab2:	2b09      	cmp	r3, #9
    4ab4:	d803      	bhi.n	4abe <_svfiprintf_r+0x102>
    4ab6:	fb00 3202 	mla	r2, r0, r2, r3
    4aba:	2101      	movs	r1, #1
    4abc:	e7f5      	b.n	4aaa <_svfiprintf_r+0xee>
    4abe:	b101      	cbz	r1, 4ac2 <_svfiprintf_r+0x106>
    4ac0:	9207      	str	r2, [sp, #28]
    4ac2:	783b      	ldrb	r3, [r7, #0]
    4ac4:	2b2e      	cmp	r3, #46	; 0x2e
    4ac6:	d11e      	bne.n	4b06 <_svfiprintf_r+0x14a>
    4ac8:	787b      	ldrb	r3, [r7, #1]
    4aca:	2b2a      	cmp	r3, #42	; 0x2a
    4acc:	d10a      	bne.n	4ae4 <_svfiprintf_r+0x128>
    4ace:	9b03      	ldr	r3, [sp, #12]
    4ad0:	3702      	adds	r7, #2
    4ad2:	1d1a      	adds	r2, r3, #4
    4ad4:	681b      	ldr	r3, [r3, #0]
    4ad6:	9203      	str	r2, [sp, #12]
    4ad8:	2b00      	cmp	r3, #0
    4ada:	bfb8      	it	lt
    4adc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    4ae0:	9305      	str	r3, [sp, #20]
    4ae2:	e010      	b.n	4b06 <_svfiprintf_r+0x14a>
    4ae4:	2300      	movs	r3, #0
    4ae6:	4619      	mov	r1, r3
    4ae8:	9305      	str	r3, [sp, #20]
    4aea:	1c78      	adds	r0, r7, #1
    4aec:	240a      	movs	r4, #10
    4aee:	4607      	mov	r7, r0
    4af0:	783a      	ldrb	r2, [r7, #0]
    4af2:	3001      	adds	r0, #1
    4af4:	3a30      	subs	r2, #48	; 0x30
    4af6:	2a09      	cmp	r2, #9
    4af8:	d803      	bhi.n	4b02 <_svfiprintf_r+0x146>
    4afa:	fb04 2101 	mla	r1, r4, r1, r2
    4afe:	2301      	movs	r3, #1
    4b00:	e7f5      	b.n	4aee <_svfiprintf_r+0x132>
    4b02:	b103      	cbz	r3, 4b06 <_svfiprintf_r+0x14a>
    4b04:	9105      	str	r1, [sp, #20]
    4b06:	2203      	movs	r2, #3
    4b08:	7839      	ldrb	r1, [r7, #0]
    4b0a:	4822      	ldr	r0, [pc, #136]	; (4b94 <_svfiprintf_r+0x1d8>)
    4b0c:	f000 f9e6 	bl	4edc <memchr>
    4b10:	b140      	cbz	r0, 4b24 <_svfiprintf_r+0x168>
    4b12:	2340      	movs	r3, #64	; 0x40
    4b14:	ebcb 0000 	rsb	r0, fp, r0
    4b18:	fa03 f000 	lsl.w	r0, r3, r0
    4b1c:	9b04      	ldr	r3, [sp, #16]
    4b1e:	3701      	adds	r7, #1
    4b20:	4318      	orrs	r0, r3
    4b22:	9004      	str	r0, [sp, #16]
    4b24:	7839      	ldrb	r1, [r7, #0]
    4b26:	2206      	movs	r2, #6
    4b28:	481b      	ldr	r0, [pc, #108]	; (4b98 <_svfiprintf_r+0x1dc>)
    4b2a:	1c7e      	adds	r6, r7, #1
    4b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    4b30:	f000 f9d4 	bl	4edc <memchr>
    4b34:	b188      	cbz	r0, 4b5a <_svfiprintf_r+0x19e>
    4b36:	4b19      	ldr	r3, [pc, #100]	; (4b9c <_svfiprintf_r+0x1e0>)
    4b38:	b933      	cbnz	r3, 4b48 <_svfiprintf_r+0x18c>
    4b3a:	9b03      	ldr	r3, [sp, #12]
    4b3c:	3307      	adds	r3, #7
    4b3e:	f023 0307 	bic.w	r3, r3, #7
    4b42:	3308      	adds	r3, #8
    4b44:	9303      	str	r3, [sp, #12]
    4b46:	e014      	b.n	4b72 <_svfiprintf_r+0x1b6>
    4b48:	ab03      	add	r3, sp, #12
    4b4a:	9300      	str	r3, [sp, #0]
    4b4c:	462a      	mov	r2, r5
    4b4e:	4b14      	ldr	r3, [pc, #80]	; (4ba0 <_svfiprintf_r+0x1e4>)
    4b50:	a904      	add	r1, sp, #16
    4b52:	4640      	mov	r0, r8
    4b54:	f3af 8000 	nop.w
    4b58:	e007      	b.n	4b6a <_svfiprintf_r+0x1ae>
    4b5a:	ab03      	add	r3, sp, #12
    4b5c:	9300      	str	r3, [sp, #0]
    4b5e:	462a      	mov	r2, r5
    4b60:	4b0f      	ldr	r3, [pc, #60]	; (4ba0 <_svfiprintf_r+0x1e4>)
    4b62:	a904      	add	r1, sp, #16
    4b64:	4640      	mov	r0, r8
    4b66:	f000 f893 	bl	4c90 <_printf_i>
    4b6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4b6e:	4682      	mov	sl, r0
    4b70:	d003      	beq.n	4b7a <_svfiprintf_r+0x1be>
    4b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b74:	4453      	add	r3, sl
    4b76:	9309      	str	r3, [sp, #36]	; 0x24
    4b78:	e742      	b.n	4a00 <_svfiprintf_r+0x44>
    4b7a:	89ab      	ldrh	r3, [r5, #12]
    4b7c:	065b      	lsls	r3, r3, #25
    4b7e:	d401      	bmi.n	4b84 <_svfiprintf_r+0x1c8>
    4b80:	9809      	ldr	r0, [sp, #36]	; 0x24
    4b82:	e001      	b.n	4b88 <_svfiprintf_r+0x1cc>
    4b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4b88:	b01d      	add	sp, #116	; 0x74
    4b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b8e:	bf00      	nop
    4b90:	0000503c 	.word	0x0000503c
    4b94:	00005042 	.word	0x00005042
    4b98:	00005046 	.word	0x00005046
    4b9c:	00000000 	.word	0x00000000
    4ba0:	00004909 	.word	0x00004909

00004ba4 <_printf_common>:
    4ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ba8:	4691      	mov	r9, r2
    4baa:	461f      	mov	r7, r3
    4bac:	690a      	ldr	r2, [r1, #16]
    4bae:	688b      	ldr	r3, [r1, #8]
    4bb0:	4606      	mov	r6, r0
    4bb2:	4293      	cmp	r3, r2
    4bb4:	bfb8      	it	lt
    4bb6:	4613      	movlt	r3, r2
    4bb8:	f8c9 3000 	str.w	r3, [r9]
    4bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    4bc0:	460c      	mov	r4, r1
    4bc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    4bc6:	b112      	cbz	r2, 4bce <_printf_common+0x2a>
    4bc8:	3301      	adds	r3, #1
    4bca:	f8c9 3000 	str.w	r3, [r9]
    4bce:	6823      	ldr	r3, [r4, #0]
    4bd0:	0699      	lsls	r1, r3, #26
    4bd2:	bf42      	ittt	mi
    4bd4:	f8d9 3000 	ldrmi.w	r3, [r9]
    4bd8:	3302      	addmi	r3, #2
    4bda:	f8c9 3000 	strmi.w	r3, [r9]
    4bde:	6825      	ldr	r5, [r4, #0]
    4be0:	f015 0506 	ands.w	r5, r5, #6
    4be4:	d110      	bne.n	4c08 <_printf_common+0x64>
    4be6:	f104 0a19 	add.w	sl, r4, #25
    4bea:	e007      	b.n	4bfc <_printf_common+0x58>
    4bec:	2301      	movs	r3, #1
    4bee:	4652      	mov	r2, sl
    4bf0:	4639      	mov	r1, r7
    4bf2:	4630      	mov	r0, r6
    4bf4:	47c0      	blx	r8
    4bf6:	3001      	adds	r0, #1
    4bf8:	d01a      	beq.n	4c30 <_printf_common+0x8c>
    4bfa:	3501      	adds	r5, #1
    4bfc:	68e3      	ldr	r3, [r4, #12]
    4bfe:	f8d9 2000 	ldr.w	r2, [r9]
    4c02:	1a9b      	subs	r3, r3, r2
    4c04:	429d      	cmp	r5, r3
    4c06:	dbf1      	blt.n	4bec <_printf_common+0x48>
    4c08:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    4c0c:	6822      	ldr	r2, [r4, #0]
    4c0e:	3300      	adds	r3, #0
    4c10:	bf18      	it	ne
    4c12:	2301      	movne	r3, #1
    4c14:	0692      	lsls	r2, r2, #26
    4c16:	d50f      	bpl.n	4c38 <_printf_common+0x94>
    4c18:	18e1      	adds	r1, r4, r3
    4c1a:	2030      	movs	r0, #48	; 0x30
    4c1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    4c20:	1c5a      	adds	r2, r3, #1
    4c22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    4c26:	4422      	add	r2, r4
    4c28:	3302      	adds	r3, #2
    4c2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    4c2e:	e003      	b.n	4c38 <_printf_common+0x94>
    4c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
    4c3c:	4639      	mov	r1, r7
    4c3e:	4630      	mov	r0, r6
    4c40:	47c0      	blx	r8
    4c42:	3001      	adds	r0, #1
    4c44:	d0f4      	beq.n	4c30 <_printf_common+0x8c>
    4c46:	6822      	ldr	r2, [r4, #0]
    4c48:	f8d9 5000 	ldr.w	r5, [r9]
    4c4c:	68e3      	ldr	r3, [r4, #12]
    4c4e:	f002 0206 	and.w	r2, r2, #6
    4c52:	2a04      	cmp	r2, #4
    4c54:	bf08      	it	eq
    4c56:	1b5d      	subeq	r5, r3, r5
    4c58:	6922      	ldr	r2, [r4, #16]
    4c5a:	68a3      	ldr	r3, [r4, #8]
    4c5c:	bf0c      	ite	eq
    4c5e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    4c62:	2500      	movne	r5, #0
    4c64:	4293      	cmp	r3, r2
    4c66:	bfc4      	itt	gt
    4c68:	1a9b      	subgt	r3, r3, r2
    4c6a:	18ed      	addgt	r5, r5, r3
    4c6c:	f04f 0900 	mov.w	r9, #0
    4c70:	341a      	adds	r4, #26
    4c72:	454d      	cmp	r5, r9
    4c74:	d009      	beq.n	4c8a <_printf_common+0xe6>
    4c76:	2301      	movs	r3, #1
    4c78:	4622      	mov	r2, r4
    4c7a:	4639      	mov	r1, r7
    4c7c:	4630      	mov	r0, r6
    4c7e:	47c0      	blx	r8
    4c80:	3001      	adds	r0, #1
    4c82:	d0d5      	beq.n	4c30 <_printf_common+0x8c>
    4c84:	f109 0901 	add.w	r9, r9, #1
    4c88:	e7f3      	b.n	4c72 <_printf_common+0xce>
    4c8a:	2000      	movs	r0, #0
    4c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004c90 <_printf_i>:
    4c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c94:	4617      	mov	r7, r2
    4c96:	7e0a      	ldrb	r2, [r1, #24]
    4c98:	b085      	sub	sp, #20
    4c9a:	2a6e      	cmp	r2, #110	; 0x6e
    4c9c:	4698      	mov	r8, r3
    4c9e:	4606      	mov	r6, r0
    4ca0:	460c      	mov	r4, r1
    4ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ca4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    4ca8:	f000 80ae 	beq.w	4e08 <_printf_i+0x178>
    4cac:	d811      	bhi.n	4cd2 <_printf_i+0x42>
    4cae:	2a63      	cmp	r2, #99	; 0x63
    4cb0:	d022      	beq.n	4cf8 <_printf_i+0x68>
    4cb2:	d809      	bhi.n	4cc8 <_printf_i+0x38>
    4cb4:	2a00      	cmp	r2, #0
    4cb6:	f000 80bb 	beq.w	4e30 <_printf_i+0x1a0>
    4cba:	2a58      	cmp	r2, #88	; 0x58
    4cbc:	f040 80ca 	bne.w	4e54 <_printf_i+0x1c4>
    4cc0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    4cc4:	4983      	ldr	r1, [pc, #524]	; (4ed4 <_printf_i+0x244>)
    4cc6:	e055      	b.n	4d74 <_printf_i+0xe4>
    4cc8:	2a64      	cmp	r2, #100	; 0x64
    4cca:	d01e      	beq.n	4d0a <_printf_i+0x7a>
    4ccc:	2a69      	cmp	r2, #105	; 0x69
    4cce:	d01c      	beq.n	4d0a <_printf_i+0x7a>
    4cd0:	e0c0      	b.n	4e54 <_printf_i+0x1c4>
    4cd2:	2a73      	cmp	r2, #115	; 0x73
    4cd4:	f000 80b0 	beq.w	4e38 <_printf_i+0x1a8>
    4cd8:	d809      	bhi.n	4cee <_printf_i+0x5e>
    4cda:	2a6f      	cmp	r2, #111	; 0x6f
    4cdc:	d02e      	beq.n	4d3c <_printf_i+0xac>
    4cde:	2a70      	cmp	r2, #112	; 0x70
    4ce0:	f040 80b8 	bne.w	4e54 <_printf_i+0x1c4>
    4ce4:	680a      	ldr	r2, [r1, #0]
    4ce6:	f042 0220 	orr.w	r2, r2, #32
    4cea:	600a      	str	r2, [r1, #0]
    4cec:	e03e      	b.n	4d6c <_printf_i+0xdc>
    4cee:	2a75      	cmp	r2, #117	; 0x75
    4cf0:	d024      	beq.n	4d3c <_printf_i+0xac>
    4cf2:	2a78      	cmp	r2, #120	; 0x78
    4cf4:	d03a      	beq.n	4d6c <_printf_i+0xdc>
    4cf6:	e0ad      	b.n	4e54 <_printf_i+0x1c4>
    4cf8:	681a      	ldr	r2, [r3, #0]
    4cfa:	f101 0542 	add.w	r5, r1, #66	; 0x42
    4cfe:	1d11      	adds	r1, r2, #4
    4d00:	6019      	str	r1, [r3, #0]
    4d02:	6813      	ldr	r3, [r2, #0]
    4d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    4d08:	e0a8      	b.n	4e5c <_printf_i+0x1cc>
    4d0a:	6821      	ldr	r1, [r4, #0]
    4d0c:	681a      	ldr	r2, [r3, #0]
    4d0e:	f011 0f80 	tst.w	r1, #128	; 0x80
    4d12:	d002      	beq.n	4d1a <_printf_i+0x8a>
    4d14:	1d11      	adds	r1, r2, #4
    4d16:	6019      	str	r1, [r3, #0]
    4d18:	e008      	b.n	4d2c <_printf_i+0x9c>
    4d1a:	f011 0f40 	tst.w	r1, #64	; 0x40
    4d1e:	f102 0104 	add.w	r1, r2, #4
    4d22:	6019      	str	r1, [r3, #0]
    4d24:	d002      	beq.n	4d2c <_printf_i+0x9c>
    4d26:	f9b2 3000 	ldrsh.w	r3, [r2]
    4d2a:	e000      	b.n	4d2e <_printf_i+0x9e>
    4d2c:	6813      	ldr	r3, [r2, #0]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	da3c      	bge.n	4dac <_printf_i+0x11c>
    4d32:	222d      	movs	r2, #45	; 0x2d
    4d34:	425b      	negs	r3, r3
    4d36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    4d3a:	e037      	b.n	4dac <_printf_i+0x11c>
    4d3c:	6821      	ldr	r1, [r4, #0]
    4d3e:	681a      	ldr	r2, [r3, #0]
    4d40:	f011 0f80 	tst.w	r1, #128	; 0x80
    4d44:	d002      	beq.n	4d4c <_printf_i+0xbc>
    4d46:	1d11      	adds	r1, r2, #4
    4d48:	6019      	str	r1, [r3, #0]
    4d4a:	e007      	b.n	4d5c <_printf_i+0xcc>
    4d4c:	f011 0f40 	tst.w	r1, #64	; 0x40
    4d50:	f102 0104 	add.w	r1, r2, #4
    4d54:	6019      	str	r1, [r3, #0]
    4d56:	d001      	beq.n	4d5c <_printf_i+0xcc>
    4d58:	8813      	ldrh	r3, [r2, #0]
    4d5a:	e000      	b.n	4d5e <_printf_i+0xce>
    4d5c:	6813      	ldr	r3, [r2, #0]
    4d5e:	7e22      	ldrb	r2, [r4, #24]
    4d60:	495c      	ldr	r1, [pc, #368]	; (4ed4 <_printf_i+0x244>)
    4d62:	2a6f      	cmp	r2, #111	; 0x6f
    4d64:	bf14      	ite	ne
    4d66:	220a      	movne	r2, #10
    4d68:	2208      	moveq	r2, #8
    4d6a:	e01b      	b.n	4da4 <_printf_i+0x114>
    4d6c:	2278      	movs	r2, #120	; 0x78
    4d6e:	495a      	ldr	r1, [pc, #360]	; (4ed8 <_printf_i+0x248>)
    4d70:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    4d74:	6822      	ldr	r2, [r4, #0]
    4d76:	6818      	ldr	r0, [r3, #0]
    4d78:	f012 0f80 	tst.w	r2, #128	; 0x80
    4d7c:	f100 0504 	add.w	r5, r0, #4
    4d80:	601d      	str	r5, [r3, #0]
    4d82:	d103      	bne.n	4d8c <_printf_i+0xfc>
    4d84:	0655      	lsls	r5, r2, #25
    4d86:	d501      	bpl.n	4d8c <_printf_i+0xfc>
    4d88:	8803      	ldrh	r3, [r0, #0]
    4d8a:	e000      	b.n	4d8e <_printf_i+0xfe>
    4d8c:	6803      	ldr	r3, [r0, #0]
    4d8e:	07d0      	lsls	r0, r2, #31
    4d90:	bf44      	itt	mi
    4d92:	f042 0220 	orrmi.w	r2, r2, #32
    4d96:	6022      	strmi	r2, [r4, #0]
    4d98:	b91b      	cbnz	r3, 4da2 <_printf_i+0x112>
    4d9a:	6822      	ldr	r2, [r4, #0]
    4d9c:	f022 0220 	bic.w	r2, r2, #32
    4da0:	6022      	str	r2, [r4, #0]
    4da2:	2210      	movs	r2, #16
    4da4:	2000      	movs	r0, #0
    4da6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    4daa:	e001      	b.n	4db0 <_printf_i+0x120>
    4dac:	4949      	ldr	r1, [pc, #292]	; (4ed4 <_printf_i+0x244>)
    4dae:	220a      	movs	r2, #10
    4db0:	6865      	ldr	r5, [r4, #4]
    4db2:	2d00      	cmp	r5, #0
    4db4:	60a5      	str	r5, [r4, #8]
    4db6:	db08      	blt.n	4dca <_printf_i+0x13a>
    4db8:	6820      	ldr	r0, [r4, #0]
    4dba:	f020 0004 	bic.w	r0, r0, #4
    4dbe:	6020      	str	r0, [r4, #0]
    4dc0:	b92b      	cbnz	r3, 4dce <_printf_i+0x13e>
    4dc2:	2d00      	cmp	r5, #0
    4dc4:	d17d      	bne.n	4ec2 <_printf_i+0x232>
    4dc6:	4675      	mov	r5, lr
    4dc8:	e00c      	b.n	4de4 <_printf_i+0x154>
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d079      	beq.n	4ec2 <_printf_i+0x232>
    4dce:	4675      	mov	r5, lr
    4dd0:	fbb3 f0f2 	udiv	r0, r3, r2
    4dd4:	fb02 3310 	mls	r3, r2, r0, r3
    4dd8:	5ccb      	ldrb	r3, [r1, r3]
    4dda:	f805 3d01 	strb.w	r3, [r5, #-1]!
    4dde:	4603      	mov	r3, r0
    4de0:	2800      	cmp	r0, #0
    4de2:	d1f5      	bne.n	4dd0 <_printf_i+0x140>
    4de4:	2a08      	cmp	r2, #8
    4de6:	d10b      	bne.n	4e00 <_printf_i+0x170>
    4de8:	6823      	ldr	r3, [r4, #0]
    4dea:	07da      	lsls	r2, r3, #31
    4dec:	d508      	bpl.n	4e00 <_printf_i+0x170>
    4dee:	6923      	ldr	r3, [r4, #16]
    4df0:	6862      	ldr	r2, [r4, #4]
    4df2:	429a      	cmp	r2, r3
    4df4:	bfde      	ittt	le
    4df6:	2330      	movle	r3, #48	; 0x30
    4df8:	f805 3c01 	strble.w	r3, [r5, #-1]
    4dfc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    4e00:	ebc5 030e 	rsb	r3, r5, lr
    4e04:	6123      	str	r3, [r4, #16]
    4e06:	e02e      	b.n	4e66 <_printf_i+0x1d6>
    4e08:	6808      	ldr	r0, [r1, #0]
    4e0a:	681a      	ldr	r2, [r3, #0]
    4e0c:	f010 0f80 	tst.w	r0, #128	; 0x80
    4e10:	6949      	ldr	r1, [r1, #20]
    4e12:	d003      	beq.n	4e1c <_printf_i+0x18c>
    4e14:	1d10      	adds	r0, r2, #4
    4e16:	6018      	str	r0, [r3, #0]
    4e18:	6813      	ldr	r3, [r2, #0]
    4e1a:	e008      	b.n	4e2e <_printf_i+0x19e>
    4e1c:	f010 0f40 	tst.w	r0, #64	; 0x40
    4e20:	f102 0004 	add.w	r0, r2, #4
    4e24:	6018      	str	r0, [r3, #0]
    4e26:	6813      	ldr	r3, [r2, #0]
    4e28:	d001      	beq.n	4e2e <_printf_i+0x19e>
    4e2a:	8019      	strh	r1, [r3, #0]
    4e2c:	e000      	b.n	4e30 <_printf_i+0x1a0>
    4e2e:	6019      	str	r1, [r3, #0]
    4e30:	2300      	movs	r3, #0
    4e32:	6123      	str	r3, [r4, #16]
    4e34:	4675      	mov	r5, lr
    4e36:	e016      	b.n	4e66 <_printf_i+0x1d6>
    4e38:	681a      	ldr	r2, [r3, #0]
    4e3a:	1d11      	adds	r1, r2, #4
    4e3c:	6019      	str	r1, [r3, #0]
    4e3e:	6815      	ldr	r5, [r2, #0]
    4e40:	2100      	movs	r1, #0
    4e42:	6862      	ldr	r2, [r4, #4]
    4e44:	4628      	mov	r0, r5
    4e46:	f000 f849 	bl	4edc <memchr>
    4e4a:	b108      	cbz	r0, 4e50 <_printf_i+0x1c0>
    4e4c:	1b40      	subs	r0, r0, r5
    4e4e:	6060      	str	r0, [r4, #4]
    4e50:	6863      	ldr	r3, [r4, #4]
    4e52:	e004      	b.n	4e5e <_printf_i+0x1ce>
    4e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
    4e58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    4e5c:	2301      	movs	r3, #1
    4e5e:	6123      	str	r3, [r4, #16]
    4e60:	2300      	movs	r3, #0
    4e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    4e66:	f8cd 8000 	str.w	r8, [sp]
    4e6a:	463b      	mov	r3, r7
    4e6c:	aa03      	add	r2, sp, #12
    4e6e:	4621      	mov	r1, r4
    4e70:	4630      	mov	r0, r6
    4e72:	f7ff fe97 	bl	4ba4 <_printf_common>
    4e76:	3001      	adds	r0, #1
    4e78:	d102      	bne.n	4e80 <_printf_i+0x1f0>
    4e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e7e:	e026      	b.n	4ece <_printf_i+0x23e>
    4e80:	6923      	ldr	r3, [r4, #16]
    4e82:	462a      	mov	r2, r5
    4e84:	4639      	mov	r1, r7
    4e86:	4630      	mov	r0, r6
    4e88:	47c0      	blx	r8
    4e8a:	3001      	adds	r0, #1
    4e8c:	d0f5      	beq.n	4e7a <_printf_i+0x1ea>
    4e8e:	6823      	ldr	r3, [r4, #0]
    4e90:	079b      	lsls	r3, r3, #30
    4e92:	d510      	bpl.n	4eb6 <_printf_i+0x226>
    4e94:	2500      	movs	r5, #0
    4e96:	f104 0919 	add.w	r9, r4, #25
    4e9a:	e007      	b.n	4eac <_printf_i+0x21c>
    4e9c:	2301      	movs	r3, #1
    4e9e:	464a      	mov	r2, r9
    4ea0:	4639      	mov	r1, r7
    4ea2:	4630      	mov	r0, r6
    4ea4:	47c0      	blx	r8
    4ea6:	3001      	adds	r0, #1
    4ea8:	d0e7      	beq.n	4e7a <_printf_i+0x1ea>
    4eaa:	3501      	adds	r5, #1
    4eac:	68e3      	ldr	r3, [r4, #12]
    4eae:	9a03      	ldr	r2, [sp, #12]
    4eb0:	1a9b      	subs	r3, r3, r2
    4eb2:	429d      	cmp	r5, r3
    4eb4:	dbf2      	blt.n	4e9c <_printf_i+0x20c>
    4eb6:	68e0      	ldr	r0, [r4, #12]
    4eb8:	9b03      	ldr	r3, [sp, #12]
    4eba:	4298      	cmp	r0, r3
    4ebc:	bfb8      	it	lt
    4ebe:	4618      	movlt	r0, r3
    4ec0:	e005      	b.n	4ece <_printf_i+0x23e>
    4ec2:	780b      	ldrb	r3, [r1, #0]
    4ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    4ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    4ecc:	e78a      	b.n	4de4 <_printf_i+0x154>
    4ece:	b005      	add	sp, #20
    4ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ed4:	0000504d 	.word	0x0000504d
    4ed8:	0000505e 	.word	0x0000505e

00004edc <memchr>:
    4edc:	b510      	push	{r4, lr}
    4ede:	b2c9      	uxtb	r1, r1
    4ee0:	4402      	add	r2, r0
    4ee2:	4290      	cmp	r0, r2
    4ee4:	4603      	mov	r3, r0
    4ee6:	d005      	beq.n	4ef4 <memchr+0x18>
    4ee8:	781c      	ldrb	r4, [r3, #0]
    4eea:	3001      	adds	r0, #1
    4eec:	428c      	cmp	r4, r1
    4eee:	d1f8      	bne.n	4ee2 <memchr+0x6>
    4ef0:	4618      	mov	r0, r3
    4ef2:	bd10      	pop	{r4, pc}
    4ef4:	2000      	movs	r0, #0
    4ef6:	bd10      	pop	{r4, pc}

00004ef8 <memcpy>:
    4ef8:	b510      	push	{r4, lr}
    4efa:	1e43      	subs	r3, r0, #1
    4efc:	440a      	add	r2, r1
    4efe:	4291      	cmp	r1, r2
    4f00:	d004      	beq.n	4f0c <memcpy+0x14>
    4f02:	f811 4b01 	ldrb.w	r4, [r1], #1
    4f06:	f803 4f01 	strb.w	r4, [r3, #1]!
    4f0a:	e7f8      	b.n	4efe <memcpy+0x6>
    4f0c:	bd10      	pop	{r4, pc}

00004f0e <memmove>:
    4f0e:	4288      	cmp	r0, r1
    4f10:	b510      	push	{r4, lr}
    4f12:	eb01 0302 	add.w	r3, r1, r2
    4f16:	d801      	bhi.n	4f1c <memmove+0xe>
    4f18:	1e42      	subs	r2, r0, #1
    4f1a:	e00b      	b.n	4f34 <memmove+0x26>
    4f1c:	4298      	cmp	r0, r3
    4f1e:	d2fb      	bcs.n	4f18 <memmove+0xa>
    4f20:	1881      	adds	r1, r0, r2
    4f22:	1ad2      	subs	r2, r2, r3
    4f24:	42d3      	cmn	r3, r2
    4f26:	d004      	beq.n	4f32 <memmove+0x24>
    4f28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    4f2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    4f30:	e7f8      	b.n	4f24 <memmove+0x16>
    4f32:	bd10      	pop	{r4, pc}
    4f34:	4299      	cmp	r1, r3
    4f36:	d004      	beq.n	4f42 <memmove+0x34>
    4f38:	f811 4b01 	ldrb.w	r4, [r1], #1
    4f3c:	f802 4f01 	strb.w	r4, [r2, #1]!
    4f40:	e7f8      	b.n	4f34 <memmove+0x26>
    4f42:	bd10      	pop	{r4, pc}

00004f44 <_realloc_r>:
    4f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f46:	4607      	mov	r7, r0
    4f48:	4615      	mov	r5, r2
    4f4a:	460e      	mov	r6, r1
    4f4c:	b921      	cbnz	r1, 4f58 <_realloc_r+0x14>
    4f4e:	4611      	mov	r1, r2
    4f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f54:	f7ff bc2e 	b.w	47b4 <_malloc_r>
    4f58:	b91a      	cbnz	r2, 4f62 <_realloc_r+0x1e>
    4f5a:	f7ff fbdf 	bl	471c <_free_r>
    4f5e:	4628      	mov	r0, r5
    4f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f62:	f000 f815 	bl	4f90 <_malloc_usable_size_r>
    4f66:	4285      	cmp	r5, r0
    4f68:	d90e      	bls.n	4f88 <_realloc_r+0x44>
    4f6a:	4629      	mov	r1, r5
    4f6c:	4638      	mov	r0, r7
    4f6e:	f7ff fc21 	bl	47b4 <_malloc_r>
    4f72:	4604      	mov	r4, r0
    4f74:	b150      	cbz	r0, 4f8c <_realloc_r+0x48>
    4f76:	4631      	mov	r1, r6
    4f78:	462a      	mov	r2, r5
    4f7a:	f7ff ffbd 	bl	4ef8 <memcpy>
    4f7e:	4631      	mov	r1, r6
    4f80:	4638      	mov	r0, r7
    4f82:	f7ff fbcb 	bl	471c <_free_r>
    4f86:	e001      	b.n	4f8c <_realloc_r+0x48>
    4f88:	4630      	mov	r0, r6
    4f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f8c:	4620      	mov	r0, r4
    4f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004f90 <_malloc_usable_size_r>:
    4f90:	f851 0c04 	ldr.w	r0, [r1, #-4]
    4f94:	2800      	cmp	r0, #0
    4f96:	bfbe      	ittt	lt
    4f98:	1809      	addlt	r1, r1, r0
    4f9a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
    4f9e:	18c0      	addlt	r0, r0, r3
    4fa0:	3804      	subs	r0, #4
    4fa2:	4770      	bx	lr

00004fa4 <_sbrk>:
    4fa4:	4a04      	ldr	r2, [pc, #16]	; (4fb8 <_sbrk+0x14>)
    4fa6:	4905      	ldr	r1, [pc, #20]	; (4fbc <_sbrk+0x18>)
    4fa8:	6813      	ldr	r3, [r2, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	bf08      	it	eq
    4fae:	460b      	moveq	r3, r1
    4fb0:	4418      	add	r0, r3
    4fb2:	6010      	str	r0, [r2, #0]
    4fb4:	4618      	mov	r0, r3
    4fb6:	4770      	bx	lr
    4fb8:	2000079c 	.word	0x2000079c
    4fbc:	200013e0 	.word	0x200013e0

00004fc0 <_exit>:
    4fc0:	e7fe      	b.n	4fc0 <_exit>
    4fc2:	bf00      	nop

00004fc4 <_init>:
    4fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fc6:	bf00      	nop
    4fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4fca:	bc08      	pop	{r3}
    4fcc:	469e      	mov	lr, r3
    4fce:	4770      	bx	lr

00004fd0 <_fini>:
    4fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fd2:	bf00      	nop
    4fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4fd6:	bc08      	pop	{r3}
    4fd8:	469e      	mov	lr, r3
    4fda:	4770      	bx	lr
    4fdc:	00252e3a 	.word	0x00252e3a
    4fe0:	00000000 	.word	0x00000000

00004fe4 <overflowString>:
    4fe4:	2d2d2d0a 4f205852 46524556 2d574f4c     .---RX OVERFLOW-
    4ff4:	000a2d2d 00000005 00000000 000f4240     --..........@B..
    5004:	00000105 00000000 00000000 74696e75     ............unit
    5014:	20202020 676f7270 73736572 00000000         progress....
    5024:	716e7970 20206925 25692520 00000000     pynq%i   %i%....
    5034:	00006925                                %i..

00005038 <_global_impure_ptr>:
    5038:	200005e4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    5048:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5058:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5068:	64636261 00006665                       abcdef..

00005070 <__EH_FRAME_BEGIN__>:
    5070:	00000000                                ....
